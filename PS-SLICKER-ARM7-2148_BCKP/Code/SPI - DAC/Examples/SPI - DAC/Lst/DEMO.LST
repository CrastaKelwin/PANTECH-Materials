ARM COMPILER V2.54a,  DEMO                                                                 14/07/10  16:33:37  PAGE 1   


ARM COMPILER V2.54a, COMPILATION OF MODULE DEMO
OBJECT MODULE PLACED IN .\Obj\DEMO.obj
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe DEMO.c ARM BROWSE INCDIR(..\..\INC;..\..\OBJ) DEBUG SYMBOLS PRINT(.\LST\DEMO
                    -.LST) TABS(4) OBJECT(.\Obj\DEMO.obj) 

stmt  level    source

    1          /*
    2           * Project name:
    3               DEMO (Driving on-board MCP4921 Digital-to-Analog converter)
    4           * Description:
    5               This is a sample program which demonstrates the use of the Microchip's
    6               MCP4921 12-bit D/A converter with ARM mcu's. This device accepts digital
    7               input (number from 0..4095) and transforms it to the output voltage,
    8               ranging from 0..Vref. In this example the D/A communicates with ARM 
    9               through the software SPI. The reference voltage is adjustable between
   10               Vcc and 4,096V. On reset the DAC is being set to the mid-range.
   11           * Test configuration:
   12               MCU:             LPC2148
   13               Oscillator:      12.0 MHz (cclk = 60.0 MHz, Fcco = 240.0 MHz)
   14               SW:              KEIL uVision3 v3.50
   15           * MCU CARD NOTES:
   16           * BOARD NOTES:
   17               - Turn on MOSI, MISO & SCK located on SW33 DIP switch
   18               - Turn on DAC-CS located on SW34 DIP switch
   19          */
   20          
   21          
   22          #include <LPC214X.H>
   23          
   24          #include "SPIsw.h"
   25          #include "Utility.h"
   26          
   27          
   28          
   29          unsigned long
   30              DACval,
   31              DACreg;
   32          
   33          
   34          
   35          int main (void)
   36          {
   37   1      
   38   1          PINSEL0 = 0;
   39   1          PINSEL1 = 0;
   40   1          PINSEL2 &= 0x0000000C;
   41   1      
   42   1          SPI_init (&IOPIN0, 29/*CS*/, 5/*MISO*/, 6/*MOSI*/, 4/*SCK*/, 0/*CPOL*/, 0/*CPHA*/);
   43   1      
   44   1          // Set output voltage
   45   1          DACval = 2047;                                      // Range [0..4095]
   46   1          DACreg = DACval | 0x7000;                           // A#/B=0, BUF=1, GA#=1, SHDN#=1
   47   1      
   48   1          SPI_enable ();
   49   1          SPI_char ((DACreg >> 8) & 0x00FF);      // Write DAC registers
   50   1          SPI_char (DACreg & 0x00FF);
   51   1          SPI_disable ();
   52   1      
   53   1          // Endless loop
   54   1          while (1);
   55   1      }
ARM COMPILER V2.54a,  DEMO                                                                 14/07/10  16:33:37  PAGE 2   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE32 (SPI_init?A)
 EXTERN CODE32 (SPI_enable?A)
 EXTERN CODE32 (SPI_disable?A)
 EXTERN CODE32 (SPI_char?A)
 EXTERN NUMBER (__startup)



*** PUBLICS:
 PUBLIC         main
 PUBLIC         DACval
 PUBLIC         DACreg



*** DATA SEGMENT '?DT0?DEMO':
 00000000          DACval:
 00000000            DS          4
 00000004          DACreg:
 00000004            DS          4



*** CODE SEGMENT '?PR?main?DEMO':
   35: int main (void)
 00000000  E92D4000  STMDB       R13!,{LR}
   38:     PINSEL0 = 0;
 00000004  E3A01000  MOV         R1,#0x0
 00000008  E5100000  LDR         R0,=0xE002C000
 0000000C  E5801000  STR         R1,[R0,#0x0]
   39:     PINSEL1 = 0;
 00000010  E5100000  LDR         R0,=0xE002C004
 00000014  E5801000  STR         R1,[R0,#0x0]
   40:     PINSEL2 &= 0x0000000C;
 00000018  E5100000  LDR         R0,=0xE002C014
 0000001C  E5901000  LDR         R1,[R0,#0x0]
 00000020  E201100C  AND         R1,R1,#0x000C
 00000024  E5801000  STR         R1,[R0,#0x0]
   42:     SPI_init (&IOPIN0, 29/*CS*/, 5/*MISO*/, 6/*MOSI*/, 4/*SCK*/, 0/*CPOL*/, 0/*CPHA*/);
 00000028  E3A00000  MOV         R0,#0x0
 0000002C  E92D0001  STMDB       R13!,{R0}
 00000030  E92D0001  STMDB       R13!,{R0}
 00000034  E3A00004  MOV         R0,#0x4
 00000038  E92D0001  STMDB       R13!,{R0}
 0000003C  E5100000  LDR         R0,=0xE0028000
 00000040  E3A0101D  MOV         R1,#0x1D
 00000044  E3A02005  MOV         R2,#0x5
 00000048  E3A03006  MOV         R3,#0x6
 0000004C  EBFFFFEB  BL          SPI_init?A  ; Targ=0x0
 00000050  E28DD00C  ADD         R13,R13,#0x000C
   45:     DACval = 2047;                                      // Range [0..4095]
 00000054  E5101000  LDR         R1,=0x7FF
 00000058  E5100000  LDR         R0,=DACval ; DACval
 0000005C  E5801000  STR         R1,[R0,#0x0] ; DACval
   46:     DACreg = DACval | 0x7000;                           // A#/B=0, BUF=1, GA#=1, SHDN#=1
 00000060  E5100000  LDR         R0,=DACval ; DACval
 00000064  E5901000  LDR         R1,[R0,#0x0] ; DACval
 00000068  E3811A07  ORR         R1,R1,#0x7000
 0000006C  E5100000  LDR         R0,=DACreg ; DACreg
 00000070  E5801000  STR         R1,[R0,#0x0] ; DACreg
   48:     SPI_enable ();
 00000074  EBFFFFE1  BL          SPI_enable?A  ; Targ=0x0
   49:     SPI_char ((DACreg >> 8) & 0x00FF);      // Write DAC registers
 00000078  E5100000  LDR         R0,=DACreg ; DACreg
 0000007C  E5900000  LDR         R0,[R0,#0x0] ; DACreg
 00000080  E1A00420  MOV         R0,R0,LSR #8
 00000084  E20000FF  AND         R0,R0,#0x00FF
 00000088  EBFFFFDC  BL          SPI_char?A  ; Targ=0x0
ARM COMPILER V2.54a,  DEMO                                                                 14/07/10  16:33:37  PAGE 3   

   50:     SPI_char (DACreg & 0x00FF);
 0000008C  E5100000  LDR         R0,=DACreg ; DACreg
 00000090  E5900000  LDR         R0,[R0,#0x0] ; DACreg
 00000094  E20000FF  AND         R0,R0,#0x00FF
 00000098  EBFFFFD8  BL          SPI_char?A  ; Targ=0x0
   51:     SPI_disable ();
 0000009C  EBFFFFD7  BL          SPI_disable?A  ; Targ=0x0
   54:     while (1);
 000000A0          L_1:
 000000A0  EAFFFFFE  B           L_1  ; Targ=0xA0
   55: }
 000000A4  E8BD0008  LDMIA       R13!,{R3}
 000000A8  E12FFF13  BX          R3
 000000AC          ENDP ; 'main'

ARM COMPILER V2.54a,  DEMO                                                                 14/07/10  16:33:37  PAGE 4   

Name                                    Class    Space Type   Offset   Size
---------------------------------------------------------------------------

SPI_init?A . . . . . . . . . . . . . .  extern   code  funct  000000H  
SPI_enable?A . . . . . . . . . . . . .  extern   code  funct  000000H  
SPI_disable?A. . . . . . . . . . . . .  extern   code  funct  000000H  
SPI_char?A . . . . . . . . . . . . . .  extern   code  funct  000000H  
main . . . . . . . . . . . . . . . . .  public   code  funct  000000H  
DACval . . . . . . . . . . . . . . . .  public   data  ulong  000000H  4
DACreg . . . . . . . . . . . . . . . .  public   data  ulong  000004H  4


Module Information          Static
----------------------------------
  code size            =    ------
  data size            =         8
  const size           =    ------
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
