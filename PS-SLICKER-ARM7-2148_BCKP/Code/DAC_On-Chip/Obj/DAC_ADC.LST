ARM COMPILER V2.54a,  DAC_ADC                                                              14/07/10  16:41:50  PAGE 1   


ARM COMPILER V2.54a, COMPILATION OF MODULE DAC_ADC
OBJECT MODULE PLACED IN .\Out\DAC_ADC.obj
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe DAC_ADC.c THUMB BROWSE DEBUG PRINT(.\OBJ\DAC_ADC.LST) TABS(4) OBJECT(.\Out\D
                    -AC_ADC.obj) 

stmt  level    source

    1          /********************************************************************
    2              DAC Test Examples
    3              --------------------------
    4              
    5              Description
    6              -----------
    7              Measure Analog voltage at pin p0.28
    8              ADC output given to DAC's input
    9          
   10              Test configuration:
   11              -------------------
   12              Oscillator  :   12.0 MHz (cclk = 60.0 MHz, Fcco = 240.0 MHz)
   13              ADC         :   4.28MHz (VPBclock/7,   30MHZ/7)
   14          
   15              Connections - ADC0.1        
   16              -------------------------
   17              P0.28   -   AD0.1           P0.25   -   DAC O/p
   18          /********************************************************************/
   19          #include <lpc213x.h>
   20          #include <stdio.h>
   21          
   22          void DelayMs(unsigned int);
   23          
   24          //-------------------------
   25          //main program starts here
   26          //-------------------------
   27          void main(void)
   28          {
   29   1          unsigned long val;
   30   1      
   31   1          PINSEL0 = 0x00000005;
   32   1          PINSEL1 = 0X01080000;
   33   1          VPBDIV  =   0x02;                       //Set the Pclk to 30 Mhz
   34   1      
   35   1          U0LCR = 0x83;                       
   36   1          U0DLL = 195;                            //9600 baud rate
   37   1          U0LCR = 0x03;
   38   1      
   39   1          AD0CR   =   0x00270402;
   40   1          AD0CR   |=  0X01000000;
   41   1          IO0DIR  =   0x0FFF7030;
   42   1          printf("******************************************************\n");
   43   1          printf("ADC I/P Adjust Pot(R14) and Measure P0.25 for DAC O/P \n");
   44   1          printf("******************************************************\n");
   45   1      
   46   1          while(1)
   47   1          {
   48   2              do
   49   2              {
   50   3                  val = AD0DR;                    // Read A/D Data Register 
   51   3              }     
   52   2              while ((val & 0x80000000) == 0);  //Wait for the conversion to complete
   53   2              val = ((val >> 6) & 0x03FF)<<16;  //Extract the A/D result
   54   2              DelayMs(20);
   55   2              printf("ADC I/P: %d \r",val>>16);
   56   2              val = val>>16; 
   57   2              val = val<<6;
   58   2              DACR = (val & 0x0000FFC0);
ARM COMPILER V2.54a,  DAC_ADC                                                              14/07/10  16:41:50  PAGE 2   

   59   2              DelayMs(50);
   60   2          }
   61   1      }
   62          
   63          //Delay Routine
   64          void DelayMs(unsigned int count)    
   65          {  
   66   1                                          // mSec Delay 11.0592 Mhz 
   67   1          unsigned int i,j;                   // Keil v7.5a 
   68   1          for(i=0;i<count;i++)
   69   1          {
   70   2              for(j=0;j<1000;j++);
   71   2          }
   72   1      }
   73           
ARM COMPILER V2.54a,  DAC_ADC                                                              14/07/10  16:41:50  PAGE 3   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (printf?T)
 EXTERN NUMBER (__startup)



*** PUBLICS:
 PUBLIC         DelayMs?T
 PUBLIC         main



*** DATA SEGMENT '?CON?DAC_ADC':
 00000000          ??S_3:
 00000000            DB          'ADC I/P: %d ',0x0D,0x00
 0000000E          ??S_2:
 0000000E            DB          'ADC I/P Adjust Pot(R14) and Measure P0'
 00000034            DB          '.25 for DAC O/P ',0x0A,0x00
 00000046          ??S_1:
 00000046            DB          '**************************************'
 0000006C            DB          '****************',0x0A,0x00

*** CODE SEGMENT '?PR?main?DAC_ADC':
   27: void main(void)
 00000000  B500      PUSH        {LR}
   28: {
 00000002            ; SCOPE-START
   31:     PINSEL0 = 0x00000005;
 00000002  2105      MOV         R1,#0x5
 00000004  4800      LDR         R0,=0xE002C000
 00000006  6001      STR         R1,[R0,#0x0]
   32:     PINSEL1 = 0X01080000;
 00000008  4800      LDR         R1,=0x1080000
 0000000A  4800      LDR         R0,=0xE002C004
 0000000C  6001      STR         R1,[R0,#0x0]
   33:     VPBDIV  =   0x02;                       //Set the Pclk to 30 Mhz
 0000000E  2102      MOV         R1,#0x2
 00000010  4800      LDR         R0,=0xE01FC100
 00000012  7001      STRB        R1,[R0,#0x0]
   35:     U0LCR = 0x83;                       
 00000014  2183      MOV         R1,#0x83
 00000016  4800      LDR         R0,=0xE000C00C
 00000018  7001      STRB        R1,[R0,#0x0]
   36:     U0DLL = 195;                            //9600 baud rate
 0000001A  21C3      MOV         R1,#0xC3
 0000001C  4800      LDR         R0,=0xE000C000
 0000001E  7001      STRB        R1,[R0,#0x0]
   37:     U0LCR = 0x03;
 00000020  2103      MOV         R1,#0x3
 00000022  4800      LDR         R0,=0xE000C00C
 00000024  7001      STRB        R1,[R0,#0x0]
   39:     AD0CR   =   0x00270402;
 00000026  4800      LDR         R1,=0x270402
 00000028  4800      LDR         R0,=0xE0034000
 0000002A  6001      STR         R1,[R0,#0x0]
   40:     AD0CR   |=  0X01000000;
 0000002C  4800      LDR         R2,=0x1000000
 0000002E  4800      LDR         R0,=0xE0034000
 00000030  6801      LDR         R1,[R0,#0x0]
 00000032  4311      ORR         R1,R2
 00000034  6001      STR         R1,[R0,#0x0]
   41:     IO0DIR  =   0x0FFF7030;
 00000036  4800      LDR         R1,=0xFFF7030
 00000038  4800      LDR         R0,=0xE0028008
 0000003A  6001      STR         R1,[R0,#0x0]
   42:     printf("******************************************************\n");
 0000003C  4800      LDR         R0,=??S_1 ; ??S_1
 0000003E  F7FF      BL          printf?T  ; T=0x0001  (1)
ARM COMPILER V2.54a,  DAC_ADC                                                              14/07/10  16:41:50  PAGE 4   

 00000040  FFDF      BL          printf?T  ; T=0x0001  (2)
   43:     printf("ADC I/P Adjust Pot(R14) and Measure P0.25 for DAC O/P \n");
 00000042  4800      LDR         R0,=??S_2 ; ??S_2
 00000044  F7FF      BL          printf?T  ; T=0x0001  (1)
 00000046  FFDC      BL          printf?T  ; T=0x0001  (2)
   44:     printf("******************************************************\n");
 00000048  4800      LDR         R0,=??S_1 ; ??S_1
 0000004A  F7FF      BL          printf?T  ; T=0x0001  (1)
 0000004C  FFD9      BL          printf?T  ; T=0x0001  (2)
   48:         do
 0000004E          L_6:
 0000004E          L_5:
   50:             val = AD0DR;                    // Read A/D Data Register 
 0000004E  4800      LDR         R0,=0xE0034004
 00000050  6804      LDR         R4,[R0,#0x0]
 00000052  ---- Variable 'val' assigned to Register 'R4' ----
   51:         }     
 00000052  1C20      MOV         R0,R4 ; val
 00000054  4800      LDR         R1,=0x80000000
 00000056  4208      TST         R0,R1 ; val
 00000058  D0F9      BEQ         L_5  ; T=0x0000004E
   53:         val = ((val >> 6) & 0x03FF)<<16;  //Extract the A/D result
 0000005A  09A4      LSR         R4,R4,#0x6 ; val
 0000005C  4800      LDR         R0,=0x3FF
 0000005E  4004      AND         R4,R0
 00000060  0424      LSL         R4,R4,#0x10
   54:         DelayMs(20);
 00000062  2014      MOV         R0,#0x14
 00000064  F7FF      BL          DelayMs?T  ; T=0x0001  (1)
 00000066  FFCC      BL          DelayMs?T  ; T=0x0001  (2)
   55:         printf("ADC I/P: %d \r",val>>16);
 00000068  1C21      MOV         R1,R4 ; val
 0000006A  0C09      LSR         R1,R1,#0x10 ; val
 0000006C  4800      LDR         R0,=??S_3 ; ??S_3
 0000006E  F7FF      BL          printf?T  ; T=0x0001  (1)
 00000070  FFC7      BL          printf?T  ; T=0x0001  (2)
   56:         val = val>>16; 
 00000072  0C24      LSR         R4,R4,#0x10 ; val
   57:         val = val<<6;
 00000074  01A4      LSL         R4,R4,#0x6 ; val
   58:         DACR = (val & 0x0000FFC0);
 00000076  1C21      MOV         R1,R4 ; val
 00000078  4800      LDR         R0,=0xFFC0
 0000007A  4001      AND         R1,R0
 0000007C  4800      LDR         R0,=0xE006C000
 0000007E  6001      STR         R1,[R0,#0x0]
   59:         DelayMs(50);
 00000080  2032      MOV         R0,#0x32
 00000082  F7FF      BL          DelayMs?T  ; T=0x0001  (1)
 00000084  FFBD      BL          DelayMs?T  ; T=0x0001  (2)
   60:     }
 00000086  E7E2      B           L_6  ; T=0x0000004E
 00000088            ; SCOPE-END
   61: }
 00000088  BC08      POP         {R3}
 0000008A  4718      BX          R3
 0000008C          ENDP ; 'main'


*** CODE SEGMENT '?PR?DelayMs?T?DAC_ADC':
   64: void DelayMs(unsigned int count)    
 00000000  B410      PUSH        {R4}
 00000002  ---- Variable 'count' assigned to Register 'R0' ----
   65: {  
 00000002            ; SCOPE-START
   68:     for(i=0;i<count;i++)
 00000002  2100      MOV         R1,#0x0
 00000004  ---- Variable 'i' assigned to Register 'R1' ----
ARM COMPILER V2.54a,  DAC_ADC                                                              14/07/10  16:41:50  PAGE 5   

 00000004  E006      B           L_11  ; T=0x00000014
   70:         for(j=0;j<1000;j++);
 00000006          L_18:
 00000006  2200      MOV         R2,#0x0
 00000008  ---- Variable 'j' assigned to Register 'R2' ----
 00000008          L_14:
 00000008  3201      ADD         R2,#0x1
 0000000A  1C13      MOV         R3,R2 ; j
 0000000C  4CFA      LDR         R4,=0x3E8
 0000000E  42A3      CMP         R3,R4 ; j
 00000010  D3FA      BCC         L_14  ; T=0x00000008
   71:     }
 00000012  3101      ADD         R1,#0x1
 00000014          L_11:
 00000014  1C03      MOV         R3,R0 ; count
 00000016  1C0A      MOV         R2,R1 ; i
 00000018  429A      CMP         R2,R3 ; i
 0000001A  D3F4      BCC         L_18  ; T=0x00000006
 0000001C            ; SCOPE-END
   72: }
 0000001C  BC10      POP         {R4}
 0000001E  4770      BX          R14
 00000020          ENDP ; 'DelayMs?T'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =    ------
  const size           =       126
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
