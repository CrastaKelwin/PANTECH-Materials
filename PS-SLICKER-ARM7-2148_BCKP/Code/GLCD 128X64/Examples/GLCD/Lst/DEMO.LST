ARM COMPILER V2.53,  Demo                                                                  13/04/16  12:48:05  PAGE 1   


ARM COMPILER V2.53, COMPILATION OF MODULE Demo
OBJECT MODULE PLACED IN .\Obj\Demo.obj
COMPILER INVOKED BY: C:\KeilUV3\ARM\BIN\CA.exe Demo.c ARM BROWSE INCDIR(..\..\INC;..\..\OBJ) DEBUG SYMBOLS PRINT(.\LST\D
                    -EMO.LST) TABS(4) OBJECT(.\Obj\Demo.obj) 

stmt  level    source

    1          /* * Project name:
    2               DEMO (Demonstration of the GLCD library routines)
    3           * Copyright
    4               (c)Pantech Solutions, 2007.
    5           * Description:
    6                This is a simple demonstration of the GLCD library routines:
    7               - Init and Clear (pattern fill)
    8               - Image display
    9           * Test configuration:
   10               MCU:             LPC2148
   11               Ext. Modules:    GLCD 128x64 dots
   12          
   13           * GLCD CONNECTIONS
   14          
   15               - CN6 - T0 - JP8 (P1.16 to P1.23 datalines)
   16          
   17           * BOARD NOTES:
   18               - Place GLCD in position.
   19               - Move jumper J5 in down position for GLCD Contrast control.
   20               - Adjust GLCD contrast with r18.
   21          */
   22          
   23          
   24          #include <LPC213X.H>
   25          
   26          #include "Glcd.h"
   27          #include "bmp_maska.h"
   28          #include "Utility.h"
   29          
   30          
   31          unsigned char ii;
   32          
   33          char
   34              *someText;
   35          
   36          
   37          
   38          
   39          int main (void)
   40          {
   41   1          PINSEL0 = 0;
   42   1          PINSEL1 = 0;
   43   1          PINSEL2 &= 0x0000000C;
   44   1      
   45   1      
   46   1          Glcd_Init(&IOPIN0,  // Control lines Port
   47   1                              &IOPIN1,    // Data Lines Port
   48   1                              10,             // CS1#
   49   1                              11,             // CS2#
   50   1                              12,             // RS
   51   1                              13,             // R/W#
   52   1                              15,             // RST
   53   1                              14,             // EN
   54   1                              24);            // D0 data line position     
   55   1      
   56   1      
   57   1          while (1)
   58   1          {
ARM COMPILER V2.53,  Demo                                                                  13/04/16  12:48:05  PAGE 2   

   59   2              Glcd_Fill(0x00);
   60   2      
   61   2              Glcd_Image( maska_bmp );
   62   2              delay_Nx10cyc (11999999);               // Delay 2s
   63   2      
   64   2              Glcd_Fill(0x00);
   65   2      
   66   2              Glcd_Line(120,1, 5,60, 1);
   67   2              Glcd_Line(12,42, 5,60, 1);
   68   2              delay_Nx10cyc (5999999);                // Delay 1s
   69   2      
   70   2              Glcd_Rectangle(12,20, 93,57, 1);
   71   2              delay_Nx10cyc (5999999);                // Delay 1s
   72   2      
   73   2              Glcd_Line(120,12, 12,60, 1);
   74   2              delay_Nx10cyc (5999999);                // Delay 1s
   75   2      
   76   2              Glcd_H_Line(5,15, 6, 1);
   77   2              Glcd_Line(0,12, 120,60, 1);
   78   2              Glcd_V_Line(7,63, 127, 1);
   79   2              delay_Nx10cyc (5999999);                // Delay 1s
   80   2      
   81   2              for (ii = 1; ii <= 10; ii++)
   82   2                  Glcd_Circle(63,32, 3*ii, 1);
   83   2              delay_Nx10cyc (5999999);                // Delay 1s
   84   2      
   85   2              Glcd_Box(12,20, 70,57, 2);
   86   2              delay_Nx10cyc (5999999);                // Delay 1s
   87   2      
   88   2              someText = "BIG:ONE";
   89   2              Glcd_Write_Text(someText, 5,3, 2);
   90   2              delay_Nx10cyc (5999999);                // Delay 1s
   91   2      
   92   2              someText = "SMALL:NOT:SMALLER";
   93   2              Glcd_Write_Text(someText, 20,5, 1);
   94   2              delay_Nx10cyc (5999999);                // Delay 1s  */
   95   2          }
   96   1      }
   97          
   98          
ARM COMPILER V2.53,  Demo                                                                  13/04/16  12:48:05  PAGE 3   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE32 (Glcd_Init?A)
 EXTERN CODE32 (Glcd_Fill?A)
 EXTERN CODE32 (Glcd_Line?A)
 EXTERN CODE32 (Glcd_V_Line?A)
 EXTERN CODE32 (Glcd_H_Line?A)
 EXTERN CODE32 (Glcd_Rectangle?A)
 EXTERN CODE32 (Glcd_Box?A)
 EXTERN CODE32 (Glcd_Circle?A)
 EXTERN CODE32 (Glcd_Write_Text?A)
 EXTERN CODE32 (Glcd_Image?A)
 EXTERN DATA (maska_bmp)
 EXTERN CODE32 (delay_Nx10cyc?A)
 EXTERN NUMBER (__startup)



*** PUBLICS:
 PUBLIC         main
 PUBLIC         ii
 PUBLIC         someText



*** DATA SEGMENT '?CON?Demo':
 00000000          ??S_2:
 00000000            DB          'SMALL:NOT:SMALLER',0x00
 00000012          ??S_1:
 00000012            DB          'BIG:ONE',0x00

*** DATA SEGMENT '?DT0?Demo':
 00000000          someText:
 00000000            DS          4
 00000004          ii:
 00000004            DS          1



*** CODE SEGMENT '?PR?main?Demo':
   39: int main (void)
 00000000  E92D4000  STMDB       R13!,{LR}
   41:     PINSEL0 = 0;
 00000004  E3A01000  MOV         R1,#0x0
 00000008  E5100000  LDR         R0,=0xE002C000
 0000000C  E5801000  STR         R1,[R0,#0x0]
   42:     PINSEL1 = 0;
 00000010  E5100000  LDR         R0,=0xE002C004
 00000014  E5801000  STR         R1,[R0,#0x0]
   43:     PINSEL2 &= 0x0000000C;
 00000018  E5100000  LDR         R0,=0xE002C014
 0000001C  E5901000  LDR         R1,[R0,#0x0]
 00000020  E201100C  AND         R1,R1,#0x000C
 00000024  E5801000  STR         R1,[R0,#0x0]
   47:                         &IOPIN1,    // Data Lines Port
 00000028  E3A00018  MOV         R0,#0x18
 0000002C  E92D0001  STMDB       R13!,{R0}
 00000030  E3A0000E  MOV         R0,#0xE
 00000034  E92D0001  STMDB       R13!,{R0}
 00000038  E3A0000F  MOV         R0,#0xF
 0000003C  E92D0001  STMDB       R13!,{R0}
 00000040  E3A0000D  MOV         R0,#0xD
 00000044  E92D0001  STMDB       R13!,{R0}
 00000048  E3A0000C  MOV         R0,#0xC
 0000004C  E92D0001  STMDB       R13!,{R0}
 00000050  E5100000  LDR         R0,=0xE0028000
 00000054  E5101000  LDR         R1,=0xE0028010
 00000058  E3A0200A  MOV         R2,#0xA
 0000005C  E3A0300B  MOV         R3,#0xB
 00000060  EBFFFFE6  BL          Glcd_Init?A  ; Targ=0x0
 00000064  E28DD014  ADD         R13,R13,#0x0014
ARM COMPILER V2.53,  Demo                                                                  13/04/16  12:48:05  PAGE 4   

   57:     while (1)
 00000068          L_3:
   59:         Glcd_Fill(0x00);
 00000068  E3A00000  MOV         R0,#0x0
 0000006C  EBFFFFE3  BL          Glcd_Fill?A  ; Targ=0x0
   61:         Glcd_Image( maska_bmp );
 00000070  E5100000  LDR         R0,=maska_bmp ; maska_bmp
 00000074  EBFFFFE1  BL          Glcd_Image?A  ; Targ=0x0
   62:         delay_Nx10cyc (11999999);               // Delay 2s
 00000078  E5100000  LDR         R0,=0xB71AFF
 0000007C  EBFFFFDF  BL          delay_Nx10cyc?A  ; Targ=0x0
   64:         Glcd_Fill(0x00);
 00000080  E3A00000  MOV         R0,#0x0
 00000084  EBFFFFDD  BL          Glcd_Fill?A  ; Targ=0x0
   66:         Glcd_Line(120,1, 5,60, 1);
 00000088  E3A00001  MOV         R0,#0x1
 0000008C  E92D0001  STMDB       R13!,{R0}
 00000090  E3A00078  MOV         R0,#0x78
 00000094  E3A01001  MOV         R1,#0x1
 00000098  E3A02005  MOV         R2,#0x5
 0000009C  E3A0303C  MOV         R3,#0x3C
 000000A0  EBFFFFD6  BL          Glcd_Line?A  ; Targ=0x0
 000000A4  E28DD004  ADD         R13,R13,#0x0004
   67:         Glcd_Line(12,42, 5,60, 1);
 000000A8  E3A00001  MOV         R0,#0x1
 000000AC  E92D0001  STMDB       R13!,{R0}
 000000B0  E3A0000C  MOV         R0,#0xC
 000000B4  E3A0102A  MOV         R1,#0x2A
 000000B8  E3A02005  MOV         R2,#0x5
 000000BC  E3A0303C  MOV         R3,#0x3C
 000000C0  EBFFFFCE  BL          Glcd_Line?A  ; Targ=0x0
 000000C4  E28DD004  ADD         R13,R13,#0x0004
   68:         delay_Nx10cyc (5999999);                // Delay 1s
 000000C8  E5100000  LDR         R0,=0x5B8D7F
 000000CC  EBFFFFCB  BL          delay_Nx10cyc?A  ; Targ=0x0
   70:         Glcd_Rectangle(12,20, 93,57, 1);
 000000D0  E3A00001  MOV         R0,#0x1
 000000D4  E92D0001  STMDB       R13!,{R0}
 000000D8  E3A0000C  MOV         R0,#0xC
 000000DC  E3A01014  MOV         R1,#0x14
 000000E0  E3A0205D  MOV         R2,#0x5D
 000000E4  E3A03039  MOV         R3,#0x39
 000000E8  EBFFFFC4  BL          Glcd_Rectangle?A  ; Targ=0x0
 000000EC  E28DD004  ADD         R13,R13,#0x0004
   71:         delay_Nx10cyc (5999999);                // Delay 1s
 000000F0  E5100000  LDR         R0,=0x5B8D7F
 000000F4  EBFFFFC1  BL          delay_Nx10cyc?A  ; Targ=0x0
   73:         Glcd_Line(120,12, 12,60, 1);
 000000F8  E3A00001  MOV         R0,#0x1
 000000FC  E92D0001  STMDB       R13!,{R0}
 00000100  E3A00078  MOV         R0,#0x78
 00000104  E3A0200C  MOV         R2,#0xC
 00000108  E1A01002  MOV         R1,R2
 0000010C  E3A0303C  MOV         R3,#0x3C
 00000110  EBFFFFBA  BL          Glcd_Line?A  ; Targ=0x0
 00000114  E28DD004  ADD         R13,R13,#0x0004
   74:         delay_Nx10cyc (5999999);                // Delay 1s
 00000118  E5100000  LDR         R0,=0x5B8D7F
 0000011C  EBFFFFB7  BL          delay_Nx10cyc?A  ; Targ=0x0
   76:         Glcd_H_Line(5,15, 6, 1);
 00000120  E3A00005  MOV         R0,#0x5
 00000124  E3A0100F  MOV         R1,#0xF
 00000128  E3A02006  MOV         R2,#0x6
 0000012C  E3A03001  MOV         R3,#0x1
 00000130  EBFFFFB2  BL          Glcd_H_Line?A  ; Targ=0x0
   77:         Glcd_Line(0,12, 120,60, 1);
ARM COMPILER V2.53,  Demo                                                                  13/04/16  12:48:05  PAGE 5   

 00000134  E3A00001  MOV         R0,#0x1
 00000138  E92D0001  STMDB       R13!,{R0}
 0000013C  E3A00000  MOV         R0,#0x0
 00000140  E3A0100C  MOV         R1,#0xC
 00000144  E3A02078  MOV         R2,#0x78
 00000148  E3A0303C  MOV         R3,#0x3C
 0000014C  EBFFFFAB  BL          Glcd_Line?A  ; Targ=0x0
 00000150  E28DD004  ADD         R13,R13,#0x0004
   78:         Glcd_V_Line(7,63, 127, 1);
 00000154  E3A00007  MOV         R0,#0x7
 00000158  E3A0103F  MOV         R1,#0x3F
 0000015C  E3A0207F  MOV         R2,#0x7F
 00000160  E3A03001  MOV         R3,#0x1
 00000164  EBFFFFA5  BL          Glcd_V_Line?A  ; Targ=0x0
   79:         delay_Nx10cyc (5999999);                // Delay 1s
 00000168  E5100000  LDR         R0,=0x5B8D7F
 0000016C  EBFFFFA3  BL          delay_Nx10cyc?A  ; Targ=0x0
   81:         for (ii = 1; ii <= 10; ii++)
 00000170  E3A01001  MOV         R1,#0x1
 00000174  E5100000  LDR         R0,=ii ; ii
 00000178  E5C01000  STRB        R1,[R0,#0x0] ; ii
 0000017C  EA00000C  B           L_7  ; Targ=0x1B4
 00000180          L_8:
   82:             Glcd_Circle(63,32, 3*ii, 1);
 00000180  E5100000  LDR         R0,=ii ; ii
 00000184  E5D00000  LDRB        R0,[R0,#0x0] ; ii
 00000188  E1A02000  MOV         R2,R0
 0000018C  E3A00003  MOV         R0,#0x3
 00000190  E0020290  MUL         R2,R0,R2
 00000194  E3A0003F  MOV         R0,#0x3F
 00000198  E3A01020  MOV         R1,#0x20
 0000019C  E3A03001  MOV         R3,#0x1
 000001A0  EBFFFF96  BL          Glcd_Circle?A  ; Targ=0x0
 000001A4  E5100000  LDR         R0,=ii ; ii
 000001A8  E5D01000  LDRB        R1,[R0,#0x0] ; ii
 000001AC  E2811001  ADD         R1,R1,#0x0001
 000001B0  E5C01000  STRB        R1,[R0,#0x0] ; ii
 000001B4          L_7:
 000001B4  E5100000  LDR         R0,=ii ; ii
 000001B8  E5D00000  LDRB        R0,[R0,#0x0] ; ii
 000001BC  E350000A  CMP         R0,#0x000A
 000001C0  DAFFFFEE  BLE         L_8  ; Targ=0x180
   83:         delay_Nx10cyc (5999999);                // Delay 1s
 000001C4  E5100000  LDR         R0,=0x5B8D7F
 000001C8  EBFFFF8C  BL          delay_Nx10cyc?A  ; Targ=0x0
   85:         Glcd_Box(12,20, 70,57, 2);
 000001CC  E3A00002  MOV         R0,#0x2
 000001D0  E92D0001  STMDB       R13!,{R0}
 000001D4  E3A0000C  MOV         R0,#0xC
 000001D8  E3A01014  MOV         R1,#0x14
 000001DC  E3A02046  MOV         R2,#0x46
 000001E0  E3A03039  MOV         R3,#0x39
 000001E4  EBFFFF85  BL          Glcd_Box?A  ; Targ=0x0
 000001E8  E28DD004  ADD         R13,R13,#0x0004
   86:         delay_Nx10cyc (5999999);                // Delay 1s
 000001EC  E5100000  LDR         R0,=0x5B8D7F
 000001F0  EBFFFF82  BL          delay_Nx10cyc?A  ; Targ=0x0
   88:         someText = "BIG:ONE";
 000001F4  E3E01102  MVN         R1,#0x102 ; ??S_1
 000001F8  E5100000  LDR         R0,=someText ; someText
 000001FC  E5801000  STR         R1,[R0,#0x0] ; someText
   89:         Glcd_Write_Text(someText, 5,3, 2);
 00000200  E5100000  LDR         R0,=someText ; someText
 00000204  E5900000  LDR         R0,[R0,#0x0] ; someText
 00000208  E3A01005  MOV         R1,#0x5
 0000020C  E3A02003  MOV         R2,#0x3
ARM COMPILER V2.53,  Demo                                                                  13/04/16  12:48:05  PAGE 6   

 00000210  E3A03002  MOV         R3,#0x2
 00000214  EBFFFF79  BL          Glcd_Write_Text?A  ; Targ=0x0
   90:         delay_Nx10cyc (5999999);                // Delay 1s
 00000218  E5100000  LDR         R0,=0x5B8D7F
 0000021C  EBFFFF77  BL          delay_Nx10cyc?A  ; Targ=0x0
   92:         someText = "SMALL:NOT:SMALLER";
 00000220  E3E01102  MVN         R1,#0x102 ; ??S_2
 00000224  E5100000  LDR         R0,=someText ; someText
 00000228  E5801000  STR         R1,[R0,#0x0] ; someText
   93:         Glcd_Write_Text(someText, 20,5, 1);
 0000022C  E5100000  LDR         R0,=someText ; someText
 00000230  E5900000  LDR         R0,[R0,#0x0] ; someText
 00000234  E3A01014  MOV         R1,#0x14
 00000238  E3A02005  MOV         R2,#0x5
 0000023C  E3A03001  MOV         R3,#0x1
 00000240  EBFFFF6E  BL          Glcd_Write_Text?A  ; Targ=0x0
   94:         delay_Nx10cyc (5999999);                // Delay 1s  */
 00000244  E5100000  LDR         R0,=0x5B8D7F
 00000248  EBFFFF6C  BL          delay_Nx10cyc?A  ; Targ=0x0
   95:     }
 0000024C  EAFFFF85  B           L_3  ; Targ=0x68
   96: }
 00000250  E8BD0008  LDMIA       R13!,{R3}
 00000254  E12FFF13  BX          R3
 00000258          ENDP ; 'main'

ARM COMPILER V2.53,  Demo                                                                  13/04/16  12:48:05  PAGE 7   

Name                                    Class    Space Type   Offset   Size
---------------------------------------------------------------------------

Glcd_Init?A. . . . . . . . . . . . . .  extern   code  funct  000000H  
Glcd_Fill?A. . . . . . . . . . . . . .  extern   code  funct  000000H  
Glcd_Line?A. . . . . . . . . . . . . .  extern   code  funct  000000H  
Glcd_V_Line?A. . . . . . . . . . . . .  extern   code  funct  000000H  
Glcd_H_Line?A. . . . . . . . . . . . .  extern   code  funct  000000H  
Glcd_Rectangle?A . . . . . . . . . . .  extern   code  funct  000000H  
Glcd_Box?A . . . . . . . . . . . . . .  extern   code  funct  000000H  
Glcd_Circle?A. . . . . . . . . . . . .  extern   code  funct  000000H  
Glcd_Write_Text?A. . . . . . . . . . .  extern   code  funct  000000H  
Glcd_Image?A . . . . . . . . . . . . .  extern   code  funct  000000H  
maska_bmp. . . . . . . . . . . . . . .  extern   const array  000000H  
delay_Nx10cyc?A. . . . . . . . . . . .  extern   code  funct  000000H  
main . . . . . . . . . . . . . . . . .  public   code  funct  000000H  
ii . . . . . . . . . . . . . . . . . .  public   data  uchar  000004H  1
someText . . . . . . . . . . . . . . .  public   data  ptr    000000H  4


Module Information          Static
----------------------------------
  code size            =    ------
  data size            =         5
  const size           =        26
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
