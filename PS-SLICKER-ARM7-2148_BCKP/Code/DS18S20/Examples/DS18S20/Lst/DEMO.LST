ARM COMPILER V2.51a,  DEMO                                                                 21/06/08  11:52:51  PAGE 1   


ARM COMPILER V2.51a, COMPILATION OF MODULE DEMO
OBJECT MODULE PLACED IN .\Obj\DEMO.obj
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe DEMO.c THUMB OPTIMIZE(7,SPEED) BROWSE INCDIR(..\..\INC;..\..\OBJ) DEBUG PRIN
                    -T(.\LST\DEMO.LST) TABS(4) OBJECT(.\Obj\DEMO.obj) 

stmt  level    source

    1          /*
    2           * Project name:
    3               DEMO (Simple demonstration of the PS2 Library functions)
    4           * Copyright:
    5               (c) MikroElektronika, 2006.
    6           * Description:
    7               This code demonstrates communication with ps/2 keyboard.
    8               Scan codes that represent key are send to PC via UART-0.
    9           * Test configuration:
   10               MCU:             LPC2148
   11               Dev.Board:       EasyARM
   12               Oscillator:      12.0 MHz (cclk = 60.0 MHz, Fcco = 240.0 MHz)
   13               Ext. Modules:    - PS/2 Keyboard
   14               SW:              KEIL uVision3 v3.34
   15           * NOTES:
   16               - Place jumpers J6 and J7 in left position to connect PS/2 keyboard
   17                 lines to P1.16 and P1.17
   18               - Be sure to turn ON the switches for RS232-0 to connect UART lines
   19                 to RS232-0 output (Switch SW1)
   20               - Start UART terminal adjusted to 38400 bps, 8 bit, no parity
   21          */
   22          
   23          
   24          #include <LPC213X.H>
   25          #include <stdio.h>
   26          
   27          #include "ps2.h"
   28          #include "Serial.h"
   29          #include "Utility.h"
   30          
   31          
   32          unsigned char
   33              raw_data[16],
   34              raw_pos;
   35          
   36          unsigned long
   37              n;
   38          
   39          
   40          int main (void)
   41          {
   42   1      
   43   1          PINSEL0 = 0;
   44   1          PINSEL1 = 0;
   45   1          PINSEL2 &= 0x0000000C;
   46   1      
   47   1      
   48   1          UART0_init(9600/*bps*/, 15000/*kHz*/, length_8_bit, stop_bit_1, parity_disable, parity_odd);
   49   1              U0THR = 'A';
   50   1          // Init PS/2 Keyboard
   51   1          Ps2_Init(&IOPIN1, 16/*CLK*/, 17/*DATA*/);
   52   1          // Delay 100ms, Wait for keyboard to finish
   53   1          delay_Nx10cyc(599999);
   54   1          // Set Keyboard Delay and Typematic Rate
   55   1          Ps2_Adjust_Rate(TR_Delay_750ms, TR_Rate_10);
   56   1          delay_Nx10cyc(599999);
   57   1      
   58   1          delay_Nx10cyc(599999);
ARM COMPILER V2.51a,  DEMO                                                                 21/06/08  11:52:51  PAGE 2   

   59   1          do
   60   1          {
   61   2              Ps2_Data_Read(&raw_pos, raw_data);
   62   2      
   63   2              if (raw_pos != 0)
   64   2              {
   65   3                  for (n=0; n<raw_pos; n++)
   66   3                  {
   67   4                      UART0_WriteNum ("0x", raw_data[n]);
   68   4                      UART0_sendchar (' ');
   69   4                  }
   70   3                  UART0_sendstring ("\n");
   71   3              }
   72   2          }   while (1);
   73   1      
   74   1      }
ARM COMPILER V2.51a,  DEMO                                                                 21/06/08  11:52:51  PAGE 3   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (Ps2_Init?T)
 EXTERN CODE16 (Ps2_Data_Read?T)
 EXTERN CODE16 (Ps2_Adjust_Rate?T)
 EXTERN CODE16 (UART0_init?T)
 EXTERN CODE16 (UART0_sendchar?T)
 EXTERN CODE16 (UART0_sendstring?T)
 EXTERN CODE16 (UART0_WriteNum?T)
 EXTERN CODE16 (delay_Nx10cyc?T)
 EXTERN NUMBER (__startup)



*** PUBLICS:
 PUBLIC         main
 PUBLIC         raw_data
 PUBLIC         raw_pos
 PUBLIC         n



*** DATA SEGMENT '?CON?DEMO':
 00000000          ??S_2:
 00000000            DB          0x0A,0x00
 00000002          ??S_1:
 00000002            DB          '0x',0x00

*** DATA SEGMENT '?DT0?DEMO':
 00000000          n:
 00000000            DS          4
 00000004          raw_data:
 00000004            DS          16
 00000014          raw_pos:
 00000014            DS          1



*** CODE SEGMENT '?PR?main?DEMO':
   40: int main (void)
 00000000  B500      PUSH        {LR}
   43:     PINSEL0 = 0;
 00000002  2100      MOV         R1,#0x0
 00000004  4800      LDR         R0,=0xE002C000
 00000006  6001      STR         R1,[R0,#0x0]
   44:     PINSEL1 = 0;
 00000008  4800      LDR         R0,=0xE002C004
 0000000A  6001      STR         R1,[R0,#0x0]
   45:     PINSEL2 &= 0x0000000C;
 0000000C  220C      MOV         R2,#0xC
 0000000E  4800      LDR         R0,=0xE002C014
 00000010  6801      LDR         R1,[R0,#0x0]
 00000012  4011      AND         R1,R2
 00000014  6001      STR         R1,[R0,#0x0]
   48:     UART0_init(9600/*bps*/, 15000/*kHz*/, length_8_bit, stop_bit_1, parity_disable, parity_odd);
 00000016  2300      MOV         R3,#0x0
 00000018  B408      PUSH        {R3}
 0000001A  B408      PUSH        {R3}
 0000001C  4800      LDR         R0,=0x2580
 0000001E  4800      LDR         R1,=0x3A98
 00000020  2203      MOV         R2,#0x3
 00000022  F7FF      BL          UART0_init?T  ; T=0x0001  (1)
 00000024  FFED      BL          UART0_init?T  ; T=0x0001  (2)
 00000026  B002      ADD         R13,#0x8
   49:         U0THR = 'A';
 00000028  2141      MOV         R1,#0x41
 0000002A  4800      LDR         R0,=0xE000C000
 0000002C  7001      STRB        R1,[R0,#0x0]
   51:     Ps2_Init(&IOPIN1, 16/*CLK*/, 17/*DATA*/);
 0000002E  4800      LDR         R0,=0xE0028010
 00000030  2110      MOV         R1,#0x10
ARM COMPILER V2.51a,  DEMO                                                                 21/06/08  11:52:51  PAGE 4   

 00000032  2211      MOV         R2,#0x11
 00000034  F7FF      BL          Ps2_Init?T  ; T=0x0001  (1)
 00000036  FFE4      BL          Ps2_Init?T  ; T=0x0001  (2)
   53:     delay_Nx10cyc(599999);
 00000038  4800      LDR         R0,=0x927BF
 0000003A  F7FF      BL          delay_Nx10cyc?T  ; T=0x0001  (1)
 0000003C  FFE1      BL          delay_Nx10cyc?T  ; T=0x0001  (2)
   55:     Ps2_Adjust_Rate(TR_Delay_750ms, TR_Rate_10);
 0000003E  2040      MOV         R0,#0x40
 00000040  210C      MOV         R1,#0xC
 00000042  F7FF      BL          Ps2_Adjust_Rate?T  ; T=0x0001  (1)
 00000044  FFDD      BL          Ps2_Adjust_Rate?T  ; T=0x0001  (2)
   56:     delay_Nx10cyc(599999);
 00000046  4800      LDR         R0,=0x927BF
 00000048  F7FF      BL          delay_Nx10cyc?T  ; T=0x0001  (1)
 0000004A  FFDA      BL          delay_Nx10cyc?T  ; T=0x0001  (2)
   58:     delay_Nx10cyc(599999);
 0000004C  4800      LDR         R0,=0x927BF
 0000004E  F7FF      BL          delay_Nx10cyc?T  ; T=0x0001  (1)
 00000050  FFD7      BL          delay_Nx10cyc?T  ; T=0x0001  (2)
   59:     do
 00000052          L_1:
   61:         Ps2_Data_Read(&raw_pos, raw_data);
 00000052  4800      LDR         R0,=raw_pos ; raw_pos
 00000054  4800      LDR         R1,=raw_data ; raw_data
 00000056  F7FF      BL          Ps2_Data_Read?T  ; T=0x0001  (1)
 00000058  FFD3      BL          Ps2_Data_Read?T  ; T=0x0001  (2)
   63:         if (raw_pos != 0)
 0000005A  4800      LDR         R0,=raw_pos ; raw_pos
 0000005C  7800      LDRB        R0,[R0,#0x0] ; raw_pos
 0000005E  2800      CMP         R0,#0x0
 00000060  D0F7      BEQ         L_1  ; T=0x00000052
   65:             for (n=0; n<raw_pos; n++)
 00000062  2100      MOV         R1,#0x0
 00000064  4800      LDR         R0,=n ; n
 00000066  6001      STR         R1,[R0,#0x0] ; n
 00000068  E00E      B           L_8  ; T=0x00000088
 0000006A          L_9:
   67:                 UART0_WriteNum ("0x", raw_data[n]);
 0000006A  4800      LDR         R0,=n ; n
 0000006C  6801      LDR         R1,[R0,#0x0] ; n
 0000006E  4800      LDR         R0,=raw_data ; raw_data
 00000070  5C40      LDRB        R0,[R0,R1]
 00000072  1C01      MOV         R1,R0
 00000074  4800      LDR         R0,=??S_1 ; ??S_1
 00000076  F7FF      BL          UART0_WriteNum?T  ; T=0x0001  (1)
 00000078  FFC3      BL          UART0_WriteNum?T  ; T=0x0001  (2)
   68:                 UART0_sendchar (' ');
 0000007A  2020      MOV         R0,#0x20
 0000007C  F7FF      BL          UART0_sendchar?T  ; T=0x0001  (1)
 0000007E  FFC0      BL          UART0_sendchar?T  ; T=0x0001  (2)
   69:             }
 00000080  4800      LDR         R0,=n ; n
 00000082  6801      LDR         R1,[R0,#0x0] ; n
 00000084  3101      ADD         R1,#0x1
 00000086  6001      STR         R1,[R0,#0x0] ; n
 00000088          L_8:
 00000088  4800      LDR         R0,=raw_pos ; raw_pos
 0000008A  7800      LDRB        R0,[R0,#0x0] ; raw_pos
 0000008C  1C01      MOV         R1,R0
 0000008E  4800      LDR         R0,=n ; n
 00000090  6800      LDR         R0,[R0,#0x0] ; n
 00000092  4288      CMP         R0,R1
 00000094  D3E9      BCC         L_9  ; T=0x0000006A
   70:             UART0_sendstring ("\n");
 00000096  4800      LDR         R0,=??S_2 ; ??S_2
ARM COMPILER V2.51a,  DEMO                                                                 21/06/08  11:52:51  PAGE 5   

 00000098  F7FF      BL          UART0_sendstring?T  ; T=0x0001  (1)
 0000009A  FFB2      BL          UART0_sendstring?T  ; T=0x0001  (2)
   72:     }    while (1);
 0000009C  E7D9      B           L_1  ; T=0x00000052
   74: }
 0000009E  BC08      POP         {R3}
 000000A0  4718      BX          R3
 000000A2          ENDP ; 'main'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =        21
  const size           =         5
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
