ARM COMPILER V2.54a,  Demo1                                                                15/07/10  16:40:21  PAGE 1   


ARM COMPILER V2.54a, COMPILATION OF MODULE Demo1
OBJECT MODULE PLACED IN .\Obj\Demo1.obj
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe Demo1.c THUMB OPTIMIZE(7,SPEED) BROWSE INCDIR(..\..\INC;..\..\OBJ) DEBUG PRI
                    -NT(.\LST\DEMO1.LST) TABS(4) OBJECT(.\Obj\Demo1.obj) 

stmt  level    source

    1          /*
    2              DEMO (Interfacing the DS1820 temperature sensor)
    3          
    4               Description:
    5               ------------
    6               This code demonstrates one-wire communication with temperature sensor
    7               DS18x20 connected to P0.26 / p0.29 pin.
    8               After reset, ARM reads temperature from the sensor and prints it on the LCD.
    9               The display format of the temperature is '#x.xxxx°C'. To obtain correct
   10               results, the 18x20's temperature resolution has to be adjusted (constant
   11               TEMP_RESOLUTION)
   12          
   13           * Test configuration:
   14               MCU:             LPC2138
   15               Oscillator:      12.0 MHz (cclk = 60.0 MHz, Fcco = 240.0 MHz)
   16          */
   17          
   18          /********************************************************************************/
   19          //                          Hardware settings (ADK Board)
   20          /********************************************************************************/
   21          //
   22          //  CN6(LCD)    - Connector (JP13) for LCD Data Lines    -->  Port1(P0.16 to P0.23)
   23          
   24          //
   25          //  SW31 -  DIP Switch(for LCD Control Lines)
   26          //  =========================================
   27          //  Turn On - RS, RW, EN (LCD control Lines)
   28          //
   29          //  J5 - LCD/GLCD Select Jumper
   30          //  ===========================
   31          //  Put Jumper to  - 'CHAR' legend selected //
   32          //
   33          //  JP12 - DS18s20
   34          //  ==================
   35          //  Put Jumper to  - P0.29 legend selected 
   36          //
   37          /********************************************************************************/
   38          
   39          
   40          #include <LPC213X.H>
   41          
   42          #include "OneWire.h"
   43          #include "LCD8.h"
   44          #include "Utility.h"
   45          
   46          
   47          
   48          const unsigned char LCD_Message[16] = {"ARM Digital Temp"};
   49          
   50          unsigned char DSMAG; 
   51          char DSSIGN; 
   52          
   53          unsigned char TEMPnum[16];
   54          int Temperature;
   55          unsigned char Xpos, temp1;
   56          
   57          
   58          
ARM COMPILER V2.54a,  Demo1                                                                15/07/10  16:40:21  PAGE 2   

   59          /* Read temperature from DS1820 */
   60          unsigned char DS1820_read (unsigned char *DSM, char *DSS)
   61          {
   62   1          // Get current temperature reading
   63   1          if (ow_reset() == 0x01)
   64   1          {
   65   2              return (0x01);                          // Return ERROR, part not present
   66   2          }
   67   1          ow_write (0xCC);                            // DS1820 ROM Command, SKIP PROM
   68   1          ow_write (0xBE);                            // DS1820 Function Command, READ SCRATCH PAD
   69   1      
   70   1          *DSM = ow_read();                       // Get MAGNITUDE
   71   1          *DSS = ow_read();                           // Get SIGN (FF = -ve, 00 = +ve)
   72   1      
   73   1      
   74   1          // Start NEW Conversion
   75   1          if (ow_reset() == 0x01)
   76   1          {
   77   2              return (0x01);                          // Return ERROR, part not present
   78   2          }
   79   1          ow_write (0xCC);                            // DS1820 ROM Command, SKIP PROM
   80   1          ow_write (0x44);                            // DS1820 Function Command, START CONVERSION
   81   1      
   82   1          // If DSSIGN not 0 or 255 then return ERROR
   83   1          if ((*DSS != 0x00) && (*DSS != 0xFF))
   84   1              return (0x01);
   85   1      
   86   1          return (0x00);
   87   1      }
   88          
   89          
   90          
   91          int main (void)
   92          {
   93   1          PINSEL0 = 0;
   94   1          PINSEL1 = 0;
   95   1          PINSEL2 &= 0x0000000C;
   96   1      
   97   1          LCD8_init (&IOPIN0/*CTRL Port*/, &IOPIN0/*DATA Port*/, 12/*RS*/, 13/*RW*/, 14/*E*/, 16/*D0*/);
   98   1      
   99   1          ow_init (&IOPIN0, 29/*DQ*/);   //DS18s20 Sensor output
  100   1      
  101   1          LCD8_sendstr (0,0, LCD_Message);
  102   1      
  103   1          // Read and display temperature every second in infinite loop...
  104   1          while (1)
  105   1          {
  106   2              Xpos = 0;
  107   2      
  108   2              if (DS1820_read (&DSMAG, &DSSIGN) == 0x00)
  109   2              {
  110   3                  Temperature = DSMAG / 2;
  111   3                  if (DSSIGN == 0xFF)
  112   3                      Temperature = -Temperature;
  113   3      
  114   3                  Xpos += int2str (TEMPnum, Temperature);
  115   3                  TEMPnum[Xpos++] = '.';
  116   3                  if ((DSMAG % 2) == 0)
  117   3                      TEMPnum[Xpos++] = '0';
  118   3                  else
  119   3                      TEMPnum[Xpos++] = '5';
  120   3      
  121   3                  TEMPnum[Xpos++] = 0xDF;
  122   3                  TEMPnum[Xpos++] = 'C';
  123   3      
  124   3                  TEMPnum[Xpos] = 0;
ARM COMPILER V2.54a,  Demo1                                                                15/07/10  16:40:21  PAGE 3   

  125   3      
  126   3                  LCD8_sendstr (0,1, TEMPnum);
  127   3              }
  128   2              else
  129   2              {
  130   3                  LCD8_sendstr (0,1, "Error   ");
  131   3              }
  132   2      
  133   2              // Delay 1s
  134   2              delay_Nx10cyc (5999999);
  135   2          }
  136   1      }
ARM COMPILER V2.54a,  Demo1                                                                15/07/10  16:40:21  PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (ow_init?T)
 EXTERN CODE16 (ow_reset?T)
 EXTERN CODE16 (ow_read?T)
 EXTERN CODE16 (ow_write?T)
 EXTERN CODE16 (LCD8_init?T)
 EXTERN CODE16 (LCD8_sendstr?T)
 EXTERN CODE16 (int2str?T)
 EXTERN CODE16 (delay_Nx10cyc?T)
 EXTERN NUMBER (__startup)
 EXTERN CODE16 (?C?SDIV?T)



*** PUBLICS:
 PUBLIC         LCD_Message
 PUBLIC         DS1820_read?T
 PUBLIC         main
 PUBLIC         DSMAG
 PUBLIC         DSSIGN
 PUBLIC         TEMPnum
 PUBLIC         Temperature
 PUBLIC         Xpos
 PUBLIC         temp1



*** DATA SEGMENT '?CON?Demo1':
 00000000          ??S_2:
 00000000            DB          'Error   ',0x00
 00000009          LCD_Message:
 00000009           BEGIN_INIT
 00000009            DB          'ARM Digital Temp'
 00000019           END_INIT

*** DATA SEGMENT '?DT0?Demo1':
 00000000          Temperature:
 00000000            DS          4
 00000004          DSMAG:
 00000004            DS          1
 00000005          DSSIGN:
 00000005            DS          1
 00000006          TEMPnum:
 00000006            DS          16
 00000016          Xpos:
 00000016            DS          1
 00000017          temp1:
 00000017            DS          1



*** CODE SEGMENT '?PR?DS1820_read?T?Demo1':
   60: unsigned char DS1820_read (unsigned char *DSM, char *DSS)
 00000000  B530      PUSH        {R4-R5,LR}
 00000002  1C0C      MOV         R4,R1 ; DSS
 00000004  ---- Variable 'DSS' assigned to Register 'R4' ----
 00000004  1C05      MOV         R5,R0 ; DSM
 00000006  ---- Variable 'DSM' assigned to Register 'R5' ----
   63:     if (ow_reset() == 0x01)
 00000006  F7FF      BL          ow_reset?T  ; T=0x0001  (1)
 00000008  FFFB      BL          ow_reset?T  ; T=0x0001  (2)
 0000000A  0600      LSL         R0,R0,#0x18 ; ow_reset?T
 0000000C  0E00      LSR         R0,R0,#0x18
 0000000E  2801      CMP         R0,#0x1
 00000010  D101      BNE         L_1  ; T=0x00000016
   65:         return (0x01);                          // Return ERROR, part not present
 00000012  2001      MOV         R0,#0x1
 00000014  E024      B           L_2  ; T=0x00000060
   66:     }
 00000016          L_1:
ARM COMPILER V2.54a,  Demo1                                                                15/07/10  16:40:21  PAGE 5   

   67:     ow_write (0xCC);                            // DS1820 ROM Command, SKIP PROM
 00000016  20CC      MOV         R0,#0xCC
 00000018  F7FF      BL          ow_write?T  ; T=0x0001  (1)
 0000001A  FFF2      BL          ow_write?T  ; T=0x0001  (2)
   68:     ow_write (0xBE);                            // DS1820 Function Command, READ SCRATCH PAD
 0000001C  20BE      MOV         R0,#0xBE
 0000001E  F7FF      BL          ow_write?T  ; T=0x0001  (1)
 00000020  FFEF      BL          ow_write?T  ; T=0x0001  (2)
   70:     *DSM = ow_read();                       // Get MAGNITUDE
 00000022  F7FF      BL          ow_read?T  ; T=0x0001  (1)
 00000024  FFED      BL          ow_read?T  ; T=0x0001  (2)
 00000026  1C29      MOV         R1,R5 ; DSM
 00000028  7008      STRB        R0,[R1,#0x0] ; DSM
   71:     *DSS = ow_read();                           // Get SIGN (FF = -ve, 00 = +ve)
 0000002A  F7FF      BL          ow_read?T  ; T=0x0001  (1)
 0000002C  FFE9      BL          ow_read?T  ; T=0x0001  (2)
 0000002E  1C21      MOV         R1,R4 ; DSS
 00000030  7008      STRB        R0,[R1,#0x0] ; DSS
   75:     if (ow_reset() == 0x01)
 00000032  F7FF      BL          ow_reset?T  ; T=0x0001  (1)
 00000034  FFE5      BL          ow_reset?T  ; T=0x0001  (2)
 00000036  0600      LSL         R0,R0,#0x18 ; ow_reset?T
 00000038  0E00      LSR         R0,R0,#0x18
 0000003A  2801      CMP         R0,#0x1
 0000003C  D101      BNE         L_3  ; T=0x00000042
   77:         return (0x01);                          // Return ERROR, part not present
 0000003E  2001      MOV         R0,#0x1
 00000040  E00E      B           L_2  ; T=0x00000060
   78:     }
 00000042          L_3:
   79:     ow_write (0xCC);                            // DS1820 ROM Command, SKIP PROM
 00000042  20CC      MOV         R0,#0xCC
 00000044  F7FF      BL          ow_write?T  ; T=0x0001  (1)
 00000046  FFDC      BL          ow_write?T  ; T=0x0001  (2)
   80:     ow_write (0x44);                            // DS1820 Function Command, START CONVERSION
 00000048  2044      MOV         R0,#0x44
 0000004A  F7FF      BL          ow_write?T  ; T=0x0001  (1)
 0000004C  FFD9      BL          ow_write?T  ; T=0x0001  (2)
   83:     if ((*DSS != 0x00) && (*DSS != 0xFF))
 0000004E  1C20      MOV         R0,R4 ; DSS
 00000050  7800      LDRB        R0,[R0,#0x0] ; DSS
 00000052  2800      CMP         R0,#0x0
 00000054  D003      BEQ         L_4  ; T=0x0000005E
 00000056  28FF      CMP         R0,#0xFF
 00000058  D001      BEQ         L_4  ; T=0x0000005E
   84:         return (0x01);
 0000005A  2001      MOV         R0,#0x1
 0000005C  E000      B           L_2  ; T=0x00000060
 0000005E          L_4:
   86:     return (0x00);
 0000005E  2000      MOV         R0,#0x0
   87: }
 00000060          L_2:
 00000060  BC30      POP         {R4-R5}
 00000062  BC08      POP         {R3}
 00000064  4718      BX          R3
 00000066          ENDP ; 'DS1820_read?T'


*** CODE SEGMENT '?PR?main?Demo1':
   91: int main (void)
 00000000  B500      PUSH        {LR}
   93:     PINSEL0 = 0;
 00000002  2100      MOV         R1,#0x0
 00000004  4800      LDR         R0,=0xE002C000
 00000006  6001      STR         R1,[R0,#0x0]
   94:     PINSEL1 = 0;
 00000008  4800      LDR         R0,=0xE002C004
ARM COMPILER V2.54a,  Demo1                                                                15/07/10  16:40:21  PAGE 6   

 0000000A  6001      STR         R1,[R0,#0x0]
   95:     PINSEL2 &= 0x0000000C;
 0000000C  220C      MOV         R2,#0xC
 0000000E  4800      LDR         R0,=0xE002C014
 00000010  6801      LDR         R1,[R0,#0x0]
 00000012  4011      AND         R1,R2
 00000014  6001      STR         R1,[R0,#0x0]
   97:     LCD8_init (&IOPIN0/*CTRL Port*/, &IOPIN0/*DATA Port*/, 12/*RS*/, 13/*RW*/, 14/*E*/, 16/*D0*/);
 00000016  2010      MOV         R0,#0x10
 00000018  B401      PUSH        {R0}
 0000001A  200E      MOV         R0,#0xE
 0000001C  B401      PUSH        {R0}
 0000001E  4800      LDR         R0,=0xE0028000
 00000020  4800      LDR         R1,=0xE0028000
 00000022  220C      MOV         R2,#0xC
 00000024  230D      MOV         R3,#0xD
 00000026  F7FF      BL          LCD8_init?T  ; T=0x0001  (1)
 00000028  FFEB      BL          LCD8_init?T  ; T=0x0001  (2)
 0000002A  B002      ADD         R13,#0x8
   99:     ow_init (&IOPIN0, 29/*DQ*/);   //DS18s20 Sensor output
 0000002C  4800      LDR         R0,=0xE0028000
 0000002E  211D      MOV         R1,#0x1D
 00000030  F7FF      BL          ow_init?T  ; T=0x0001  (1)
 00000032  FFE6      BL          ow_init?T  ; T=0x0001  (2)
  101:     LCD8_sendstr (0,0, LCD_Message);
 00000034  4800      LDR         R2,=LCD_Message ; LCD_Message
 00000036  2100      MOV         R1,#0x0
 00000038  1C08      MOV         R0,R1
 0000003A  F7FF      BL          LCD8_sendstr?T  ; T=0x0001  (1)
 0000003C  FFE1      BL          LCD8_sendstr?T  ; T=0x0001  (2)
  104:     while (1)
 0000003E          L_7:
  106:         Xpos = 0;
 0000003E  2100      MOV         R1,#0x0
 00000040  4800      LDR         R0,=Xpos ; Xpos
 00000042  7001      STRB        R1,[R0,#0x0] ; Xpos
  108:         if (DS1820_read (&DSMAG, &DSSIGN) == 0x00)
 00000044  4800      LDR         R0,=DSMAG ; DSMAG
 00000046  4800      LDR         R1,=DSSIGN ; DSSIGN
 00000048  F7FF      BL          DS1820_read?T  ; T=0x0001  (1)
 0000004A  FFDA      BL          DS1820_read?T  ; T=0x0001  (2)
 0000004C  0600      LSL         R0,R0,#0x18 ; DS1820_read?T
 0000004E  0E00      LSR         R0,R0,#0x18
 00000050  2800      CMP         R0,#0x0
 00000052  D15C      BNE         L_9  ; T=0x0000010E
  110:             Temperature = DSMAG / 2;
 00000054  4800      LDR         R0,=DSMAG ; DSMAG
 00000056  7800      LDRB        R0,[R0,#0x0] ; DSMAG
 00000058  2102      MOV         R1,#0x2
 0000005A  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 0000005C  FFD1      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 0000005E  1C08      MOV         R0,R1
 00000060  4800      LDR         R1,=Temperature ; Temperature
 00000062  6008      STR         R0,[R1,#0x0] ; Temperature
  111:             if (DSSIGN == 0xFF)
 00000064  4800      LDR         R0,=DSSIGN ; DSSIGN
 00000066  7800      LDRB        R0,[R0,#0x0] ; DSSIGN
 00000068  28FF      CMP         R0,#0xFF
 0000006A  D104      BNE         L_10  ; T=0x00000076
  112:                 Temperature = -Temperature;
 0000006C  4800      LDR         R0,=Temperature ; Temperature
 0000006E  6801      LDR         R1,[R0,#0x0] ; Temperature
 00000070  4249      NEG         R1,R1
 00000072  4800      LDR         R0,=Temperature ; Temperature
 00000074  6001      STR         R1,[R0,#0x0] ; Temperature
 00000076          L_10:
ARM COMPILER V2.54a,  Demo1                                                                15/07/10  16:40:21  PAGE 7   

  114:             Xpos += int2str (TEMPnum, Temperature);
 00000076  4800      LDR         R0,=Temperature ; Temperature
 00000078  6801      LDR         R1,[R0,#0x0] ; Temperature
 0000007A  4800      LDR         R0,=TEMPnum ; TEMPnum
 0000007C  F7FF      BL          int2str?T  ; T=0x0001  (1)
 0000007E  FFC0      BL          int2str?T  ; T=0x0001  (2)
 00000080  4800      LDR         R1,=Xpos ; Xpos
 00000082  7809      LDRB        R1,[R1,#0x0] ; Xpos
 00000084  1809      ADD         R1,R0 ; int2str?T
 00000086  4800      LDR         R0,=Xpos ; Xpos
 00000088  7001      STRB        R1,[R0,#0x0] ; Xpos
  115:             TEMPnum[Xpos++] = '.';
 0000008A  202E      MOV         R0,#0x2E
 0000008C  4800      LDR         R2,=Xpos ; Xpos
 0000008E  7811      LDRB        R1,[R2,#0x0] ; Xpos
 00000090  1C0B      MOV         R3,R1
 00000092  3301      ADD         R3,#0x1
 00000094  7013      STRB        R3,[R2,#0x0] ; Xpos
 00000096  1C0A      MOV         R2,R1
 00000098  4800      LDR         R1,=TEMPnum ; TEMPnum
 0000009A  5488      STRB        R0,[R1,R2]
  116:             if ((DSMAG % 2) == 0)
 0000009C  4800      LDR         R0,=DSMAG ; DSMAG
 0000009E  7800      LDRB        R0,[R0,#0x0] ; DSMAG
 000000A0  2102      MOV         R1,#0x2
 000000A2  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 000000A4  FFAD      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 000000A6  1C01      MOV         R1,R0
 000000A8  2900      CMP         R1,#0x0
 000000AA  D109      BNE         L_11  ; T=0x000000C0
  117:                 TEMPnum[Xpos++] = '0';
 000000AC  2030      MOV         R0,#0x30
 000000AE  4800      LDR         R2,=Xpos ; Xpos
 000000B0  7811      LDRB        R1,[R2,#0x0] ; Xpos
 000000B2  1C0B      MOV         R3,R1
 000000B4  3301      ADD         R3,#0x1
 000000B6  7013      STRB        R3,[R2,#0x0] ; Xpos
 000000B8  1C0A      MOV         R2,R1
 000000BA  4800      LDR         R1,=TEMPnum ; TEMPnum
 000000BC  5488      STRB        R0,[R1,R2]
 000000BE  E008      B           L_12  ; T=0x000000D2
 000000C0          L_11:
  119:                 TEMPnum[Xpos++] = '5';
 000000C0  2035      MOV         R0,#0x35
 000000C2  4800      LDR         R2,=Xpos ; Xpos
 000000C4  7811      LDRB        R1,[R2,#0x0] ; Xpos
 000000C6  1C0B      MOV         R3,R1
 000000C8  3301      ADD         R3,#0x1
 000000CA  7013      STRB        R3,[R2,#0x0] ; Xpos
 000000CC  1C0A      MOV         R2,R1
 000000CE  4800      LDR         R1,=TEMPnum ; TEMPnum
 000000D0  5488      STRB        R0,[R1,R2]
 000000D2          L_12:
  121:             TEMPnum[Xpos++] = 0xDF;
 000000D2  20DF      MOV         R0,#0xDF
 000000D4  4800      LDR         R2,=Xpos ; Xpos
 000000D6  7811      LDRB        R1,[R2,#0x0] ; Xpos
 000000D8  1C0B      MOV         R3,R1
 000000DA  3301      ADD         R3,#0x1
 000000DC  7013      STRB        R3,[R2,#0x0] ; Xpos
 000000DE  1C0A      MOV         R2,R1
 000000E0  4800      LDR         R1,=TEMPnum ; TEMPnum
 000000E2  5488      STRB        R0,[R1,R2]
  122:             TEMPnum[Xpos++] = 'C';
 000000E4  2043      MOV         R0,#0x43
 000000E6  4800      LDR         R2,=Xpos ; Xpos
ARM COMPILER V2.54a,  Demo1                                                                15/07/10  16:40:21  PAGE 8   

 000000E8  7811      LDRB        R1,[R2,#0x0] ; Xpos
 000000EA  1C0B      MOV         R3,R1
 000000EC  3301      ADD         R3,#0x1
 000000EE  7013      STRB        R3,[R2,#0x0] ; Xpos
 000000F0  1C0A      MOV         R2,R1
 000000F2  4800      LDR         R1,=TEMPnum ; TEMPnum
 000000F4  5488      STRB        R0,[R1,R2]
  124:             TEMPnum[Xpos] = 0;
 000000F6  2000      MOV         R0,#0x0
 000000F8  4800      LDR         R1,=Xpos ; Xpos
 000000FA  7809      LDRB        R1,[R1,#0x0] ; Xpos
 000000FC  1C0A      MOV         R2,R1
 000000FE  4800      LDR         R1,=TEMPnum ; TEMPnum
 00000100  5488      STRB        R0,[R1,R2]
  126:             LCD8_sendstr (0,1, TEMPnum);
 00000102  4800      LDR         R2,=TEMPnum ; TEMPnum
 00000104  2000      MOV         R0,#0x0
 00000106  2101      MOV         R1,#0x1
 00000108  F7FF      BL          LCD8_sendstr?T  ; T=0x0001  (1)
 0000010A  FF7A      BL          LCD8_sendstr?T  ; T=0x0001  (2)
  127:         }
 0000010C  E004      B           L_13  ; T=0x00000118
 0000010E          L_9:
  130:             LCD8_sendstr (0,1, "Error   ");
 0000010E  4800      LDR         R2,=??S_2 ; ??S_2
 00000110  2000      MOV         R0,#0x0
 00000112  2101      MOV         R1,#0x1
 00000114  F7FF      BL          LCD8_sendstr?T  ; T=0x0001  (1)
 00000116  FF74      BL          LCD8_sendstr?T  ; T=0x0001  (2)
  131:         }
 00000118          L_13:
  134:         delay_Nx10cyc (5999999);
 00000118  4800      LDR         R0,=0x5B8D7F
 0000011A  F7FF      BL          delay_Nx10cyc?T  ; T=0x0001  (1)
 0000011C  FF71      BL          delay_Nx10cyc?T  ; T=0x0001  (2)
  135:     }
 0000011E  E78E      B           L_7  ; T=0x0000003E
  136: }
 00000120  BC08      POP         {R3}
 00000122  4718      BX          R3
 00000124          ENDP ; 'main'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =        24
  const size           =        25
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
