ARM COMPILER V2.54a,  ADC                                                                  13/07/10  14:54:43  PAGE 1   


ARM COMPILER V2.54a, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN .\Out\ADC.obj
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe ADC.c THUMB BROWSE DEBUG PRINT(.\OBJ\ADC.LST) TABS(4) PREPRINT(.\OBJ\ADC.I) 
                    -OBJECT(.\Out\ADC.obj) 

stmt  level    source

    1          /********************************************************************
    2              ADC Test Examples
    3              --------------------------
    4              
    5              Description
    6              -----------
    7              ADC 0.3- Each key press corresponding values send to serial port.
    8          
    9              Test configuration:
   10              -------------------
   11              Oscillator  :   12.0 MHz (cclk = 60.0 MHz, Fcco = 240.0 MHz)
   12              ADC         :   4.28MHz (VPBclock/7,   30MHZ/7)
   13          
   14              Connections - ADC0.0        
   15              --------------------------
   16              P0.27   -   AD0.0           
   17          /********************************************************************/
   18          
   19          #include <lpc213x.h>
   20          #include <stdio.h>
   21          
   22          
   23          
   24          //------------------------------
   25          //  Serial Port Initialize
   26          //------------------------------
   27          void serial_init(void)
   28          {
   29   1        PINSEL0 = 0x00000005;           /* Enable RxD0 and TxD0                   */
   30   1        U0LCR = 0x83;                   /* 8 bits, no Parity, 1 Stop bit          */
   31   1        U0DLL = 195;                     /* 9600 Baud Rate @ 12MHz VPB Clock       */
   32   1        U0LCR = 0x03;                   /* DLAB = 0                               */
   33   1      }
   34          
   35          
   36          //------------------------
   37          //Delay Routine start here
   38          //------------------------
   39          void delay(int n)
   40          {
   41   1          int i,j;
   42   1          for(i=0;i<n;i++)
   43   1          {
   44   2              for(j=0;j<0x5000;j++)
   45   2              {;}
   46   2          }
   47   1      }    
   48          
   49          
   50          
   51          //------------------------
   52          //Main program starts here
   53          //------------------------
   54          void main(void)
   55          {
   56   1      
   57   1          unsigned long val;
   58   1          PINSEL0 =   0X00000005;     //Enable RXD0 and TXD0
ARM COMPILER V2.54a,  ADC                                                                  13/07/10  14:54:43  PAGE 2   

   59   1          PINSEL1 =   0X01000000;     //Enable ADC
   60   1          VPBDIV  =   0x02;           //Set the cclk to 30 Mhz
   61   1          AD0CR   =   0x00270602;     //ADC configuration bits
   62   1          AD0CR   |=  0X01000000;     //start ADC now
   63   1          IO0DIR  =   0x0FFF7030;
   64   1      
   65   1          serial_init();              //serial initialization
   66   1      
   67   1          
   68   1          while(1)
   69   1          {
   70   2              do
   71   2              {
   72   3                  val = AD0DR;                    // Read A/D Data Register 
   73   3              }     
   74   2              while ((val & 0x80000000) == 0);    //Wait for the conversion to complete
   75   2              val = ((val >> 6) & 0x03FF);
   76   2              delay(1);
   77   2              printf("value : %d\n",val);
   78   2              delay(1);
   79   2           }
   80   1      }
   81          
   82          
ARM COMPILER V2.54a,  ADC                                                                  13/07/10  14:54:43  PAGE 3   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (printf?T)
 EXTERN NUMBER (__startup)



*** PUBLICS:
 PUBLIC         serial_init?T
 PUBLIC         delay?T
 PUBLIC         main



*** DATA SEGMENT '?CON?ADC':
 00000000          ??S_1:
 00000000            DB          'value : %d',0x0A,0x00

*** CODE SEGMENT '?PR?serial_init?T?ADC':
   29:   PINSEL0 = 0x00000005;           /* Enable RxD0 and TxD0                   */
 00000000  2105      MOV         R1,#0x5
 00000002  4800      LDR         R0,=0xE002C000
 00000004  6001      STR         R1,[R0,#0x0]
   30:   U0LCR = 0x83;                   /* 8 bits, no Parity, 1 Stop bit          */
 00000006  2183      MOV         R1,#0x83
 00000008  4800      LDR         R0,=0xE000C00C
 0000000A  7001      STRB        R1,[R0,#0x0]
   31:   U0DLL = 195;                     /* 9600 Baud Rate @ 12MHz VPB Clock       */
 0000000C  21C3      MOV         R1,#0xC3
 0000000E  4800      LDR         R0,=0xE000C000
 00000010  7001      STRB        R1,[R0,#0x0]
   32:   U0LCR = 0x03;                   /* DLAB = 0                               */
 00000012  2103      MOV         R1,#0x3
 00000014  4800      LDR         R0,=0xE000C00C
 00000016  7001      STRB        R1,[R0,#0x0]
   33: }
 00000018  4770      BX          R14
 0000001A          ENDP ; 'serial_init?T'


*** CODE SEGMENT '?PR?delay?T?ADC':
   39: void delay(int n)
 00000000  B410      PUSH        {R4}
 00000002  ---- Variable 'n' assigned to Register 'R0' ----
   40: {
 00000002            ; SCOPE-START
   42:     for(i=0;i<n;i++)
 00000002  2100      MOV         R1,#0x0
 00000004  ---- Variable 'i' assigned to Register 'R1' ----
 00000004  E006      B           L_3  ; T=0x00000014
   44:         for(j=0;j<0x5000;j++)
 00000006          L_10:
 00000006  2200      MOV         R2,#0x0
 00000008  ---- Variable 'j' assigned to Register 'R2' ----
   45:         {;}
 00000008          L_6:
 00000008  3201      ADD         R2,#0x1
 0000000A  1C13      MOV         R3,R2 ; j
 0000000C  4800      LDR         R4,=0x5000
 0000000E  42A3      CMP         R3,R4 ; j
 00000010  DBFA      BLT         L_6  ; T=0x00000008
   46:     }
 00000012  3101      ADD         R1,#0x1
 00000014          L_3:
 00000014  1C03      MOV         R3,R0 ; n
 00000016  1C0A      MOV         R2,R1 ; i
 00000018  429A      CMP         R2,R3 ; i
 0000001A  DBF4      BLT         L_10  ; T=0x00000006
 0000001C            ; SCOPE-END
   47: }     
 0000001C  BC10      POP         {R4}
ARM COMPILER V2.54a,  ADC                                                                  13/07/10  14:54:43  PAGE 4   

 0000001E  4770      BX          R14
 00000020          ENDP ; 'delay?T'


*** CODE SEGMENT '?PR?main?ADC':
   54: void main(void)
 00000000  B500      PUSH        {LR}
   55: {
 00000002            ; SCOPE-START
   58:     PINSEL0 =   0X00000005;     //Enable RXD0 and TXD0
 00000002  2105      MOV         R1,#0x5
 00000004  4800      LDR         R0,=0xE002C000
 00000006  6001      STR         R1,[R0,#0x0]
   59:     PINSEL1 =   0X01000000;     //Enable ADC
 00000008  4800      LDR         R2,=0x1000000
 0000000A  4800      LDR         R0,=0xE002C004
 0000000C  6002      STR         R2,[R0,#0x0]
   60:     VPBDIV  =   0x02;           //Set the cclk to 30 Mhz
 0000000E  2102      MOV         R1,#0x2
 00000010  4800      LDR         R0,=0xE01FC100
 00000012  7001      STRB        R1,[R0,#0x0]
   61:     AD0CR   =   0x00270602;     //ADC configuration bits
 00000014  4800      LDR         R1,=0x270602
 00000016  4800      LDR         R0,=0xE0034000
 00000018  6001      STR         R1,[R0,#0x0]
   62:     AD0CR   |=  0X01000000;     //start ADC now
 0000001A  4800      LDR         R0,=0xE0034000
 0000001C  6801      LDR         R1,[R0,#0x0]
 0000001E  4311      ORR         R1,R2
 00000020  6001      STR         R1,[R0,#0x0]
   63:     IO0DIR  =   0x0FFF7030;
 00000022  4800      LDR         R1,=0xFFF7030
 00000024  4800      LDR         R0,=0xE0028008
 00000026  6001      STR         R1,[R0,#0x0]
   65:     serial_init();              //serial initialization
 00000028  F7FF      BL          serial_init?T  ; T=0x0001  (1)
 0000002A  FFEA      BL          serial_init?T  ; T=0x0001  (2)
   70:         do
 0000002C          L_16:
 0000002C          L_15:
   72:             val = AD0DR;                    // Read A/D Data Register 
 0000002C  4800      LDR         R0,=0xE0034004
 0000002E  6804      LDR         R4,[R0,#0x0]
 00000030  ---- Variable 'val' assigned to Register 'R4' ----
   73:         }     
 00000030  1C20      MOV         R0,R4 ; val
 00000032  4800      LDR         R1,=0x80000000
 00000034  4208      TST         R0,R1 ; val
 00000036  D0F9      BEQ         L_15  ; T=0x0000002C
   75:         val = ((val >> 6) & 0x03FF);
 00000038  09A4      LSR         R4,R4,#0x6 ; val
 0000003A  4800      LDR         R0,=0x3FF
 0000003C  4004      AND         R4,R0
   76:         delay(1);
 0000003E  2001      MOV         R0,#0x1
 00000040  F7FF      BL          delay?T  ; T=0x0001  (1)
 00000042  FFDE      BL          delay?T  ; T=0x0001  (2)
   77:         printf("value : %d\n",val);
 00000044  4800      LDR         R0,=??S_1 ; ??S_1
 00000046  1C21      MOV         R1,R4 ; val
 00000048  F7FF      BL          printf?T  ; T=0x0001  (1)
 0000004A  FFDA      BL          printf?T  ; T=0x0001  (2)
   78:         delay(1);
 0000004C  2001      MOV         R0,#0x1
 0000004E  F7FF      BL          delay?T  ; T=0x0001  (1)
 00000050  FFD7      BL          delay?T  ; T=0x0001  (2)
   79:      }
 00000052  E7EB      B           L_16  ; T=0x0000002C
ARM COMPILER V2.54a,  ADC                                                                  13/07/10  14:54:43  PAGE 5   

 00000054            ; SCOPE-END
   80: }
 00000054  BC08      POP         {R3}
 00000056  4718      BX          R3
 00000058          ENDP ; 'main'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =    ------
  const size           =        12
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
