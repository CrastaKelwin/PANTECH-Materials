ARM COMPILER V2.54a,  DEMO                                                                 26/08/10  15:12:19  PAGE 1   


ARM COMPILER V2.54a, COMPILATION OF MODULE DEMO
OBJECT MODULE PLACED IN .\Obj\DEMO.obj
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe DEMO.c THUMB OPTIMIZE(7,SPEED) BROWSE INCDIR(..\..\INC;..\..\OBJ) DEBUG PRIN
                    -T(.\LST\DEMO.LST) TABS(4) OBJECT(.\Obj\DEMO.obj) 

stmt  level    source

    1          /*
    2           * Project name:
    3               DEMO (Simple demonstration of the PS2 Library functions)
    4           * Description:
    5               This code demonstrates communication with ps/2 keyboard.
    6               Scan codes that represent key are send to PC via UART-0.
    7           * Test configuration:
    8               MCU:             LPC2148
    9               Dev.Board:       ARM7 SLICKER
   10               Oscillator:      12.0 MHz (cclk = 60.0 MHz, Fcco = 240.0 MHz)
   11               Ext. Modules:    - PS/2 Keyboard
   12               SW:              KEIL uVision3 v3.34
   13           * NOTES:
   14               - Be sure to turn ON the switches for RS232-0 to connect UART lines
   15                 to RS232-0 output (Switch SW3)
   16               - Start UART terminal adjusted to 38400 bps, 8 bit, no parity
   17          */
   18          
   19          /********************************************************************************/
   20          //                          Hardware settings (ADK Board)
   21          /********************************************************************************/
   22          //
   23          //  PS2-(1) - P1.16 (CLK), P1.17 (DATA)  
   24          //
   25          //  SW32 -  DIP Switch(for LCD Control Lines)
   26          //  =========================================
   27          //  Turn On - DATA1, CLK1 (PS2(1)) (P1.16 & P1.17)
   28          //  Turn On - DATA0, CLK0 (PS2(2))
   29          //
   30          //  connect serial cable to P1(DB9 connector) to PC's serial port
   31          //  
   32          //  Output in Hyperterminal Window - Set Baudrate to 38400bps 
   33          //
   34          /********************************************************************************/
   35          #include <LPC213X.H>
   36          #include <stdio.h>
   37          
   38          #include "ps2.h"
   39          #include "Serial.h"
   40          #include "Utility.h"
   41          
   42          
   43          unsigned char
   44              raw_data[16],
   45              raw_pos;
   46          
   47          unsigned long
   48              n;
   49          
   50          
   51          int main (void)
   52          {
   53   1      
   54   1          PINSEL0 = 0;
   55   1          PINSEL1 = 0;
   56   1          PINSEL2 &= 0x0000000C;
   57   1      
   58   1      
ARM COMPILER V2.54a,  DEMO                                                                 26/08/10  15:12:19  PAGE 2   

   59   1          UART0_init(38400/*bps*/, 15000/*kHz*/, length_8_bit, stop_bit_1, parity_disable, parity_odd);
   60   1      //      U0THR = 'A';
   61   1      
   62   1          // Init PS/2 Keyboard
   63   1          Ps2_Init(&IOPIN1, 17/*CLK*/, 16/*DATA*/);
   64   1      
   65   1          // Delay 100ms, Wait for keyboard to finish
   66   1          delay_Nx10cyc(599999);
   67   1          // Set Keyboard Delay and Typematic Rate
   68   1          Ps2_Adjust_Rate(TR_Delay_750ms, TR_Rate_10);
   69   1          delay_Nx10cyc(599999);
   70   1      
   71   1          delay_Nx10cyc(599999);
   72   1          do
   73   1          {
   74   2              Ps2_Data_Read(&raw_pos, raw_data);
   75   2      
   76   2              if (raw_pos != 0)
   77   2              {
   78   3                  for (n=0; n<raw_pos; n++)
   79   3                  {
   80   4                      UART0_WriteNum ("0x", raw_data[n]);
   81   4                      UART0_sendchar (' ');
   82   4                      UART0_sendstring ("\r");
   83   4                  }
   84   3      //          UART0_sendstring ("\r");
   85   3              }
   86   2          }   while (1);
   87   1      
   88   1      }
ARM COMPILER V2.54a,  DEMO                                                                 26/08/10  15:12:19  PAGE 3   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (Ps2_Init?T)
 EXTERN CODE16 (Ps2_Data_Read?T)
 EXTERN CODE16 (Ps2_Adjust_Rate?T)
 EXTERN CODE16 (UART0_init?T)
 EXTERN CODE16 (UART0_sendchar?T)
 EXTERN CODE16 (UART0_sendstring?T)
 EXTERN CODE16 (UART0_WriteNum?T)
 EXTERN CODE16 (delay_Nx10cyc?T)
 EXTERN NUMBER (__startup)



*** PUBLICS:
 PUBLIC         main
 PUBLIC         raw_data
 PUBLIC         raw_pos
 PUBLIC         n



*** DATA SEGMENT '?CON?DEMO':
 00000000          ??S_2:
 00000000            DB          0x0D,0x00
 00000002          ??S_1:
 00000002            DB          '0x',0x00

*** DATA SEGMENT '?DT0?DEMO':
 00000000          n:
 00000000            DS          4
 00000004          raw_data:
 00000004            DS          16
 00000014          raw_pos:
 00000014            DS          1



*** CODE SEGMENT '?PR?main?DEMO':
   51: int main (void)
 00000000  B500      PUSH        {LR}
   54:     PINSEL0 = 0;
 00000002  2100      MOV         R1,#0x0
 00000004  4800      LDR         R0,=0xE002C000
 00000006  6001      STR         R1,[R0,#0x0]
   55:     PINSEL1 = 0;
 00000008  4800      LDR         R0,=0xE002C004
 0000000A  6001      STR         R1,[R0,#0x0]
   56:     PINSEL2 &= 0x0000000C;
 0000000C  220C      MOV         R2,#0xC
 0000000E  4800      LDR         R0,=0xE002C014
 00000010  6801      LDR         R1,[R0,#0x0]
 00000012  4011      AND         R1,R2
 00000014  6001      STR         R1,[R0,#0x0]
   59:     UART0_init(38400/*bps*/, 15000/*kHz*/, length_8_bit, stop_bit_1, parity_disable, parity_odd);
 00000016  2300      MOV         R3,#0x0
 00000018  B408      PUSH        {R3}
 0000001A  B408      PUSH        {R3}
 0000001C  4800      LDR         R0,=0x9600
 0000001E  4800      LDR         R1,=0x3A98
 00000020  2203      MOV         R2,#0x3
 00000022  F7FF      BL          UART0_init?T  ; T=0x0001  (1)
 00000024  FFED      BL          UART0_init?T  ; T=0x0001  (2)
 00000026  B002      ADD         R13,#0x8
   63:     Ps2_Init(&IOPIN1, 17/*CLK*/, 16/*DATA*/);
 00000028  4800      LDR         R0,=0xE0028010
 0000002A  2111      MOV         R1,#0x11
 0000002C  2210      MOV         R2,#0x10
 0000002E  F7FF      BL          Ps2_Init?T  ; T=0x0001  (1)
 00000030  FFE7      BL          Ps2_Init?T  ; T=0x0001  (2)
   66:     delay_Nx10cyc(599999);
ARM COMPILER V2.54a,  DEMO                                                                 26/08/10  15:12:19  PAGE 4   

 00000032  4800      LDR         R0,=0x927BF
 00000034  F7FF      BL          delay_Nx10cyc?T  ; T=0x0001  (1)
 00000036  FFE4      BL          delay_Nx10cyc?T  ; T=0x0001  (2)
   68:     Ps2_Adjust_Rate(TR_Delay_750ms, TR_Rate_10);
 00000038  2040      MOV         R0,#0x40
 0000003A  210C      MOV         R1,#0xC
 0000003C  F7FF      BL          Ps2_Adjust_Rate?T  ; T=0x0001  (1)
 0000003E  FFE0      BL          Ps2_Adjust_Rate?T  ; T=0x0001  (2)
   69:     delay_Nx10cyc(599999);
 00000040  4800      LDR         R0,=0x927BF
 00000042  F7FF      BL          delay_Nx10cyc?T  ; T=0x0001  (1)
 00000044  FFDD      BL          delay_Nx10cyc?T  ; T=0x0001  (2)
   71:     delay_Nx10cyc(599999);
 00000046  4800      LDR         R0,=0x927BF
 00000048  F7FF      BL          delay_Nx10cyc?T  ; T=0x0001  (1)
 0000004A  FFDA      BL          delay_Nx10cyc?T  ; T=0x0001  (2)
   72:     do
 0000004C          L_1:
   74:         Ps2_Data_Read(&raw_pos, raw_data);
 0000004C  4800      LDR         R0,=raw_pos ; raw_pos
 0000004E  4800      LDR         R1,=raw_data ; raw_data
 00000050  F7FF      BL          Ps2_Data_Read?T  ; T=0x0001  (1)
 00000052  FFD6      BL          Ps2_Data_Read?T  ; T=0x0001  (2)
   76:         if (raw_pos != 0)
 00000054  4800      LDR         R0,=raw_pos ; raw_pos
 00000056  7800      LDRB        R0,[R0,#0x0] ; raw_pos
 00000058  2800      CMP         R0,#0x0
 0000005A  D0F7      BEQ         L_1  ; T=0x0000004C
   78:             for (n=0; n<raw_pos; n++)
 0000005C  2100      MOV         R1,#0x0
 0000005E  4800      LDR         R0,=n ; n
 00000060  6001      STR         R1,[R0,#0x0] ; n
 00000062  E011      B           L_8  ; T=0x00000088
 00000064          L_9:
   80:                 UART0_WriteNum ("0x", raw_data[n]);
 00000064  4800      LDR         R0,=n ; n
 00000066  6801      LDR         R1,[R0,#0x0] ; n
 00000068  4800      LDR         R0,=raw_data ; raw_data
 0000006A  5C40      LDRB        R0,[R0,R1]
 0000006C  1C01      MOV         R1,R0
 0000006E  4800      LDR         R0,=??S_1 ; ??S_1
 00000070  F7FF      BL          UART0_WriteNum?T  ; T=0x0001  (1)
 00000072  FFC6      BL          UART0_WriteNum?T  ; T=0x0001  (2)
   81:                 UART0_sendchar (' ');
 00000074  2020      MOV         R0,#0x20
 00000076  F7FF      BL          UART0_sendchar?T  ; T=0x0001  (1)
 00000078  FFC3      BL          UART0_sendchar?T  ; T=0x0001  (2)
   82:                 UART0_sendstring ("\r");
 0000007A  4800      LDR         R0,=??S_2 ; ??S_2
 0000007C  F7FF      BL          UART0_sendstring?T  ; T=0x0001  (1)
 0000007E  FFC0      BL          UART0_sendstring?T  ; T=0x0001  (2)
   83:             }
 00000080  4800      LDR         R0,=n ; n
 00000082  6801      LDR         R1,[R0,#0x0] ; n
 00000084  3101      ADD         R1,#0x1
 00000086  6001      STR         R1,[R0,#0x0] ; n
 00000088          L_8:
 00000088  4800      LDR         R0,=raw_pos ; raw_pos
 0000008A  7800      LDRB        R0,[R0,#0x0] ; raw_pos
 0000008C  1C01      MOV         R1,R0
 0000008E  4800      LDR         R0,=n ; n
 00000090  6800      LDR         R0,[R0,#0x0] ; n
 00000092  4288      CMP         R0,R1
 00000094  D3E6      BCC         L_9  ; T=0x00000064
   86:     }    while (1);
 00000096  E7D9      B           L_1  ; T=0x0000004C
ARM COMPILER V2.54a,  DEMO                                                                 26/08/10  15:12:19  PAGE 5   

   88: }
 00000098  BC08      POP         {R3}
 0000009A  4718      BX          R3
 0000009C          ENDP ; 'main'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =        21
  const size           =         5
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
