ARM COMPILER V2.53,  DEMO                                                                  08/04/16  11:04:27  PAGE 1   


ARM COMPILER V2.53, COMPILATION OF MODULE DEMO
OBJECT MODULE PLACED IN .\Obj\DEMO.obj
COMPILER INVOKED BY: C:\KeilUV3\ARM\BIN\CA.exe DEMO.c ARM BROWSE INCDIR(..\..\INC;..\..\OBJ) DEBUG SYMBOLS PRINT(.\LST\D
                    -EMO.LST) TABS(4) OBJECT(.\Obj\DEMO.obj) 

stmt  level    source

    1          /* Project name:
    2               DEMO (Ethernet controller ENC28J60 mini library)
    3               
    4           * Description:
    5                  This library is designed to embed tiny servers.
    6                  No Ethernet knowledge is necessary to use it.
    7                  It has a very small footprint.
    8           
    9                  Features :
   10                          Driver for ENC28J60 Microchip SPI Ethernet controller
   11                          Supports IPV4 protocol
   12                          Does not support fragmented packets
   13                          Replies to :
   14                                  - ARP requests
   15                                  - ICMP echo requests
   16                                  - UDP requests
   17                                  - TCP requests (no stack, no packet reconstruction)
   18           * Test configuration:
   19               MCU:             LPC21xx
   20               Oscillator:      12.0 MHz (cclk = 60.0 MHz, Fcco = 240.0 MHz)
   21               SW:              KEIL uVision3 v3.50
   22                
   23           * BOARD NOTES:
   24               - Setup PC Ethernet Card "Speed and Duplex" to 10Mb/s Full Duplex
   25                (P0.7/SSEL0 must be high for SPI to operate)
   26               - From Command prompt try to ping IP address defined below (deault 192.168.20.60)
   27               - In web browser type URL http://192.168.1.60
   28          */
   29          
   30          /********************************************************************************/
   31          //                          Hardware settings (ADK Board)
   32          /********************************************************************************/
   33          //
   34          //  CN4(LED)    - Connector (JP8) to LED Output    -->  Port1(P1.16 to P1.23)
   35          //  CN2(Switch) - Connector (JP12) to Switch Input -->  Port1(P1.24 to P1.31)
   36          //
   37          //  SW33 -  DIP Switch
   38          //  ==================
   39          //  Turn On - SCK, MISO, MOSI   (SPI Communication)
   40          //
   41          //  SW34 -  DIP Switch
   42          //  ==================
   43          //  Turn On - ETHR.CS, ETHR.RST, ETHR.INT, ETHR.WOL (Ethernet ENC28j60)
   44          //
   45          /********************************************************************************/
   46          //          In web browser type URL http://192.168.1.60
   47          /********************************************************************************/
   48          
   49          #include <LPC213X.H>
   50          #include "string.h"
   51          
   52          #include "ENC28J60.h"
   53          #include "c_ctype.h"
   54          #include "conv.h"
   55          #include "Utility.h"
   56          
   57          #define ENC28J60_HALFDUPLEX     0
   58          #define ENC28J60_FULLDUPLEX     1
ARM COMPILER V2.53,  DEMO                                                                  08/04/16  11:04:27  PAGE 2   

   59          
   60          /************************************************************
   61           * ROM constant strings
   62           */
   63          const unsigned char httpHeader[] = "HTTP/1.1 200 OK\nContent-type: ";       // HTTP header
   64          const unsigned char httpMimeTypeHTML[] = "text/html\n\n";                   // HTML MIME type
   65          const unsigned char httpMimeTypeScript[] = "text/plain\n\n";                // TEXT MIME type
   66          unsigned char httpMethod[] = "GET /";
   67          /*
   68           * this HTML page calls the boards to get its status, and builds itself with javascript
   69           */
   70          const char *indexPage = "<HTML><HEAD></HEAD><BODY>\
   71          <h1> ARM& LPC214x </h1>\
   72          <h2>  WEB SERVER  </h2>\
   73          <a href=/>Reload</a>\
   74          <script src=/s></script>\
   75          <table><tr><td valign=top><table border=2 style=\"font-size:25px ;font-family: terminal ;\">\
   76          <tr><th colspan=3>ADC</th></tr>\
   77          <tr><td>AN0</td><td><script>document.write(AN0)</script></td></tr>\
   78          <tr><td>AN1</td><td><script>document.write(AN1)</script></td></tr>\
   79          </table></td><td><table border=1 style=\"font-size:15px ;font-family: terminal ;\">\
   80          <tr><th colspan=3>P1[31..24]</th></tr>\
   81          <script>\
   82          var str,i;\
   83          str=\"\";\
   84          for(i=0;i<8;i++)\
   85          {str+=\"<tr><td bgcolor=blue>BUTTON #\"+i+\"</td>\";\
   86          if(PORT1_31_24&(1<<i)){str+=\"<td bgcolor=green>ON\";}\
   87          else {str+=\"<td bgcolor=#cccccc>OFF\";}\
   88          str+=\"</td></tr>\";}\
   89          document.write(str) ;\
   90          </script>\
   91          </table></td><td>\
   92          <table border=2 style=\"font-size:15px ;font-family: terminal ;\">\
   93          <tr><th colspan=4>P1[23..16]</th></tr>\
   94          <script>\
   95          var str,i;\
   96          str=\"\";\
   97          for(i=0;i<8;i++)\
   98          {str+=\"<tr><td bgcolor=orange>LED #\"+i+\"</td>\";\
   99          if(PORT1_23_16&(1<<i)){str+=\"<td bgcolor=blue>ON\";}\
  100          else {str+=\"<td bgcolor=#cccccc>OFF\";}\
  101          str+=\"</td><td><a href=/t\"+i+\">Toggle</a></td></tr>\";}\
  102          document.write(str) ;\
  103          </script>\
  104          </table></td></tr></table>\
  105          This is HTTP request #<script>document.write(REQ)</script></BODY></HTML>\
  106          ";
  107          
  108          /***********************************
  109           * RAM variables
  110           */
  111          unsigned char myMacAddr[6] = {0x00, 0x14, 0xA5, 0x76, 0x19, 0x3f};  // my MAC address
  112          unsigned char myIpAddr[4] = {192, 168, 1, 60};                      // my IP address
  113          unsigned char getRequest[15];                                       // HTTP request buffer
  114          unsigned char dyna[31];                                             // buffer for dynamic response
  115          unsigned long httpCounter = 0;                                      // counter of HTTP requests
  116          
  117          
  118          
  119          
  120          /*******************************************
  121           * functions
  122           */
  123           
  124          /*
ARM COMPILER V2.53,  DEMO                                                                  08/04/16  11:04:27  PAGE 3   

  125           * put the constant string pointed to by s to the ENC transmit buffer
  126           */
  127          unsigned long putConstString(const char *s)
  128          {
  129   1          unsigned long ctr;
  130   1              
  131   1          ctr = 0;
  132   1          while(*s)
  133   1          {
  134   2              ENC28J60_putByte(*s++);
  135   2              ctr++;
  136   2          }
  137   1          return(ctr);
  138   1      }
  139                  
  140          /*
  141           * put the string pointed to by s to the ENC transmit buffer
  142           */
  143          unsigned long putString(char *s)
  144          {
  145   1          unsigned long ctr;
  146   1      
  147   1          ctr = 0;
  148   1          while(*s)
  149   1          {
  150   2              ENC28J60_putByte(*s++);
  151   2              ctr++;
  152   2          }
  153   1          return(ctr);
  154   1      }
  155          
  156          
  157          /*
  158           * this function is called by the library
  159           * the user accesses to the HTTP request by successive calls to ENC28J60_getByte()
  160           * the user puts data in the transmit buffer by successive calls to ENC28J60_putByte()
  161           * the function must return the length in bytes of the HTTP reply, or 0 if nothing to transmit
  162           *
  163           * if you don't need to reply to HTTP requests,
  164           * just define this function with a return(0) as single statement
  165           *
  166           */
  167          unsigned long ENC28J60_userTCP(unsigned char *remoteHost, unsigned long remotePort, unsigned long localPo
             -rt, unsigned long reqLength)
  168          {
  169   1          unsigned long
  170   1              len,                        // my reply length
  171   1              i,                          // general purpose integer
  172   1              bitMask;                // for bit mask
  173   1      
  174   1          // for parameters that are not used, skip compiler warnings "unreferenced parameter"
  175   1          i = (unsigned long) remoteHost;
  176   1          i = remotePort;
  177   1          i = reqLength;
  178   1      
  179   1          len = 0;
  180   1          bitMask = 0;
  181   1      
  182   1          if (localPort != 80)            // I listen only to web request on port 80
  183   1              return(0) ;
  184   1                      
  185   1          // get 10 first bytes only of the request, the rest does not matter here
  186   1          for (i = 0; i < 10; i++)
  187   1              getRequest[i] = ENC28J60_getByte();
  188   1          getRequest[i] = 0;
  189   1      
ARM COMPILER V2.53,  DEMO                                                                  08/04/16  11:04:27  PAGE 4   

  190   1          if (memcmp(getRequest, httpMethod, 5))                      // only GET method is supported here
  191   1              return(0);
  192   1      
  193   1          httpCounter++;                                              // one more request done
  194   1      
  195   1          if (getRequest[5] == 's')                                   // if request path name starts with s, store dynamic data in transmit 
             -buffer
  196   1          {
  197   2              // the text string replied by this request can be interpreted as javascript statements by browsers
  198   2              len = putConstString(httpHeader);                       // HTTP header
  199   2              len += putConstString(httpMimeTypeScript);          // with text MIME type
  200   2      
  201   2              // add AN0 value to reply
  202   2              IntToStr(0, dyna);
  203   2              len += putConstString("var AN0=");
  204   2              len += putString(dyna);
  205   2              len += putConstString(";");
  206   2      
  207   2              // add AN1 value to reply
  208   2              IntToStr(0, dyna);
  209   2              len += putConstString("var AN1=");
  210   2              len += putString(dyna);
  211   2              len += putConstString(";");
  212   2      
  213   2              // add PORT1[31..24] value (buttons) to reply
  214   2              len += putConstString("var PORT1_31_24=");
  215   2              IntToStr(((IOPIN1 >> 24) & 0xFF), dyna);
  216   2              len += putString(dyna);
  217   2              len += putConstString(";");
  218   2                              
  219   2              // add PORT1[23..16] value (LEDs) to reply
  220   2              len += putConstString("var PORT1_23_16=");
  221   2              IntToStr(((IOPIN1 >> 16) & 0xFF), dyna);
  222   2              len += putString(dyna);
  223   2              len += putConstString(";");
  224   2      
  225   2              // add HTTP requests counter to reply
  226   2              IntToStr(httpCounter, dyna);
  227   2              len += putConstString("var REQ=");
  228   2              len += putString(dyna);
  229   2              len += putConstString(";");
  230   2          }
  231   1          else if (getRequest[5] == 't')                              // if request path name starts with t, toggle LED bit number that 
             -comes after
  232   1          {
  233   2              if (isdigit(getRequest[6]))                             // if 0 <= bit number <= 9, bits 8 & 9 does not exist but does not m
             -atter
  234   2              {
  235   3                  bitMask = getRequest[6] - '0';                      // convert ASCII to integer
  236   3                  bitMask = 1 << (bitMask + 16);                      // create bit mask
  237   3                  if ((IOPIN1 & bitMask) != 0)                        // Toggled LED
  238   3                      IOCLR1 |= bitMask;
  239   3                  else
  240   3                      IOSET1 |= bitMask;
  241   3              }
  242   2          }
  243   1      
  244   1          if (len == 0)                                                   // what do to by default
  245   1          {
  246   2              len =  putConstString(httpHeader);                          // HTTP header
  247   2              len += putConstString(httpMimeTypeHTML);                    // with HTML MIME type
  248   2              len += putConstString(indexPage);                           // HTML page
  249   2          }
  250   1      
  251   1          return (len);                   // return to the library with the number of bytes to transmit
  252   1      }
ARM COMPILER V2.53,  DEMO                                                                  08/04/16  11:04:27  PAGE 5   

  253                  
  254          /*
  255           * this function is called by the library
  256           * the user accesses to the UDP request by successive calls to ENC28J60_getByte()
  257           * the user puts data in the transmit buffer by successive calls to ENC28J60_putByte()
  258           * the function must return the length in bytes of the UDP reply, or 0 if nothing to transmit
  259           *
  260           * if you don't need to reply to UDP requests,
  261           * just define this function with a return(0) as single statement
  262           *
  263           */
  264          unsigned long ENC28J60_userUDP(unsigned char *remoteHost, unsigned long remotePort, unsigned long destPor
             -t, unsigned long reqLength)
  265          {
  266   1          unsigned long
  267   1              len;                        // my reply length
  268   1          unsigned char
  269   1              *ptr;                       // pointer to the dynamic buffer
  270   1      
  271   1          // reply is made of the remote host IP address in human readable format
  272   1          ByteToStr(remoteHost[0], dyna);             // first IP address byte
  273   1          dyna[3] = '.';
  274   1          ByteToStr(remoteHost[1], dyna + 4);     // second
  275   1          dyna[7] = '.';
  276   1          ByteToStr(remoteHost[2], dyna + 8);     // third
  277   1          dyna[11] = '.';
  278   1          ByteToStr(remoteHost[3], dyna + 12);    // fourth
  279   1      
  280   1          dyna[15] = ':';                                             // add separator
  281   1      
  282   1          // then remote host port number
  283   1          IntToStr(remotePort, dyna + 16);
  284   1          dyna[22] = '[';
  285   1          IntToStr(destPort, dyna + 23);
  286   1          dyna[29] = ']';
  287   1          dyna[30] = 0;
  288   1      
  289   1          // the total length of the request is the length of the dynamic string plus the text of the request
  290   1          len = 30 + reqLength;
  291   1      
  292   1          // puts the dynamic string into the transmit buffer
  293   1          ptr = dyna;
  294   1          while (*ptr)
  295   1              ENC28J60_putByte(*ptr++);
  296   1      
  297   1          // then puts the request string converted into upper char into the transmit buffer
  298   1          while (reqLength--)
  299   1              ENC28J60_putByte(toupper(ENC28J60_getByte()));
  300   1      
  301   1          return (len);       // back to the library with the length of the UDP reply
  302   1      }
  303          
  304          
  305          
  306          
  307          /*
  308           * main entry
  309           */
  310          int main (void)
  311          {
  312   1          PINSEL0 = 0;
  313   1          PINSEL1 = 0;
  314   1          PINSEL2 &= 0x0000000C;
  315   1          delay_Nx10cyc(599999);          // Delay 0,1s
  316   1      
  317   1          IODIR1 &= 0x00FFFFFF;               // Set P1[31..24] as inputs for buttons
ARM COMPILER V2.53,  DEMO                                                                  08/04/16  11:04:27  PAGE 6   

  318   1          IODIR1 |= 0x00FF0000;               // Set P1[23..16] as outputs for LED
  319   1          IOCLR1 |= 0x00FF0000;               // Turn off LEDs
  320   1              
  321   1          // starts ENC28J60 with : RST bit on IOPIN0.13, CS bit on IOPIN0.12, my MAC & IP address, full duplex
  322   1          ENC28J60_Init(&IOPIN0, 13, &IOPIN0, 12, myMacAddr, myIpAddr, ENC28J60_FULLDUPLEX) ;
  323   1      
  324   1          while (1)
  325   1          {
  326   2              ENC28J60_doPacket();        // process incoming Ethernet packets
  327   2              /*
  328   2              * add your stuff here if needed
  329   2              * ENC28J60_doPacket() must be called as often as possible
  330   2              * otherwise packets could be lost
  331   2              */
  332   2          }
  333   1      }
ARM COMPILER V2.53,  DEMO                                                                  08/04/16  11:04:27  PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE32 (memcmp?A)
 EXTERN CODE32 (ENC28J60_Init?A)
 EXTERN CODE32 (ENC28J60_doPacket?A)
 EXTERN CODE32 (ENC28J60_putByte?A)
 EXTERN CODE32 (ENC28J60_getByte?A)
 EXTERN CODE32 (isdigit?A)
 EXTERN CODE32 (toupper?A)
 EXTERN CODE32 (ByteToStr?A)
 EXTERN CODE32 (IntToStr?A)
 EXTERN CODE32 (delay_Nx10cyc?A)
 EXTERN NUMBER (__startup)



*** PUBLICS:
 PUBLIC         httpHeader
 PUBLIC         httpMimeTypeHTML
 PUBLIC         httpMimeTypeScript
 PUBLIC         ENC28J60_userUDP?A
 PUBLIC         ENC28J60_userTCP?A
 PUBLIC         putConstString?A
 PUBLIC         putString?A
 PUBLIC         main
 PUBLIC         httpMethod
 PUBLIC         indexPage
 PUBLIC         myMacAddr
 PUBLIC         myIpAddr
 PUBLIC         getRequest
 PUBLIC         dyna
 PUBLIC         httpCounter



*** DATA SEGMENT '?CON?DEMO':
 00000000          ??S_11:
 00000000            DB          'var REQ=',0x00
 00000009          ??S_10:
 00000009            DB          'var PORT1_23_16=',0x00
 0000001A          ??S_9:
 0000001A            DB          'var PORT1_31_24=',0x00
 0000002B          ??S_8:
 0000002B            DB          'var AN1=',0x00
 00000034          ??S_7:
 00000034            DB          ';',0x00
 00000036          ??S_6:
 00000036            DB          'var AN0=',0x00
 0000003F          ??S_5:
 0000003F            DB          '<HTML><HEAD></HEAD><BODY><h1> ARM& LPC'
 00000065            DB          '214x </h1><h2>  WEB SERVER  </h2><a hr'
 0000008B            DB          'ef=/>Reload</a><script src=/s></script'
 000000B1            DB          '><table><tr><td valign=top><table bord'
 000000D7            DB          'er=2 style="font-size:25px ;font-famil'
 000000FD            DB          'y: terminal ;"><tr><th colspan=3>ADC</'
 00000123            DB          'th></tr><tr><td>AN0</td><td><script>do'
 00000149            DB          'cument.write(AN0)</script></td></tr><t'
 0000016F            DB          'r><td>AN1</td><td><script>document.wri'
 00000195            DB          'te(AN1)</script></td></tr></table></td'
 000001BB            DB          '><td><table border=1 style="font-size:'
 000001E1            DB          '15px ;font-family: terminal ;"><tr><th'
 00000207            DB          ' colspan=3>P1[31..24]</th></tr><script'
 0000022D            DB          '>var str,i;str="";for(i=0;i<8;i++){str'
 00000253            DB          '+="<tr><td bgcolor=blue>BUTTON #"+i+"<'
 00000279            DB          '/td>";if(PORT1_31_24&(1<<i)){str+="<td'
 0000029F            DB          ' bgcolor=green>ON";}else {str+="<td bg'
 000002C5            DB          'color=#cccccc>OFF";}str+="</td></tr>";'
 000002EB            DB          '}document.write(str) ;</script></table'
ARM COMPILER V2.53,  DEMO                                                                  08/04/16  11:04:27  PAGE 8   

 00000311            DB          '></td><td><table border=2 style="font-'
 00000337            DB          'size:15px ;font-family: terminal ;"><t'
 0000035D            DB          'r><th colspan=4>P1[23..16]</th></tr><s'
 00000383            DB          'cript>var str,i;str="";for(i=0;i<8;i++'
 000003A9            DB          '){str+="<tr><td bgcolor=orange>LED #"+'
 000003CF            DB          'i+"</td>";if(PORT1_23_16&(1<<i)){str+='
 000003F5            DB          '"<td bgcolor=blue>ON";}else {str+="<td'
 0000041B            DB          ' bgcolor=#cccccc>OFF";}str+="</td><td>'
 00000441            DB          '<a href=/t"+i+">Toggle</a></td></tr>";'
 00000467            DB          '}document.write(str) ;</script></table'
 0000048D            DB          '></td></tr></table>This is HTTP reques'
 000004B3            DB          't #<script>document.write(REQ)</script'
 000004D9            DB          '></BODY></HTML>',0x00
 000004E9          httpHeader:
 000004E9           BEGIN_INIT
 000004E9            DB          'HTTP/1.1 200 OK',0x0A,'Content-type: ',0x00
 00000508           END_INIT
 00000508          httpMimeTypeHTML:
 00000508           BEGIN_INIT
 00000508            DB          'text/html',0x0A,0x0A,0x00
 00000514           END_INIT
 00000514          httpMimeTypeScript:
 00000514           BEGIN_INIT
 00000514            DB          'text/plain',0x0A,0x0A,0x00
 00000521           END_INIT

*** DATA SEGMENT '?DT0?DEMO':
 00000000          indexPage:
 00000000           BEGIN_INIT
 00000000  00000000  DD          ??S_5
 00000004           END_INIT
 00000004          httpCounter:
 00000004           BEGIN_INIT
 00000004  00000000  DD          0x0
 00000008           END_INIT
 00000008          httpMethod:
 00000008           BEGIN_INIT
 00000008            DB          'GET /',0x00
 0000000E           END_INIT
 0000000E          myMacAddr:
 0000000E           BEGIN_INIT
 0000000E  00        DB          0x0
 0000000F  14        DB          0x14
 00000010  A5        DB          0xA5
 00000011  76        DB          0x76
 00000012  19        DB          0x19
 00000013  3F        DB          0x3F
 00000014           END_INIT
 00000014          myIpAddr:
 00000014           BEGIN_INIT
 00000014  C0        DB          0xC0
 00000015  A8        DB          0xA8
 00000016  01        DB          0x1
 00000017  3C        DB          0x3C
 00000018           END_INIT
 00000018          getRequest:
 00000018            DS          15
 00000027          dyna:
 00000027            DS          31



*** CODE SEGMENT '?PR?putConstString?A?DEMO':
  127: unsigned long putConstString(const char *s)
 00000000  E92D4030  STMDB       R13!,{R4-R5,LR}
 00000004  E1A05000  MOV         R5,R0 ; s
 00000008  ---- Variable 's' assigned to Register 'R5' ----
  128: {
 00000008            ; SCOPE-START
ARM COMPILER V2.53,  DEMO                                                                  08/04/16  11:04:27  PAGE 9   

  131:     ctr = 0;
 00000008  E3A04000  MOV         R4,#0x0
 0000000C  ---- Variable 'ctr' assigned to Register 'R4' ----
  132:     while(*s)
 0000000C  EA000004  B           L_1  ; Targ=0x24
 00000010          L_3:
  134:         ENC28J60_putByte(*s++);
 00000010  E1A00005  MOV         R0,R5 ; s
 00000014  E2805001  ADD         R5,R0,#0x0001 ; s
 00000018  E5D00000  LDRB        R0,[R0,#0x0] ; s
 0000001C  EBFFFFF7  BL          ENC28J60_putByte?A  ; Targ=0x0
  135:         ctr++;
 00000020  E2844001  ADD         R4,R4,#0x0001 ; ctr
  136:     }
 00000024          L_1:
 00000024  E1A00005  MOV         R0,R5 ; s
 00000028  E5D00000  LDRB        R0,[R0,#0x0] ; s
 0000002C  E3500000  CMP         R0,#0x0000
 00000030  1AFFFFF6  BNE         L_3  ; Targ=0x10
  137:     return(ctr);
 00000034  E1A00004  MOV         R0,R4 ; ctr
 00000038            ; SCOPE-END
  138: }
 00000038  E8BD0030  LDMIA       R13!,{R4-R5}
 0000003C  E8BD0008  LDMIA       R13!,{R3}
 00000040  E12FFF13  BX          R3
 00000044          ENDP ; 'putConstString?A'


*** CODE SEGMENT '?PR?putString?A?DEMO':
  143: unsigned long putString(char *s)
 00000000  E92D4030  STMDB       R13!,{R4-R5,LR}
 00000004  E1A05000  MOV         R5,R0 ; s
 00000008  ---- Variable 's' assigned to Register 'R5' ----
  144: {
 00000008            ; SCOPE-START
  147:     ctr = 0;
 00000008  E3A04000  MOV         R4,#0x0
 0000000C  ---- Variable 'ctr' assigned to Register 'R4' ----
  148:     while(*s)
 0000000C  EA000004  B           L_6  ; Targ=0x24
 00000010          L_8:
  150:         ENC28J60_putByte(*s++);
 00000010  E1A00005  MOV         R0,R5 ; s
 00000014  E2805001  ADD         R5,R0,#0x0001 ; s
 00000018  E5D00000  LDRB        R0,[R0,#0x0] ; s
 0000001C  EBFFFFF7  BL          ENC28J60_putByte?A  ; Targ=0x0
  151:         ctr++;
 00000020  E2844001  ADD         R4,R4,#0x0001 ; ctr
  152:     }
 00000024          L_6:
 00000024  E1A00005  MOV         R0,R5 ; s
 00000028  E5D00000  LDRB        R0,[R0,#0x0] ; s
 0000002C  E3500000  CMP         R0,#0x0000
 00000030  1AFFFFF6  BNE         L_8  ; Targ=0x10
  153:     return(ctr);
 00000034  E1A00004  MOV         R0,R4 ; ctr
 00000038            ; SCOPE-END
  154: }
 00000038  E8BD0030  LDMIA       R13!,{R4-R5}
 0000003C  E8BD0008  LDMIA       R13!,{R3}
 00000040  E12FFF13  BX          R3
 00000044          ENDP ; 'putString?A'


*** CODE SEGMENT '?PR?ENC28J60_userTCP?A?DEMO':
  167: unsigned long ENC28J60_userTCP(unsigned char *remoteHost, unsigned long remotePort, unsigned long localPort, unsi
             -gned long reqLength)
 00000000  E92D4070  STMDB       R13!,{R4-R6,LR}
 00000004  ---- Variable 'reqLength' assigned to Register 'R3' ----
ARM COMPILER V2.53,  DEMO                                                                  08/04/16  11:04:27  PAGE 10  

 00000004  ---- Variable 'localPort' assigned to Register 'R2' ----
 00000004  ---- Variable 'remotePort' assigned to Register 'R1' ----
 00000004  ---- Variable 'remoteHost' assigned to Register 'R0' ----
  168: {
 00000004            ; SCOPE-START
  175:     i = (unsigned long) remoteHost;
 00000004  E1A06000  MOV         R6,R0 ; remoteHost
 00000008  ---- Variable 'i' assigned to Register 'R6' ----
  176:     i = remotePort;
 00000008  E1A06001  MOV         R6,R1 ; remotePort
  177:     i = reqLength;
 0000000C  E1A06003  MOV         R6,R3 ; reqLength
  179:     len = 0;
 00000010  E3A00000  MOV         R0,#0x0
 00000014  E1A04000  MOV         R4,R0 ; len
 00000018  ---- Variable 'len' assigned to Register 'R4' ----
  180:     bitMask = 0;
 00000018  E1A05000  MOV         R5,R0 ; bitMask
 0000001C  ---- Variable 'bitMask' assigned to Register 'R5' ----
  182:     if (localPort != 80)            // I listen only to web request on port 80
 0000001C  E1A01002  MOV         R1,R2 ; localPort
 00000020  E3510050  CMP         R1,#0x0050 ; localPort
 00000024  0A000000  BEQ         L_17  ; Targ=0x2C
  183:         return(0) ;
 00000028  EA000095  B           L_12  ; Targ=0x284
  186:     for (i = 0; i < 10; i++)
 0000002C          L_17:
 0000002C  E1A06000  MOV         R6,R0 ; i
 00000030          L_16:
  187:         getRequest[i] = ENC28J60_getByte();
 00000030  EBFFFFF2  BL          ENC28J60_getByte?A  ; Targ=0x0
 00000034  E1A02006  MOV         R2,R6 ; i
 00000038  E5101000  LDR         R1,=getRequest ; getRequest
 0000003C  E7C10002  STRB        R0,[R1,+R2]
 00000040  E2866001  ADD         R6,R6,#0x0001 ; i
 00000044  E1A00006  MOV         R0,R6 ; i
 00000048  E350000A  CMP         R0,#0x000A ; i
 0000004C  3AFFFFF7  BCC         L_16  ; Targ=0x30
  188:     getRequest[i] = 0;
 00000050  E3A01000  MOV         R1,#0x0
 00000054  E5100000  LDR         R0,=getRequest + 0xA ; getRequest+10
 00000058  E5C01000  STRB        R1,[R0,#0x0] ; getRequest+10
  190:     if (memcmp(getRequest, httpMethod, 5))                      // only GET method is supported here
 0000005C  E5100000  LDR         R0,=getRequest ; getRequest
 00000060  E5101000  LDR         R1,=httpMethod ; httpMethod
 00000064  E3A02005  MOV         R2,#0x5
 00000068  EBFFFFE4  BL          memcmp?A  ; Targ=0x0
 0000006C  E3500000  CMP         R0,#0x0000 ; memcmp?A
 00000070  0A000001  BEQ         L_18  ; Targ=0x7C
  191:         return(0);
 00000074  E3A00000  MOV         R0,#0x0
 00000078  EA000081  B           L_12  ; Targ=0x284
 0000007C          L_18:
  193:     httpCounter++;                                              // one more request done
 0000007C  E5100000  LDR         R0,=httpCounter ; httpCounter
 00000080  E5901000  LDR         R1,[R0,#0x0] ; httpCounter
 00000084  E2811001  ADD         R1,R1,#0x0001
 00000088  E5801000  STR         R1,[R0,#0x0] ; httpCounter
  195:     if (getRequest[5] == 's')                                   // if request path name starts with s, store dynamic data in transmit buffer
 0000008C  E5100000  LDR         R0,=getRequest + 0x5 ; getRequest+5
 00000090  E5D00000  LDRB        R0,[R0,#0x0] ; getRequest+5
 00000094  E3500073  CMP         R0,#0x0073
 00000098  1A000049  BNE         L_19  ; Targ=0x1C4
  198:         len = putConstString(httpHeader);                       // HTTP header
 0000009C  E5100000  LDR         R0,=httpHeader ; httpHeader
 000000A0  EBFFFFD6  BL          putConstString?A  ; Targ=0x0
ARM COMPILER V2.53,  DEMO                                                                  08/04/16  11:04:27  PAGE 11  

 000000A4  E1A04000  MOV         R4,R0 ; len
  199:         len += putConstString(httpMimeTypeScript);          // with text MIME type
 000000A8  E5100000  LDR         R0,=httpMimeTypeScript ; httpMimeTypeScript
 000000AC  EBFFFFD3  BL          putConstString?A  ; Targ=0x0
 000000B0  E0844000  ADD         R4,R4,R0 ; len
  202:         IntToStr(0, dyna);
 000000B4  E5101000  LDR         R1,=dyna ; dyna
 000000B8  E3A00000  MOV         R0,#0x0
 000000BC  EBFFFFCF  BL          IntToStr?A  ; Targ=0x0
  203:         len += putConstString("var AN0=");
 000000C0  E3E00102  MVN         R0,#0x102 ; ??S_6
 000000C4  EBFFFFCD  BL          putConstString?A  ; Targ=0x0
 000000C8  E0844000  ADD         R4,R4,R0 ; len
  204:         len += putString(dyna);
 000000CC  E5100000  LDR         R0,=dyna ; dyna
 000000D0  EBFFFFCA  BL          putString?A  ; Targ=0x0
 000000D4  E0844000  ADD         R4,R4,R0 ; len
  205:         len += putConstString(";");
 000000D8  E3E00102  MVN         R0,#0x102 ; ??S_7
 000000DC  EBFFFFC7  BL          putConstString?A  ; Targ=0x0
 000000E0  E0844000  ADD         R4,R4,R0 ; len
  208:         IntToStr(0, dyna);
 000000E4  E5101000  LDR         R1,=dyna ; dyna
 000000E8  E3A00000  MOV         R0,#0x0
 000000EC  EBFFFFC3  BL          IntToStr?A  ; Targ=0x0
  209:         len += putConstString("var AN1=");
 000000F0  E3E00102  MVN         R0,#0x102 ; ??S_8
 000000F4  EBFFFFC1  BL          putConstString?A  ; Targ=0x0
 000000F8  E0844000  ADD         R4,R4,R0 ; len
  210:         len += putString(dyna);
 000000FC  E5100000  LDR         R0,=dyna ; dyna
 00000100  EBFFFFBE  BL          putString?A  ; Targ=0x0
 00000104  E0844000  ADD         R4,R4,R0 ; len
  211:         len += putConstString(";");
 00000108  E3E00102  MVN         R0,#0x102 ; ??S_7
 0000010C  EBFFFFBB  BL          putConstString?A  ; Targ=0x0
 00000110  E0844000  ADD         R4,R4,R0 ; len
  214:         len += putConstString("var PORT1_31_24=");
 00000114  E3E00102  MVN         R0,#0x102 ; ??S_9
 00000118  EBFFFFB8  BL          putConstString?A  ; Targ=0x0
 0000011C  E0844000  ADD         R4,R4,R0 ; len
  215:         IntToStr(((IOPIN1 >> 24) & 0xFF), dyna);
 00000120  E5100000  LDR         R0,=0xE0028010
 00000124  E5900000  LDR         R0,[R0,#0x0]
 00000128  E1A00C20  MOV         R0,R0,LSR #24
 0000012C  E20000FF  AND         R0,R0,#0x00FF
 00000130  E5101000  LDR         R1,=dyna ; dyna
 00000134  EBFFFFB1  BL          IntToStr?A  ; Targ=0x0
  216:         len += putString(dyna);
 00000138  E5100000  LDR         R0,=dyna ; dyna
 0000013C  EBFFFFAF  BL          putString?A  ; Targ=0x0
 00000140  E0844000  ADD         R4,R4,R0 ; len
  217:         len += putConstString(";");
 00000144  E3E00102  MVN         R0,#0x102 ; ??S_7
 00000148  EBFFFFAC  BL          putConstString?A  ; Targ=0x0
 0000014C  E0844000  ADD         R4,R4,R0 ; len
  220:         len += putConstString("var PORT1_23_16=");
 00000150  E3E00102  MVN         R0,#0x102 ; ??S_10
 00000154  EBFFFFA9  BL          putConstString?A  ; Targ=0x0
 00000158  E0844000  ADD         R4,R4,R0 ; len
  221:         IntToStr(((IOPIN1 >> 16) & 0xFF), dyna);
 0000015C  E5100000  LDR         R0,=0xE0028010
 00000160  E5900000  LDR         R0,[R0,#0x0]
 00000164  E1A00820  MOV         R0,R0,LSR #16
 00000168  E20000FF  AND         R0,R0,#0x00FF
 0000016C  E5101000  LDR         R1,=dyna ; dyna
ARM COMPILER V2.53,  DEMO                                                                  08/04/16  11:04:27  PAGE 12  

 00000170  EBFFFFA2  BL          IntToStr?A  ; Targ=0x0
  222:         len += putString(dyna);
 00000174  E5100000  LDR         R0,=dyna ; dyna
 00000178  EBFFFFA0  BL          putString?A  ; Targ=0x0
 0000017C  E0844000  ADD         R4,R4,R0 ; len
  223:         len += putConstString(";");
 00000180  E3E00102  MVN         R0,#0x102 ; ??S_7
 00000184  EBFFFF9D  BL          putConstString?A  ; Targ=0x0
 00000188  E0844000  ADD         R4,R4,R0 ; len
  226:         IntToStr(httpCounter, dyna);
 0000018C  E5100000  LDR         R0,=httpCounter ; httpCounter
 00000190  E5900000  LDR         R0,[R0,#0x0] ; httpCounter
 00000194  E5101000  LDR         R1,=dyna ; dyna
 00000198  EBFFFF98  BL          IntToStr?A  ; Targ=0x0
  227:         len += putConstString("var REQ=");
 0000019C  E3E00102  MVN         R0,#0x102 ; ??S_11
 000001A0  EBFFFF96  BL          putConstString?A  ; Targ=0x0
 000001A4  E0844000  ADD         R4,R4,R0 ; len
  228:         len += putString(dyna);
 000001A8  E5100000  LDR         R0,=dyna ; dyna
 000001AC  EBFFFF93  BL          putString?A  ; Targ=0x0
 000001B0  E0844000  ADD         R4,R4,R0 ; len
  229:         len += putConstString(";");
 000001B4  E3E00102  MVN         R0,#0x102 ; ??S_7
 000001B8  EBFFFF90  BL          putConstString?A  ; Targ=0x0
 000001BC  E0844000  ADD         R4,R4,R0 ; len
  230:     }
 000001C0  EA000021  B           L_20  ; Targ=0x24C
 000001C4          L_19:
  231:     else if (getRequest[5] == 't')                              // if request path name starts with t, toggle LED bit number that comes af
             -ter
 000001C4  E5100000  LDR         R0,=getRequest + 0x5 ; getRequest+5
 000001C8  E5D00000  LDRB        R0,[R0,#0x0] ; getRequest+5
 000001CC  E3500074  CMP         R0,#0x0074
 000001D0  1A00001D  BNE         L_20  ; Targ=0x24C
  233:         if (isdigit(getRequest[6]))                             // if 0 <= bit number <= 9, bits 8 & 9 does not exist but does not matter
 000001D4  E5100000  LDR         R0,=getRequest + 0x6 ; getRequest+6
 000001D8  E5D00000  LDRB        R0,[R0,#0x0] ; getRequest+6
 000001DC  EBFFFF87  BL          isdigit?A  ; Targ=0x0
 000001E0  E3500000  CMP         R0,#0x0000 ; isdigit?A
 000001E4  0A000018  BEQ         L_20  ; Targ=0x24C
  235:             bitMask = getRequest[6] - '0';                      // convert ASCII to integer
 000001E8  E5100000  LDR         R0,=getRequest + 0x6 ; getRequest+6
 000001EC  E5D00000  LDRB        R0,[R0,#0x0] ; getRequest+6
 000001F0  E1A05000  MOV         R5,R0
 000001F4  E2455030  SUB         R5,R5,#0x0030
  236:             bitMask = 1 << (bitMask + 16);                      // create bit mask
 000001F8  E1A00005  MOV         R0,R5 ; bitMask
 000001FC  E2800010  ADD         R0,R0,#0x0010 ; bitMask
 00000200  E3A05001  MOV         R5,#0x1
 00000204  E1A05015  MOV         R5,R5,LSL R0
  237:             if ((IOPIN1 & bitMask) != 0)                        // Toggled LED
 00000208  E5100000  LDR         R0,=0xE0028010
 0000020C  E5900000  LDR         R0,[R0,#0x0]
 00000210  E1A01005  MOV         R1,R5 ; bitMask
 00000214  E0000001  AND         R0,R0,R1 ; bitMask
 00000218  E3500000  CMP         R0,#0x0000
 0000021C  0A000005  BEQ         L_23  ; Targ=0x238
  238:                 IOCLR1 |= bitMask;
 00000220  E1A02005  MOV         R2,R5 ; bitMask
 00000224  E5100000  LDR         R0,=0xE002801C
 00000228  E5901000  LDR         R1,[R0,#0x0]
 0000022C  E1811002  ORR         R1,R1,R2 ; bitMask
 00000230  E5801000  STR         R1,[R0,#0x0]
 00000234  EA000004  B           L_20  ; Targ=0x24C
 00000238          L_23:
ARM COMPILER V2.53,  DEMO                                                                  08/04/16  11:04:27  PAGE 13  

  240:                 IOSET1 |= bitMask;
 00000238  E1A02005  MOV         R2,R5 ; bitMask
 0000023C  E5100000  LDR         R0,=0xE0028014
 00000240  E5901000  LDR         R1,[R0,#0x0]
 00000244  E1811002  ORR         R1,R1,R2 ; bitMask
 00000248  E5801000  STR         R1,[R0,#0x0]
  242:     }
 0000024C          L_20:
  244:     if (len == 0)                                                   // what do to by default
 0000024C  E1A00004  MOV         R0,R4 ; len
 00000250  E3500000  CMP         R0,#0x0000 ; len
 00000254  1A000009  BNE         L_25  ; Targ=0x280
  246:         len =  putConstString(httpHeader);                          // HTTP header
 00000258  E5100000  LDR         R0,=httpHeader ; httpHeader
 0000025C  EBFFFF67  BL          putConstString?A  ; Targ=0x0
 00000260  E1A04000  MOV         R4,R0 ; len
  247:         len += putConstString(httpMimeTypeHTML);                    // with HTML MIME type
 00000264  E5100000  LDR         R0,=httpMimeTypeHTML ; httpMimeTypeHTML
 00000268  EBFFFF64  BL          putConstString?A  ; Targ=0x0
 0000026C  E0844000  ADD         R4,R4,R0 ; len
  248:         len += putConstString(indexPage);                           // HTML page
 00000270  E5100000  LDR         R0,=indexPage ; indexPage
 00000274  E5900000  LDR         R0,[R0,#0x0] ; indexPage
 00000278  EBFFFF60  BL          putConstString?A  ; Targ=0x0
 0000027C  E0844000  ADD         R4,R4,R0 ; len
  249:     }
 00000280          L_25:
  251:     return (len);                   // return to the library with the number of bytes to transmit
 00000280  E1A00004  MOV         R0,R4 ; len
 00000284            ; SCOPE-END
  252: }
 00000284          L_12:
 00000284  E8BD0070  LDMIA       R13!,{R4-R6}
 00000288  E8BD0008  LDMIA       R13!,{R3}
 0000028C  E12FFF13  BX          R3
 00000290          ENDP ; 'ENC28J60_userTCP?A'


*** CODE SEGMENT '?PR?ENC28J60_userUDP?A?DEMO':
  264: unsigned long ENC28J60_userUDP(unsigned char *remoteHost, unsigned long remotePort, unsigned long destPort, unsig
             -ned long reqLength)
 00000000  E92D40F0  STMDB       R13!,{R4-R7,LR}
 00000004  E1A05003  MOV         R5,R3 ; reqLength
 00000008  ---- Variable 'reqLength' assigned to Register 'R5' ----
 00000008  E1A04002  MOV         R4,R2 ; destPort
 0000000C  ---- Variable 'destPort' assigned to Register 'R4' ----
 0000000C  E1A06001  MOV         R6,R1 ; remotePort
 00000010  ---- Variable 'remotePort' assigned to Register 'R6' ----
 00000010  E1A07000  MOV         R7,R0 ; remoteHost
 00000014  ---- Variable 'remoteHost' assigned to Register 'R7' ----
  265: {
 00000014            ; SCOPE-START
  272:     ByteToStr(remoteHost[0], dyna);             // first IP address byte
 00000014  E1A00007  MOV         R0,R7 ; remoteHost
 00000018  E5D00000  LDRB        R0,[R0,#0x0] ; remoteHost
 0000001C  E5101000  LDR         R1,=dyna ; dyna
 00000020  EBFFFFF6  BL          ByteToStr?A  ; Targ=0x0
  273:     dyna[3] = '.';
 00000024  E3A0102E  MOV         R1,#0x2E
 00000028  E5100000  LDR         R0,=dyna + 0x3 ; dyna+3
 0000002C  E5C01000  STRB        R1,[R0,#0x0] ; dyna+3
  274:     ByteToStr(remoteHost[1], dyna + 4);     // second
 00000030  E1A00007  MOV         R0,R7 ; remoteHost
 00000034  E5D00001  LDRB        R0,[R0,#0x1]
 00000038  E5101000  LDR         R1,=dyna + 0x4 ; dyna+4
 0000003C  EBFFFFEF  BL          ByteToStr?A  ; Targ=0x0
  275:     dyna[7] = '.';
 00000040  E3A0102E  MOV         R1,#0x2E
ARM COMPILER V2.53,  DEMO                                                                  08/04/16  11:04:27  PAGE 14  

 00000044  E5100000  LDR         R0,=dyna + 0x7 ; dyna+7
 00000048  E5C01000  STRB        R1,[R0,#0x0] ; dyna+7
  276:     ByteToStr(remoteHost[2], dyna + 8);     // third
 0000004C  E1A00007  MOV         R0,R7 ; remoteHost
 00000050  E5D00002  LDRB        R0,[R0,#0x2]
 00000054  E5101000  LDR         R1,=dyna + 0x8 ; dyna+8
 00000058  EBFFFFE8  BL          ByteToStr?A  ; Targ=0x0
  277:     dyna[11] = '.';
 0000005C  E3A0102E  MOV         R1,#0x2E
 00000060  E5100000  LDR         R0,=dyna + 0xB ; dyna+11
 00000064  E5C01000  STRB        R1,[R0,#0x0] ; dyna+11
  278:     ByteToStr(remoteHost[3], dyna + 12);    // fourth
 00000068  E1A00007  MOV         R0,R7 ; remoteHost
 0000006C  E5D00003  LDRB        R0,[R0,#0x3]
 00000070  E5101000  LDR         R1,=dyna + 0xC ; dyna+12
 00000074  EBFFFFE1  BL          ByteToStr?A  ; Targ=0x0
  280:     dyna[15] = ':';                                             // add separator
 00000078  E3A0103A  MOV         R1,#0x3A
 0000007C  E5100000  LDR         R0,=dyna + 0xF ; dyna+15
 00000080  E5C01000  STRB        R1,[R0,#0x0] ; dyna+15
  283:     IntToStr(remotePort, dyna + 16);
 00000084  E1A00006  MOV         R0,R6 ; remotePort
 00000088  E5101000  LDR         R1,=dyna + 0x10 ; dyna+16
 0000008C  EBFFFFDB  BL          IntToStr?A  ; Targ=0x0
  284:     dyna[22] = '[';
 00000090  E3A0105B  MOV         R1,#0x5B
 00000094  E5100000  LDR         R0,=dyna + 0x16 ; dyna+22
 00000098  E5C01000  STRB        R1,[R0,#0x0] ; dyna+22
  285:     IntToStr(destPort, dyna + 23);
 0000009C  E1A00004  MOV         R0,R4 ; destPort
 000000A0  E5101000  LDR         R1,=dyna + 0x17 ; dyna+23
 000000A4  EBFFFFD5  BL          IntToStr?A  ; Targ=0x0
  286:     dyna[29] = ']';
 000000A8  E3A0105D  MOV         R1,#0x5D
 000000AC  E5100000  LDR         R0,=dyna + 0x1D ; dyna+29
 000000B0  E5C01000  STRB        R1,[R0,#0x0] ; dyna+29
  287:     dyna[30] = 0;
 000000B4  E3A01000  MOV         R1,#0x0
 000000B8  E5100000  LDR         R0,=dyna + 0x1E ; dyna+30
 000000BC  E5C01000  STRB        R1,[R0,#0x0] ; dyna+30
  290:     len = 30 + reqLength;
 000000C0  E1A04005  MOV         R4,R5 ; reqLength
 000000C4  E284401E  ADD         R4,R4,#0x001E ; reqLength
 000000C8  ---- Variable 'len' assigned to Register 'R4' ----
  293:     ptr = dyna;
 000000C8  E5106000  LDR         R6,=dyna ; dyna
 000000CC  ---- Variable 'ptr' assigned to Register 'R6' ----
  294:     while (*ptr)
 000000CC  EA000003  B           L_26  ; Targ=0xE0
 000000D0          L_28:
 000000D0  E1A00006  MOV         R0,R6 ; ptr
 000000D4  E2806001  ADD         R6,R0,#0x0001 ; ptr
 000000D8  E5D00000  LDRB        R0,[R0,#0x0] ; ptr
 000000DC  EBFFFFC7  BL          ENC28J60_putByte?A  ; Targ=0x0
 000000E0          L_26:
 000000E0  E1A00006  MOV         R0,R6 ; ptr
 000000E4  E5D00000  LDRB        R0,[R0,#0x0] ; ptr
 000000E8  E3500000  CMP         R0,#0x0000
 000000EC  1AFFFFF7  BNE         L_28  ; Targ=0xD0
  298:     while (reqLength--)
 000000F0  EA000006  B           L_30  ; Targ=0x110
 000000F4          L_32:
 000000F4  EBFFFFC1  BL          ENC28J60_getByte?A  ; Targ=0x0
 000000F8  E1A00C00  MOV         R0,R0,LSL #24 ; ENC28J60_getByte?A
 000000FC  E1A00C20  MOV         R0,R0,LSR #24
 00000100  EBFFFFBE  BL          toupper?A  ; Targ=0x0
ARM COMPILER V2.53,  DEMO                                                                  08/04/16  11:04:27  PAGE 15  

 00000104  E1A00C00  MOV         R0,R0,LSL #24 ; toupper?A
 00000108  E1A00C20  MOV         R0,R0,LSR #24
 0000010C  EBFFFFBB  BL          ENC28J60_putByte?A  ; Targ=0x0
 00000110          L_30:
 00000110  E1A00005  MOV         R0,R5 ; reqLength
 00000114  E2405001  SUB         R5,R0,#0x0001 ; reqLength
 00000118  E3500000  CMP         R0,#0x0000 ; reqLength
 0000011C  1AFFFFF4  BNE         L_32  ; Targ=0xF4
  301:     return (len);       // back to the library with the length of the UDP reply
 00000120  E1A00004  MOV         R0,R4 ; len
 00000124            ; SCOPE-END
  302: }
 00000124  E8BD00F0  LDMIA       R13!,{R4-R7}
 00000128  E8BD0008  LDMIA       R13!,{R3}
 0000012C  E12FFF13  BX          R3
 00000130          ENDP ; 'ENC28J60_userUDP?A'


*** CODE SEGMENT '?PR?main?DEMO':
  310: int main (void)
 00000000  E92D4000  STMDB       R13!,{LR}
  312:     PINSEL0 = 0;
 00000004  E3A01000  MOV         R1,#0x0
 00000008  E5100000  LDR         R0,=0xE002C000
 0000000C  E5801000  STR         R1,[R0,#0x0]
  313:     PINSEL1 = 0;
 00000010  E5100000  LDR         R0,=0xE002C004
 00000014  E5801000  STR         R1,[R0,#0x0]
  314:     PINSEL2 &= 0x0000000C;
 00000018  E5100000  LDR         R0,=0xE002C014
 0000001C  E5901000  LDR         R1,[R0,#0x0]
 00000020  E201100C  AND         R1,R1,#0x000C
 00000024  E5801000  STR         R1,[R0,#0x0]
  315:     delay_Nx10cyc(599999);          // Delay 0,1s
 00000028  E5100000  LDR         R0,=0x927BF
 0000002C  EBFFFFF3  BL          delay_Nx10cyc?A  ; Targ=0x0
  317:     IODIR1 &= 0x00FFFFFF;               // Set P1[31..24] as inputs for buttons
 00000030  E5100000  LDR         R0,=0xE0028018
 00000034  E5901000  LDR         R1,[R0,#0x0]
 00000038  E3C114FF  BIC         R1,R1,#0xFF000000
 0000003C  E5801000  STR         R1,[R0,#0x0]
  318:     IODIR1 |= 0x00FF0000;               // Set P1[23..16] as outputs for LED
 00000040  E5100000  LDR         R0,=0xE0028018
 00000044  E5901000  LDR         R1,[R0,#0x0]
 00000048  E38118FF  ORR         R1,R1,#0xFF0000
 0000004C  E5801000  STR         R1,[R0,#0x0]
  319:     IOCLR1 |= 0x00FF0000;               // Turn off LEDs
 00000050  E5100000  LDR         R0,=0xE002801C
 00000054  E5901000  LDR         R1,[R0,#0x0]
 00000058  E38118FF  ORR         R1,R1,#0xFF0000
 0000005C  E5801000  STR         R1,[R0,#0x0]
  322:     ENC28J60_Init(&IOPIN0, 13, &IOPIN0, 12, myMacAddr, myIpAddr, ENC28J60_FULLDUPLEX) ;
 00000060  E3A00001  MOV         R0,#0x1
 00000064  E92D0001  STMDB       R13!,{R0}
 00000068  E5100000  LDR         R0,=myIpAddr ; myIpAddr
 0000006C  E92D0001  STMDB       R13!,{R0}
 00000070  E5100000  LDR         R0,=myMacAddr ; myMacAddr
 00000074  E92D0001  STMDB       R13!,{R0}
 00000078  E5100000  LDR         R0,=0xE0028000
 0000007C  E5102000  LDR         R2,=0xE0028000
 00000080  E3A0100D  MOV         R1,#0xD
 00000084  E3A0300C  MOV         R3,#0xC
 00000088  EBFFFFDC  BL          ENC28J60_Init?A  ; Targ=0x0
 0000008C  E28DD00C  ADD         R13,R13,#0x000C
  324:     while (1)
 00000090          L_37:
  326:         ENC28J60_doPacket();        // process incoming Ethernet packets
 00000090  EBFFFFDA  BL          ENC28J60_doPacket?A  ; Targ=0x0
ARM COMPILER V2.53,  DEMO                                                                  08/04/16  11:04:27  PAGE 16  

  332:     }
 00000094  EAFFFFFD  B           L_37  ; Targ=0x90
  333: }
 00000098  E8BD0008  LDMIA       R13!,{R3}
 0000009C  E12FFF13  BX          R3
 000000A0          ENDP ; 'main'

ARM COMPILER V2.53,  DEMO                                                                  08/04/16  11:04:27  PAGE 17  

Name                                    Class    Space Type   Offset   Size
---------------------------------------------------------------------------

size_t . . . . . . . . . . . . . . . .  type           uint    -----   4
memcmp?A . . . . . . . . . . . . . . .  extern   code  funct  000000H  
ENC28J60_Init?A. . . . . . . . . . . .  extern   code  funct  000000H  
ENC28J60_doPacket?A. . . . . . . . . .  extern   code  funct  000000H  
ENC28J60_putByte?A . . . . . . . . . .  extern   code  funct  000000H  
ENC28J60_getByte?A . . . . . . . . . .  extern   code  funct  000000H  
isdigit?A. . . . . . . . . . . . . . .  extern   code  funct  000000H  
toupper?A. . . . . . . . . . . . . . .  extern   code  funct  000000H  
ByteToStr?A. . . . . . . . . . . . . .  extern   code  funct  000000H  
IntToStr?A . . . . . . . . . . . . . .  extern   code  funct  000000H  
delay_Nx10cyc?A. . . . . . . . . . . .  extern   code  funct  000000H  
httpHeader . . . . . . . . . . . . . .  public   const array  0004E9H  31
httpMimeTypeHTML . . . . . . . . . . .  public   const array  000508H  12
httpMimeTypeScript . . . . . . . . . .  public   const array  000514H  13
ENC28J60_userUDP?A . . . . . . . . . .  public   code  funct  000000H  
  remoteHost . . . . . . . . . . . . .  *reg*          ptr    -----    4
  remotePort . . . . . . . . . . . . .  *reg*          ulong  -----    4
  destPort . . . . . . . . . . . . . .  *reg*          ulong  -----    4
  reqLength. . . . . . . . . . . . . .  *reg*          ulong  -----    4
  len. . . . . . . . . . . . . . . . .  *reg*          ulong  -----    4
  ptr. . . . . . . . . . . . . . . . .  *reg*          ptr    -----    4
ENC28J60_userTCP?A . . . . . . . . . .  public   code  funct  000000H  
  remoteHost . . . . . . . . . . . . .  *reg*          ptr    -----    4
  remotePort . . . . . . . . . . . . .  *reg*          ulong  -----    4
  localPort. . . . . . . . . . . . . .  *reg*          ulong  -----    4
  reqLength. . . . . . . . . . . . . .  *reg*          ulong  -----    4
  len. . . . . . . . . . . . . . . . .  *reg*          ulong  -----    4
  i. . . . . . . . . . . . . . . . . .  *reg*          ulong  -----    4
  bitMask. . . . . . . . . . . . . . .  *reg*          ulong  -----    4
putConstString?A . . . . . . . . . . .  public   code  funct  000000H  
  s. . . . . . . . . . . . . . . . . .  *reg*          ptr    -----    4
  ctr. . . . . . . . . . . . . . . . .  *reg*          ulong  -----    4
putString?A. . . . . . . . . . . . . .  public   code  funct  000000H  
  s. . . . . . . . . . . . . . . . . .  *reg*          ptr    -----    4
  ctr. . . . . . . . . . . . . . . . .  *reg*          ulong  -----    4
main . . . . . . . . . . . . . . . . .  public   code  funct  000000H  
httpMethod . . . . . . . . . . . . . .  public   data  array  000008H  6
indexPage. . . . . . . . . . . . . . .  public   data  ptr    000000H  4
myMacAddr. . . . . . . . . . . . . . .  public   data  array  00000EH  6
myIpAddr . . . . . . . . . . . . . . .  public   data  array  000014H  4
getRequest . . . . . . . . . . . . . .  public   data  array  000018H  15
dyna . . . . . . . . . . . . . . . . .  public   data  array  000027H  31
httpCounter. . . . . . . . . . . . . .  public   data  ulong  000004H  4


Module Information          Static
----------------------------------
  code size            =    ------
  data size            =        70
  const size           =      1313
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
