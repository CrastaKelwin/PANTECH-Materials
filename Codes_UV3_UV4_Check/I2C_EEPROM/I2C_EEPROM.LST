ARM COMPILER V2.53,  I2C_EEPROM                                                            20/07/11  17:01:29  PAGE 1   


ARM COMPILER V2.53, COMPILATION OF MODULE I2C_EEPROM
OBJECT MODULE PLACED IN I2C_EEPROM.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe I2C_EEPROM.c THUMB DEBUG TABS(4) 

stmt  level    source

    1          /***********************************************************************************************
    2          ;|||||||||||||||||||||||||||||||||||||||||||||||;
    3          ;|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  Important Note ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|;
    4          ;|~                                                                                         ~|;
    5          ;|~     This part of the software coding is the sole property of the company!               ~|;
    6          ;|~     Any unauthorized re-usage or transformation of this code is prohibited.             ~|;
    7          ;|~                                                                                         ~|;
    8          ;|~             © Pantech Solutions Pvt Ltd.  All rights Reserved                           ~|;
    9          ;|~                                                                                         ~|;
   10          ;|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|;
   11          ;|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|;
   12          ;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||;
   13          ;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||;
   14          ;|  Title       : I2C_EEPROM_Interface.c                                                     |;
   15          ;|  Status      : Completed...                                                               |;
   16          ;|  Features    : LPC21xx I2C                                                                |;
   17          ;|  Description : I2C Used      :   P0.2 and P0.3 (I2C0 of ARM7TDMI)                         |;
   18          ;|                Oscillator    :   12MHz                                                    |;
   19          ;|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||;
   20          ***********************************************************************************************/
   21          
   22          /************************************   Directives   *******************************************/
   23          
   24          #include <LPC214x.h>
   25          #include <stdio.h>
   26          #include <string.h>
   27          #include "UART.h"
   28          
   29          //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   30          /************************************    Macros     *******************************************/
   31          #define SW23        1<<24
   32          #define SW24        1<<25
   33          #define SW25        1<<26
   34          
   35          #define MAX     10
   36          #define AA      2
   37          #define SI      3
   38          #define STO     4
   39          #define STA     5
   40          #define I2EN    6
   41          //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   42          /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<   Declarations  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
   43          //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   44          void I2C_ISR(void)__irq;
   45          
   46          void Wait (unsigned int);
   47          void I2C_Init (void);
   48          
   49          int I2C_Start (unsigned int Slave_Addr);
   50          
   51          
   52          char ReLoad[MAX]    =   {0x00/*Address Low Bits*/,0x00/*Address Low Bits*/,'A','R','M','7','2','1','x','x'};
   53          char Buff[MAX]      =   {0x00/*Address Low Bits*/,0x00/*Address Low Bits*/,'A','R','M','7','2','1','x','x'};
   54          
   55          unsigned char Rec[MAX]  =   {"NO-DATA!"};
   56          unsigned char index     =   0;
   57          unsigned char flag = 0, ii, Ready=0;
   58          unsigned char Erase = 0;
   59          
ARM COMPILER V2.53,  I2C_EEPROM                                                            20/07/11  17:01:29  PAGE 2   

   60          //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   61          //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   62          
   63          void Delay(void)
   64          {
   65   1          unsigned int i,j;
   66   1          
   67   1          for(i=0;i<150;i++)
   68   1              for(j=0;j<900;j++);
   69   1      }
   70          
   71          void Wait (unsigned int Delay)
   72          {
   73   1          while(Delay--);
   74   1      }
   75          
   76          void I2C_Init (void)
   77          {
   78   1          PINSEL0 =   0x00000055;         // P0.3 - SDA0 and P0.2 - SCL0 
   79   1          I2C0SCLH    =   150;            // 50%duty cycle .....   
   80   1          I2C0SCLL    =   150;            // I2C Frequency ->100 KHz for PCLK = 30MHz 
   81   1          I2C0CONSET  =   1 << I2EN;      // Enable I2C 0 
   82   1      
   83   1      
   84   1      }
   85          
   86          int I2C_Start (unsigned int Slave_Addr)
   87          {
   88   1          I2C0CONCLR  =   1 << STO;
   89   1          I2C0CONSET  =   1 << AA;
   90   1      
   91   1          I2C0CONSET  =   1 << STA;
   92   1      
   93   1          return 0;
   94   1      }
*** WARNING C47 IN LINE 86 OF I2C_EEPROM.C: 'Slave_Addr': unreferenced parameter
   95          
   96          //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<   Main Function  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   97          
   98          
   99          int main()
  100          {
  101   1          unsigned int i;
  102   1          VPBDIV  =   0x02;
  103   1          PINSEL0 =   0x00000055;         // P0.3 - SDA0 and P0.2 - SCL0 
  104   1          PINSEL2 =   0xFFFFFFF3;
  105   1      
  106   1          IO1DIR  =   0x00 << SW23;
  107   1      
  108   1          UART0_Init (9600);
  109   1      
  110   1          VICIntSelect    = 0<<9;
  111   1          VICVectCntl0    = 0x020 | 9 ;
  112   1          VICVectAddr0    = (unsigned long)I2C_ISR;   //Select Vector Slot for I2C0
  113   1          VICIntEnable    = 1<<9;
  114   1      
  115   1          
  116   1          /*  Before the master transmitter mode
  117   1              can be entered, the I2CONSET register must be initialized
  118   1          */
  119   1      
  120   1      
  121   1          I2C_Init();
  122   1          //UART0_PutS ("[2J\0");                                     // Clear Screen
  123   1      
  124   1          UART0_PutS ("********* ARM Slicker LPc2148 I2C EEPROM Demo **********\n\n\r");
ARM COMPILER V2.53,  I2C_EEPROM                                                            20/07/11  17:01:29  PAGE 3   

  125   1          UART0_PutS (">>> Connect I2C Add-On Card to J11 on ARM Tyro Board .. \n\n\r");
  126   1          UART0_PutS ("[~] Turn SW23 ON to Write default data to EEPROM! \n\r");
  127   1          UART0_PutS ("[~] Turn SW24 ON to Read and Display data from EEPROM! \n\r");
  128   1          UART0_PutS ("[~] Turn SW25 ON to Erase data from EEPROM \n\r");
  129   1          
  130   1      
  131   1          while (1)
  132   1          {
  133   2              if ((IOPIN1 & SW23) == 0)                   /*...To Load the Default Data to the EEPROM ...*/
  134   2              {
  135   3                  ii = 0;
  136   3                  while (ii < MAX)                        //Re-load Default Data to Buff
  137   3                  {
  138   4                      Buff [ii]   =   ReLoad [ii];
  139   4                      ii++;
  140   4                  }
  141   3                  Wait (5000);            
  142   3                  flag    =   'W';
  143   3                  I2C_Start (0x70);
  144   3                  Erase = 0;
  145   3                  for (i=0;i<30;i++)  Wait(10000);
  146   3          
  147   3                  I2C0CONCLR  =   1 << SI;
  148   3                  while (!(IOPIN1 & SW23));
  149   3                  Wait (5000);Wait (5000);
  150   3              }   
  151   2              else if ((IOPIN1 & SW24) == 0)              /*..To Read the Data Stored in the EEPROM...*/
  152   2              {
  153   3                  flag    =   'R';
  154   3                  I2C_Start (0x70);
  155   3          
  156   3                  for (i=0;i<30;i++)  Wait(10000);
  157   3          
  158   3                  I2C0CONCLR  =   1 << SI;
  159   3      
  160   3                  while (Ready == 'F');                           //Ready = FALSE
  161   3      
  162   3                  if (Ready == 'T')                       //Check if Ready = TRUE
  163   3                  {
  164   4                      ii=0;
  165   4                      UART0_PutS ("\n\r The Read Data are: \t");
  166   4                      while (ii<MAX)
  167   4                      {
  168   5                          //U0THR =   '\n';
  169   5                          Wait (1000);
  170   5                          U0THR   =   Rec[ii];
  171   5                          Wait (1000);
  172   5                          ii++;
  173   5                      }
  174   4                      UART0_PutC ('\n');
  175   4                      Wait (1000);
  176   4                      Ready   =   'F';
  177   4                  }
  178   3                  while (!(IOPIN1 & SW24));
  179   3                  Wait (5000);Wait (5000);Wait (5000);Wait (5000);
  180   3              }
  181   2      
  182   2              if ((IOPIN1 & SW25) == 0)                       /*To Erase the Content in EEPROM*/
  183   2              {
  184   3                  ii = 2;
  185   3                  while (ii < MAX)
  186   3                  {
  187   4                      Buff[ii]    =   0xFF;                   //Load 0xFF to EEPROM
  188   4                      ii++;
  189   4                  }
  190   3                  flag    =   'W';
ARM COMPILER V2.53,  I2C_EEPROM                                                            20/07/11  17:01:29  PAGE 4   

  191   3                  Erase = 1;
  192   3                  I2C_Start (0x70);
  193   3          
  194   3                  for (i=0;i<30;i++)  Wait(10000);
  195   3          
  196   3                  I2C0CONCLR  =   1 << SI;    
  197   3      
  198   3                  while (!(IOPIN1 & SW25));
  199   3                  Wait (5000);Wait (5000);Wait (5000);Wait (5000);
  200   3              }
  201   2          }        
  202   1      
  203   1      }
  204          
  205          void I2C_ISR(void) __irq
  206          {
  207   1          if (I2C0CONSET & 0x08)
  208   1          {
  209   2              
  210   2      
  211   2              switch (I2C0STAT)
  212   2              {
  213   3                  case (0x08) :/*... A START condition has been Transmitted...*/  
  214   3      
  215   3                                  if (flag == 'W')
  216   3                                  {
  217   4                                      I2C0CONCLR  =   1 << STO;
  218   4                                      I2C0CONCLR  =   1 << STA;   //Clear START Bit
  219   4                                      I2C0DAT     =   0xA0;       //Slave Addr + W  1010 p2 p1 p0 w
  220   4                                      I2C0CONCLR  =   1 << SI;
  221   4                                      
  222   4                                  }
  223   3                                  else if (flag == 'R')
  224   3                                  {
  225   4                                      //I2C0CONCLR    =   1 << STO;
  226   4                                      I2C0DAT     =   0xA0;       //Slave Addr + R  1010 p2 p1 p0 r   
  227   4                                      I2C_Start (0xA1);
  228   4                                      I2C0CONCLR  =   1 << SI;
  229   4                                      
  230   4                                  }
  231   3                                  index   =   0;
  232   3                                  break;
  233   3          
  234   3                  case (0x10) :   /*...A repeated START condition has been Transmitted...*/
  235   3      
  236   3                                  I2C0CONCLR  =   1 << STA;   
  237   3                                  if (flag == 'W')
  238   3                                      I2C0DAT =   0xA0;       //Slave Addr + W  1010 p2 p1 p0 w
  239   3                                  else if (flag == 'R')
  240   3                                  {
  241   4                                      I2C0CONCLR  =   1 << STA;
  242   4                                      I2C0CONCLR  =   1 << STO;   
  243   4                                      I2C0DAT     =   0xA1;       //Slave Addr + R  1010 p2 p1 p0 r   
  244   4                                      I2C0CONCLR  =   1 << SI;
  245   4                                      index = 0;
  246   4                                  }
  247   3                                  
  248   3                                  break;
  249   3          
  250   3                  case (0x18) :   /*....SLA+W has been transmitted; ACK has been received....*/
  251   3      
  252   3                                  I2C0CONCLR  =   0x20;       //Clear START Bit
  253   3                                  I2C0CONCLR  =   0x38;       //Clear all flags (STA, STO, SI)
  254   3                                  I2C0DAT     =   Buff[index];
  255   3                                  index++;
  256   3                                  
ARM COMPILER V2.53,  I2C_EEPROM                                                            20/07/11  17:01:29  PAGE 5   

  257   3                                  break;
  258   3          
  259   3                  case (0x20) :   /*...SLA+W has been transmitted; NOT ACK has been received....*/
  260   3      
  261   3                                  I2C0CONCLR  =   0x20;       //Clear START Bit
  262   3                                  I2C0CONCLR  =   0x38;       //Clear all flags (STA, STO, SI)
  263   3                                  I2C0DAT     =   Buff[index];
  264   3                                  index++;                        
  265   3                                  break;
  266   3          
  267   3                  case (0x28) :   /*...Data byte in I2DAT has been transmitted; ACK has been received....*/
  268   3      
  269   3                                  if (index < MAX)                // Place all the contents of Buff[] in I2C0DAT
  270   3                                  {
  271   4                                      if (flag == 'W')
  272   4                                      {
  273   5                                          I2C0DAT     =   Buff[index];
  274   5                                          I2C0CONCLR  =   0x20;       //Clear START Bit
  275   5                                          I2C0CONCLR  =   0x38;       //Clear all flags (STA, STO, SI)
  276   5                                      
  277   5                                      }
  278   4                                      else if ((index > 1) && flag == 'R')    //Generate a Repeated Start to jump to MST/REC Mode
  279   4                                      {
  280   5                                          I2C0CONCLR  =   0x18;
  281   5                                          I2C0CONSET  =   1 << STA;
  282   5                                          
  283   5                                      }
  284   4                                      else                            // Send Upper Nibble of Adress to Read the Data... 
  285   4                                      {
  286   5                                          I2C0DAT     =   Buff[index];
  287   5                                          I2C0CONCLR  =   0x20;       //Clear START Bit
  288   5                                          I2C0CONCLR  =   0x38;       //Clear all flags (STA, STO, SI)
  289   5                                          
  290   5                                      }
  291   4                                              
  292   4                                      index++;
  293   4                                  }
  294   3                                  else                                //Stop Transmission to EEPROM.... Data Count Reset..
  295   3                                  {
  296   4                                      index = 0;
  297   4                                      flag = 'R';
  298   4                                      I2C0CONSET  =   1 << STO;       //Send STOP Bit
  299   4                                      if (Erase == 1)
  300   4                                      {
  301   5                                          UART0_PutS ("\n\r Memory Erase Successfull.....!\n");
  302   5                                      }
  303   4                                      else
  304   4                                      {
  305   5                                          UART0_PutS ("\n\r Data Successfully Written on Memory!\n");
  306   5                                      }
  307   4                                      
  308   4                                      I2C0CONCLR  =   1 << STA;
  309   4                                      I2C0CONCLR  =   1 << SI;
  310   4                                  }
  311   3                                  break;
  312   3          
  313   3                  case (0x30) :   /*... Data byte in I2DAT has been transmitted; NOT ACK has been received ...*/
  314   3      
  315   3                                  I2C0CONCLR  =   0x20;       //Clear START Bit
  316   3                                  if (index < MAX)
  317   3                                  {
  318   4                                      if (flag == 'W')
  319   4                                      {
  320   5                                          I2C0DAT     =   Buff[index];
  321   5                                      
  322   5                                      }
ARM COMPILER V2.53,  I2C_EEPROM                                                            20/07/11  17:01:29  PAGE 6   

  323   4                                                                  
  324   4                                      index++;
  325   4                                  }
  326   3                                  else
  327   3                                  {
  328   4                                      index = 0;
  329   4                                      flag = 0;
  330   4                                      I2C0CONSET  =   0x10;       //Send STOP Bit
  331   4                                      I2C0CONCLR  =   1 << SI;
  332   4                                      
  333   4                                  }
  334   3                                  break;
  335   3          
  336   3                  case (0x38) :   /*... Arbitration lost in SLA+R/W or Data bytes ....*/
  337   3      
  338   3                                  I2C0CONSET  =   0x20;
  339   3                                  break;
  340   3      
  341   3                  case (0x40) :   /*... SLA+R has been transmitted; ACK has been received.*/
  342   3      
  343   3                                  I2C0CONSET  =   1 << AA;
  344   3                                  I2C0CONCLR  =   1 << STA;
  345   3                                  I2C0CONCLR  =   1 << STO;
  346   3                                  I2C0CONCLR  =   1 << SI;
  347   3                                  break;
  348   3      
  349   3                  case (0x48) :   /*...SLA+R has been transmitted; NOT ACK has been received ...*/
  350   3      
  351   3                                  I2C0CONSET  =   1 << STA;       //Repeated Start
  352   3                                  break;
  353   3      
  354   3                  case (0x50) :   /*... Data byte has been received; ACK has been returned ....*/
  355   3      
  356   3                                  I2C0CONSET  =   1 << AA;    
  357   3                                  if (index < MAX)
  358   3                                  {
  359   4                                      Rec [index] =   I2C0DAT;
  360   4                                      index++;
  361   4                                  
  362   4                                  }
  363   3                                  else
  364   3                                  {
  365   4                                      I2C0CONSET  =   1 << STO;
  366   4                                      I2C0CONCLR  =   1 << SI;
  367   4                                      index = 0;
  368   4                                      Ready   =   'T';            //Make Ready TRUE after Reading is over!
  369   4                                  }
  370   3                                  break;
  371   3      
  372   3                  case (0x58) :   /*... Data byte has been received; NOT ACK has been returned ....*/
  373   3                  
  374   3                                  Rec [index] =   I2C0DAT;
  375   3                                  I2C0CONCLR  =   1 << STA;
  376   3                                  I2C0CONCLR  =   1 << STO;
  377   3                                  break;
  378   3                                  
  379   3              }
  380   2          }
  381   1          I2C0CONCLR  =   1 << SI;
  382   1          VICVectAddr =   0x00;
  383   1      }
  384          
  385          
ARM COMPILER V2.53,  I2C_EEPROM                                                            20/07/11  17:01:29  PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (UART0_Init?T)
 EXTERN CODE16 (UART0_PutC?T)
 EXTERN CODE16 (UART0_PutS?T)
 EXTERN CODE32 (UART0_PutS?A)
 EXTERN NUMBER (__startup)



*** PUBLICS:
 PUBLIC         I2C_ISR?A
 PUBLIC         Wait?T
 PUBLIC         I2C_Init?T
 PUBLIC         I2C_Start?T
 PUBLIC         I2C_Start?A
 PUBLIC         Delay?T
 PUBLIC         main
 PUBLIC         ReLoad
 PUBLIC         Buff
 PUBLIC         Rec
 PUBLIC         index
 PUBLIC         flag
 PUBLIC         ii
 PUBLIC         Ready
 PUBLIC         Erase



*** DATA SEGMENT '?CON?I2C_EEPROM':
 00000000          ??S_9:
 00000000            DB          0x0A,0x0D,' Data Successfully Written o'
 0000001E            DB          'n Memory!',0x0A,0x00
 00000029          ??S_8:
 00000029            DB          0x0A,0x0D,' Memory Erase Successfull...'
 00000047            DB          '..!',0x0A,0x00
 0000004C          ??S_7:
 0000004C            DB          0x0A,0x0D,' The Read Data are: ',0x09,0x00
 00000064          ??S_6:
 00000064            DB          '[~] Turn SW25 ON to Erase data from EE'
 0000008A            DB          'PROM ',0x0A,0x0D,0x00
 00000092          ??S_5:
 00000092            DB          '[~] Turn SW24 ON to Read and Display d'
 000000B8            DB          'ata from EEPROM! ',0x0A,0x0D,0x00
 000000CC          ??S_4:
 000000CC            DB          '[~] Turn SW23 ON to Write default data'
 000000F2            DB          ' to EEPROM! ',0x0A,0x0D,0x00
 00000101          ??S_3:
 00000101            DB          '>>> Connect I2C Add-On Card to J11 on '
 00000127            DB          'ARM Tyro Board .. ',0x0A,0x0A,0x0D,0x00
 0000013D          ??S_2:
 0000013D            DB          '********* ARM Slicker LPc2148 I2C EEPR'
 00000163            DB          'OM Demo **********',0x0A,0x0A,0x0D,0x00

*** DATA SEGMENT '?DT0?I2C_EEPROM':
 00000000          ReLoad:
 00000000           BEGIN_INIT
 00000000  00        DB          0x0
 00000001  00        DB          0x0
 00000002  41        DB          0x41
 00000003  52        DB          0x52
 00000004  4D        DB          0x4D
 00000005  37        DB          0x37
 00000006  32        DB          0x32
 00000007  31        DB          0x31
 00000008  78        DB          0x78
 00000009  78        DB          0x78
 0000000A           END_INIT
 0000000A          Buff:
ARM COMPILER V2.53,  I2C_EEPROM                                                            20/07/11  17:01:29  PAGE 8   

 0000000A           BEGIN_INIT
 0000000A  00        DB          0x0
 0000000B  00        DB          0x0
 0000000C  41        DB          0x41
 0000000D  52        DB          0x52
 0000000E  4D        DB          0x4D
 0000000F  37        DB          0x37
 00000010  32        DB          0x32
 00000011  31        DB          0x31
 00000012  78        DB          0x78
 00000013  78        DB          0x78
 00000014           END_INIT
 00000014          Rec:
 00000014           BEGIN_INIT
 00000014            DB          'NO-DATA!',0x00
 0000001D            SPACE       1
 0000001E           END_INIT
 0000001E          index:
 0000001E           BEGIN_INIT
 0000001E  00        DB          0x0
 0000001F           END_INIT
 0000001F          flag:
 0000001F           BEGIN_INIT
 0000001F  00        DB          0x0
 00000020           END_INIT
 00000020          ii:
 00000020            DS          1
 00000021          Ready:
 00000021           BEGIN_INIT
 00000021  00        DB          0x0
 00000022           END_INIT
 00000022          Erase:
 00000022           BEGIN_INIT
 00000022  00        DB          0x0
 00000023           END_INIT



*** CODE SEGMENT '?PR?Delay?T?I2C_EEPROM':
   64: {
 00000000            ; SCOPE-START
   67:     for(i=0;i<150;i++)
 00000000  2000      MOV         R0,#0x0
 00000002  ---- Variable 'i' assigned to Register 'R0' ----
   68:         for(j=0;j<900;j++);
 00000002          L_10:
 00000002  2100      MOV         R1,#0x0
 00000004  ---- Variable 'j' assigned to Register 'R1' ----
 00000004          L_6:
 00000004  3101      ADD         R1,#0x1
 00000006  1C0A      MOV         R2,R1 ; j
 00000008  4BE1      LDR         R3,=0x384
 0000000A  429A      CMP         R2,R3 ; j
 0000000C  D3FA      BCC         L_6  ; T=0x00000004
 0000000E  3001      ADD         R0,#0x1
 00000010  1C01      MOV         R1,R0 ; i
 00000012  2996      CMP         R1,#0x96 ; i
 00000014  D3F5      BCC         L_10  ; T=0x00000002
 00000016            ; SCOPE-END
   69: }
 00000016  4770      BX          R14
 00000018          ENDP ; 'Delay?T'


*** CODE SEGMENT '?PR?Wait?T?I2C_EEPROM':
   71: void Wait (unsigned int Delay)
 00000000  ---- Variable 'Delay' assigned to Register 'R0' ----
   73:     while(Delay--);
 00000000          L_11:
 00000000  1C01      MOV         R1,R0 ; Delay
ARM COMPILER V2.53,  I2C_EEPROM                                                            20/07/11  17:01:29  PAGE 9   

 00000002  3801      SUB         R0,#0x1
 00000004  2900      CMP         R1,#0x0 ; Delay
 00000006  D1FB      BNE         L_11  ; T=0x00000000
   74: }
 00000008  4770      BX          R14
 0000000A          ENDP ; 'Wait?T'


*** CODE SEGMENT '?PR?I2C_Init?T?I2C_EEPROM':
   78:     PINSEL0 =   0x00000055;         // P0.3 - SDA0 and P0.2 - SCL0 
 00000000  2155      MOV         R1,#0x55
 00000002  4800      LDR         R0,=0xE002C000
 00000004  6001      STR         R1,[R0,#0x0]
   79:     I2C0SCLH    =   150;            // 50%duty cycle .....   
 00000006  2196      MOV         R1,#0x96
 00000008  4800      LDR         R0,=0xE001C010
 0000000A  8001      STRH        R1,[R0,#0x0]
   80:     I2C0SCLL    =   150;            // I2C Frequency ->100 KHz for PCLK = 30MHz 
 0000000C  4800      LDR         R0,=0xE001C014
 0000000E  8001      STRH        R1,[R0,#0x0]
   81:     I2C0CONSET  =   1 << I2EN;      // Enable I2C 0 
 00000010  2140      MOV         R1,#0x40
 00000012  4800      LDR         R0,=0xE001C000
 00000014  7001      STRB        R1,[R0,#0x0]
   84: }
 00000016  4770      BX          R14
 00000018          ENDP ; 'I2C_Init?T'


*** CODE SEGMENT '?PR?I2C_Start?T?I2C_EEPROM':
   88:     I2C0CONCLR  =   1 << STO;
 00000000  2110      MOV         R1,#0x10
 00000002  4800      LDR         R0,=0xE001C018
 00000004  7001      STRB        R1,[R0,#0x0]
   89:     I2C0CONSET  =   1 << AA;
 00000006  2104      MOV         R1,#0x4
 00000008  4800      LDR         R0,=0xE001C000
 0000000A  7001      STRB        R1,[R0,#0x0]
   91:     I2C0CONSET  =   1 << STA;
 0000000C  2120      MOV         R1,#0x20
 0000000E  4800      LDR         R0,=0xE001C000
 00000010  7001      STRB        R1,[R0,#0x0]
   93:     return 0;
 00000012  2000      MOV         R0,#0x0
   94: }
 00000014  4770      BX          R14
 00000016          ENDP ; 'I2C_Start?T'


*** CODE SEGMENT '?PR?main?I2C_EEPROM':
   99: int main()
 00000000  B500      PUSH        {LR}
 00000002  ---- Variable 'i' assigned to Register 'R4' ----
  100: {
 00000002            ; SCOPE-START
  102:     VPBDIV  =   0x02;
 00000002  2102      MOV         R1,#0x2
 00000004  4800      LDR         R0,=0xE01FC100
 00000006  7001      STRB        R1,[R0,#0x0]
  103:     PINSEL0 =   0x00000055;         // P0.3 - SDA0 and P0.2 - SCL0 
 00000008  2155      MOV         R1,#0x55
 0000000A  4800      LDR         R0,=0xE002C000
 0000000C  6001      STR         R1,[R0,#0x0]
  104:     PINSEL2 =   0xFFFFFFF3;
 0000000E  4800      LDR         R1,=0xFFFFFFF3
 00000010  4800      LDR         R0,=0xE002C014
 00000012  6001      STR         R1,[R0,#0x0]
  106:     IO1DIR  =   0x00 << SW23;
 00000014  2100      MOV         R1,#0x0
 00000016  4800      LDR         R0,=0xE0028018
 00000018  6001      STR         R1,[R0,#0x0]
  108:     UART0_Init (9600);
ARM COMPILER V2.53,  I2C_EEPROM                                                            20/07/11  17:01:29  PAGE 10  

 0000001A  4800      LDR         R0,=0x2580
 0000001C  F7FF      BL          UART0_Init?T  ; T=0x0001  (1)
 0000001E  FFF0      BL          UART0_Init?T  ; T=0x0001  (2)
  110:     VICIntSelect    = 0<<9;
 00000020  2100      MOV         R1,#0x0
 00000022  4800      LDR         R0,=0xFFFFF00C
 00000024  6001      STR         R1,[R0,#0x0]
  111:     VICVectCntl0    = 0x020 | 9 ;
 00000026  2129      MOV         R1,#0x29
 00000028  4800      LDR         R0,=0xFFFFF200
 0000002A  6001      STR         R1,[R0,#0x0]
  112:     VICVectAddr0    = (unsigned long)I2C_ISR;   //Select Vector Slot for I2C0
 0000002C  4900      LDR         R1,=I2C_ISR?A ; I2C_ISR?A
 0000002E  4800      LDR         R0,=0xFFFFF100
 00000030  6001      STR         R1,[R0,#0x0]
  113:     VICIntEnable    = 1<<9;
 00000032  4980      LDR         R1,=0x200
 00000034  4800      LDR         R0,=0xFFFFF010
 00000036  6001      STR         R1,[R0,#0x0]
  121:     I2C_Init();
 00000038  F7FF      BL          I2C_Init?T  ; T=0x0001  (1)
 0000003A  FFE2      BL          I2C_Init?T  ; T=0x0001  (2)
  124:     UART0_PutS ("********* ARM Slicker LPc2148 I2C EEPROM Demo **********\n\n\r");
 0000003C  4800      LDR         R0,=??S_2 ; ??S_2
 0000003E  F7FF      BL          UART0_PutS?T  ; T=0x0001  (1)
 00000040  FFDF      BL          UART0_PutS?T  ; T=0x0001  (2)
  125:     UART0_PutS (">>> Connect I2C Add-On Card to J11 on ARM Tyro Board .. \n\n\r");
 00000042  4800      LDR         R0,=??S_3 ; ??S_3
 00000044  F7FF      BL          UART0_PutS?T  ; T=0x0001  (1)
 00000046  FFDC      BL          UART0_PutS?T  ; T=0x0001  (2)
  126:     UART0_PutS ("[~] Turn SW23 ON to Write default data to EEPROM! \n\r");
 00000048  4800      LDR         R0,=??S_4 ; ??S_4
 0000004A  F7FF      BL          UART0_PutS?T  ; T=0x0001  (1)
 0000004C  FFD9      BL          UART0_PutS?T  ; T=0x0001  (2)
  127:     UART0_PutS ("[~] Turn SW24 ON to Read and Display data from EEPROM! \n\r");
 0000004E  4800      LDR         R0,=??S_5 ; ??S_5
 00000050  F7FF      BL          UART0_PutS?T  ; T=0x0001  (1)
 00000052  FFD6      BL          UART0_PutS?T  ; T=0x0001  (2)
  128:     UART0_PutS ("[~] Turn SW25 ON to Erase data from EEPROM \n\r");
 00000054  4800      LDR         R0,=??S_6 ; ??S_6
 00000056  F7FF      BL          UART0_PutS?T  ; T=0x0001  (1)
 00000058  FFD3      BL          UART0_PutS?T  ; T=0x0001  (2)
  131:     while (1)
 0000005A          L_18:
  133:         if ((IOPIN1 & SW23) == 0)                   /*...To Load the Default Data to the EEPROM ...*/
 0000005A  4800      LDR         R0,=0xE0028010
 0000005C  6800      LDR         R0,[R0,#0x0]
 0000005E  4800      LDR         R1,=0x1000000
 00000060  4208      TST         R0,R1
 00000062  D134      BNE         L_20  ; T=0x000000CE
  135:             ii = 0;
 00000064  2100      MOV         R1,#0x0
 00000066  4800      LDR         R0,=ii ; ii
 00000068  7001      STRB        R1,[R0,#0x0] ; ii
  136:             while (ii < MAX)                        //Re-load Default Data to Buff
 0000006A  E009      B           L_21  ; T=0x00000080
 0000006C          L_23:
  138:                 Buff [ii]   =   ReLoad [ii];
 0000006C  4800      LDR         R0,=ii ; ii
 0000006E  7801      LDRB        R1,[R0,#0x0] ; ii
 00000070  1C0B      MOV         R3,R1
 00000072  4800      LDR         R0,=ReLoad ; ReLoad
 00000074  5CC0      LDRB        R0,[R0,R3]
 00000076  4800      LDR         R2,=Buff ; Buff
 00000078  54D0      STRB        R0,[R2,R3]
  139:                 ii++;
ARM COMPILER V2.53,  I2C_EEPROM                                                            20/07/11  17:01:29  PAGE 11  

 0000007A  4800      LDR         R0,=ii ; ii
 0000007C  3101      ADD         R1,#0x1
 0000007E  7001      STRB        R1,[R0,#0x0] ; ii
  140:             }
 00000080          L_21:
 00000080  4800      LDR         R0,=ii ; ii
 00000082  7800      LDRB        R0,[R0,#0x0] ; ii
 00000084  280A      CMP         R0,#0xA
 00000086  DBF1      BLT         L_23  ; T=0x0000006C
  141:             Wait (5000);            
 00000088  4800      LDR         R0,=0x1388
 0000008A  F7FF      BL          Wait?T  ; T=0x0001  (1)
 0000008C  FFB9      BL          Wait?T  ; T=0x0001  (2)
  142:             flag    =   'W';
 0000008E  2157      MOV         R1,#0x57
 00000090  4800      LDR         R0,=flag ; flag
 00000092  7001      STRB        R1,[R0,#0x0] ; flag
  143:             I2C_Start (0x70);
 00000094  2070      MOV         R0,#0x70
 00000096  F7FF      BL          I2C_Start?T  ; T=0x0001  (1)
 00000098  FFB3      BL          I2C_Start?T  ; T=0x0001  (2)
  144:             Erase = 0;
 0000009A  2100      MOV         R1,#0x0
 0000009C  4800      LDR         R0,=Erase ; Erase
 0000009E  7001      STRB        R1,[R0,#0x0] ; Erase
  145:             for (i=0;i<30;i++)  Wait(10000);
 000000A0  2400      MOV         R4,#0x0
 000000A2          L_28:
 000000A2  4800      LDR         R0,=0x2710
 000000A4  F7FF      BL          Wait?T  ; T=0x0001  (1)
 000000A6  FFAC      BL          Wait?T  ; T=0x0001  (2)
 000000A8  3401      ADD         R4,#0x1
 000000AA  1C20      MOV         R0,R4 ; i
 000000AC  281E      CMP         R0,#0x1E ; i
 000000AE  D3F8      BCC         L_28  ; T=0x000000A2
  147:             I2C0CONCLR  =   1 << SI;
 000000B0  2108      MOV         R1,#0x8
 000000B2  4800      LDR         R0,=0xE001C018
 000000B4  7001      STRB        R1,[R0,#0x0]
  148:             while (!(IOPIN1 & SW23));
 000000B6          L_30:
 000000B6  4800      LDR         R0,=0xE0028010
 000000B8  6800      LDR         R0,[R0,#0x0]
 000000BA  4800      LDR         R1,=0x1000000
 000000BC  4208      TST         R0,R1
 000000BE  D0FA      BEQ         L_30  ; T=0x000000B6
  149:             Wait (5000);Wait (5000);
 000000C0  4800      LDR         R0,=0x1388
 000000C2  F7FF      BL          Wait?T  ; T=0x0001  (1)
 000000C4  FF9D      BL          Wait?T  ; T=0x0001  (2)
 000000C6  4800      LDR         R0,=0x1388
 000000C8  F7FF      BL          Wait?T  ; T=0x0001  (1)
 000000CA  FF9A      BL          Wait?T  ; T=0x0001  (2)
  150:         }   
 000000CC  E051      B           L_34  ; T=0x00000172
 000000CE          L_20:
  151:         else if ((IOPIN1 & SW24) == 0)              /*..To Read the Data Stored in the EEPROM...*/
 000000CE  4800      LDR         R0,=0xE0028010
 000000D0  6800      LDR         R0,[R0,#0x0]
 000000D2  4800      LDR         R1,=0x2000000
 000000D4  4208      TST         R0,R1
 000000D6  D14C      BNE         L_34  ; T=0x00000172
  153:             flag    =   'R';
 000000D8  2152      MOV         R1,#0x52
 000000DA  4800      LDR         R0,=flag ; flag
 000000DC  7001      STRB        R1,[R0,#0x0] ; flag
ARM COMPILER V2.53,  I2C_EEPROM                                                            20/07/11  17:01:29  PAGE 12  

  154:             I2C_Start (0x70);
 000000DE  2070      MOV         R0,#0x70
 000000E0  F7FF      BL          I2C_Start?T  ; T=0x0001  (1)
 000000E2  FF8E      BL          I2C_Start?T  ; T=0x0001  (2)
  156:             for (i=0;i<30;i++)  Wait(10000);
 000000E4  2400      MOV         R4,#0x0
 000000E6          L_39:
 000000E6  4800      LDR         R0,=0x2710
 000000E8  F7FF      BL          Wait?T  ; T=0x0001  (1)
 000000EA  FF8A      BL          Wait?T  ; T=0x0001  (2)
 000000EC  3401      ADD         R4,#0x1
 000000EE  1C20      MOV         R0,R4 ; i
 000000F0  281E      CMP         R0,#0x1E ; i
 000000F2  D3F8      BCC         L_39  ; T=0x000000E6
  158:             I2C0CONCLR  =   1 << SI;
 000000F4  2108      MOV         R1,#0x8
 000000F6  4800      LDR         R0,=0xE001C018
 000000F8  7001      STRB        R1,[R0,#0x0]
  160:             while (Ready == 'F');                           //Ready = FALSE
 000000FA          L_41:
 000000FA  4800      LDR         R0,=Ready ; Ready
 000000FC  7800      LDRB        R0,[R0,#0x0] ; Ready
 000000FE  2846      CMP         R0,#0x46
 00000100  D0FB      BEQ         L_41  ; T=0x000000FA
  162:             if (Ready == 'T')                       //Check if Ready = TRUE
 00000102  2854      CMP         R0,#0x54
 00000104  D124      BNE         L_53  ; T=0x00000150
  164:                 ii=0;
 00000106  2100      MOV         R1,#0x0
 00000108  4800      LDR         R0,=ii ; ii
 0000010A  7001      STRB        R1,[R0,#0x0] ; ii
  165:                 UART0_PutS ("\n\r The Read Data are: \t");
 0000010C  4800      LDR         R0,=??S_7 ; ??S_7
 0000010E  F7FF      BL          UART0_PutS?T  ; T=0x0001  (1)
 00000110  FF77      BL          UART0_PutS?T  ; T=0x0001  (2)
  166:                 while (ii<MAX)
 00000112  E010      B           L_46  ; T=0x00000136
 00000114          L_48:
  169:                     Wait (1000);
 00000114  48FA      LDR         R0,=0x3E8
 00000116  F7FF      BL          Wait?T  ; T=0x0001  (1)
 00000118  FF73      BL          Wait?T  ; T=0x0001  (2)
  170:                     U0THR   =   Rec[ii];
 0000011A  4800      LDR         R0,=ii ; ii
 0000011C  7800      LDRB        R0,[R0,#0x0] ; ii
 0000011E  1C01      MOV         R1,R0
 00000120  4800      LDR         R0,=Rec ; Rec
 00000122  5C41      LDRB        R1,[R0,R1]
 00000124  4800      LDR         R0,=0xE000C000
 00000126  7001      STRB        R1,[R0,#0x0]
  171:                     Wait (1000);
 00000128  48FA      LDR         R0,=0x3E8
 0000012A  F7FF      BL          Wait?T  ; T=0x0001  (1)
 0000012C  FF69      BL          Wait?T  ; T=0x0001  (2)
  172:                     ii++;
 0000012E  4800      LDR         R0,=ii ; ii
 00000130  7801      LDRB        R1,[R0,#0x0] ; ii
 00000132  3101      ADD         R1,#0x1
 00000134  7001      STRB        R1,[R0,#0x0] ; ii
  173:                 }
 00000136          L_46:
 00000136  4800      LDR         R0,=ii ; ii
 00000138  7800      LDRB        R0,[R0,#0x0] ; ii
 0000013A  280A      CMP         R0,#0xA
 0000013C  DBEA      BLT         L_48  ; T=0x00000114
  174:                 UART0_PutC ('\n');
ARM COMPILER V2.53,  I2C_EEPROM                                                            20/07/11  17:01:29  PAGE 13  

 0000013E  200A      MOV         R0,#0xA
 00000140  F7FF      BL          UART0_PutC?T  ; T=0x0001  (1)
 00000142  FF5E      BL          UART0_PutC?T  ; T=0x0001  (2)
  175:                 Wait (1000);
 00000144  48FA      LDR         R0,=0x3E8
 00000146  F7FF      BL          Wait?T  ; T=0x0001  (1)
 00000148  FF5B      BL          Wait?T  ; T=0x0001  (2)
  176:                 Ready   =   'F';
 0000014A  2146      MOV         R1,#0x46
 0000014C  4800      LDR         R0,=Ready ; Ready
 0000014E  7001      STRB        R1,[R0,#0x0] ; Ready
  178:             while (!(IOPIN1 & SW24));
 00000150          L_53:
 00000150          L_50:
 00000150  4800      LDR         R0,=0xE0028010
 00000152  6800      LDR         R0,[R0,#0x0]
 00000154  4800      LDR         R1,=0x2000000
 00000156  4208      TST         R0,R1
 00000158  D0FA      BEQ         L_50  ; T=0x00000150
  179:             Wait (5000);Wait (5000);Wait (5000);Wait (5000);
 0000015A  4800      LDR         R0,=0x1388
 0000015C  F7FF      BL          Wait?T  ; T=0x0001  (1)
 0000015E  FF50      BL          Wait?T  ; T=0x0001  (2)
 00000160  4800      LDR         R0,=0x1388
 00000162  F7FF      BL          Wait?T  ; T=0x0001  (1)
 00000164  FF4D      BL          Wait?T  ; T=0x0001  (2)
 00000166  4800      LDR         R0,=0x1388
 00000168  F7FF      BL          Wait?T  ; T=0x0001  (1)
 0000016A  FF4A      BL          Wait?T  ; T=0x0001  (2)
 0000016C  4800      LDR         R0,=0x1388
 0000016E  F7FF      BL          Wait?T  ; T=0x0001  (1)
 00000170  FF47      BL          Wait?T  ; T=0x0001  (2)
  180:         }
 00000172          L_34:
  182:         if ((IOPIN1 & SW25) == 0)                       /*To Erase the Content in EEPROM*/
 00000172  4800      LDR         R0,=0xE0028010
 00000174  6800      LDR         R0,[R0,#0x0]
 00000176  4800      LDR         R1,=0x4000000
 00000178  4208      TST         R0,R1
 0000017A  D000      BNE         $+4
 0000017C  E76D      B           L_18  ; T=0x0000005A
  184:             ii = 2;
 00000180  2102      MOV         R1,#0x2
 00000182  4800      LDR         R0,=ii ; ii
 00000184  7001      STRB        R1,[R0,#0x0] ; ii
  185:             while (ii < MAX)
 00000186  E007      B           L_55  ; T=0x00000198
 00000188          L_57:
  187:                 Buff[ii]    =   0xFF;                   //Load 0xFF to EEPROM
 00000188  20FF      MOV         R0,#0xFF
 0000018A  4800      LDR         R1,=ii ; ii
 0000018C  7809      LDRB        R1,[R1,#0x0] ; ii
 0000018E  1C0B      MOV         R3,R1
 00000190  4800      LDR         R2,=Buff ; Buff
 00000192  54D0      STRB        R0,[R2,R3]
  188:                 ii++;
 00000194  4800      LDR         R0,=ii ; ii
 00000196  3101      ADD         R1,#0x1
 00000198  7001      STRB        R1,[R0,#0x0] ; ii
  189:             }
 0000019A          L_55:
 0000019A  4800      LDR         R0,=ii ; ii
 0000019C  7800      LDRB        R0,[R0,#0x0] ; ii
 0000019E  280A      CMP         R0,#0xA
 000001A0  DBF2      BLT         L_57  ; T=0x00000188
  190:             flag    =   'W';
ARM COMPILER V2.53,  I2C_EEPROM                                                            20/07/11  17:01:29  PAGE 14  

 000001A2  2157      MOV         R1,#0x57
 000001A4  4800      LDR         R0,=flag ; flag
 000001A6  7001      STRB        R1,[R0,#0x0] ; flag
  191:             Erase = 1;
 000001A8  2101      MOV         R1,#0x1
 000001AA  4800      LDR         R0,=Erase ; Erase
 000001AC  7001      STRB        R1,[R0,#0x0] ; Erase
  192:             I2C_Start (0x70);
 000001AE  2070      MOV         R0,#0x70
 000001B0  F7FF      BL          I2C_Start?T  ; T=0x0001  (1)
 000001B2  FF26      BL          I2C_Start?T  ; T=0x0001  (2)
  194:             for (i=0;i<30;i++)  Wait(10000);
 000001B4  2400      MOV         R4,#0x0
 000001B6          L_62:
 000001B6  4800      LDR         R0,=0x2710
 000001B8  F7FF      BL          Wait?T  ; T=0x0001  (1)
 000001BA  FF22      BL          Wait?T  ; T=0x0001  (2)
 000001BC  3401      ADD         R4,#0x1
 000001BE  1C20      MOV         R0,R4 ; i
 000001C0  281E      CMP         R0,#0x1E ; i
 000001C2  D3F8      BCC         L_62  ; T=0x000001B6
  196:             I2C0CONCLR  =   1 << SI;    
 000001C4  2108      MOV         R1,#0x8
 000001C6  4800      LDR         R0,=0xE001C018
 000001C8  7001      STRB        R1,[R0,#0x0]
  198:             while (!(IOPIN1 & SW25));
 000001CA          L_64:
 000001CA  4800      LDR         R0,=0xE0028010
 000001CC  6800      LDR         R0,[R0,#0x0]
 000001CE  4800      LDR         R1,=0x4000000
 000001D0  4208      TST         R0,R1
 000001D2  D0FA      BEQ         L_64  ; T=0x000001CA
  199:             Wait (5000);Wait (5000);Wait (5000);Wait (5000);
 000001D4  4800      LDR         R0,=0x1388
 000001D6  F7FF      BL          Wait?T  ; T=0x0001  (1)
 000001D8  FF13      BL          Wait?T  ; T=0x0001  (2)
 000001DA  4800      LDR         R0,=0x1388
 000001DC  F7FF      BL          Wait?T  ; T=0x0001  (1)
 000001DE  FF10      BL          Wait?T  ; T=0x0001  (2)
 000001E0  4800      LDR         R0,=0x1388
 000001E2  F7FF      BL          Wait?T  ; T=0x0001  (1)
 000001E4  FF0D      BL          Wait?T  ; T=0x0001  (2)
 000001E6  4800      LDR         R0,=0x1388
 000001E8  F7FF      BL          Wait?T  ; T=0x0001  (1)
 000001EA  FF0A      BL          Wait?T  ; T=0x0001  (2)
  201:     }         
 000001EC  E735      B           L_18  ; T=0x0000005A
 000001EE            ; SCOPE-END
  203: }
 000001EE  BC08      POP         {R3}
 000001F0  4718      BX          R3
 000001F2          ENDP ; 'main'


*** CODE SEGMENT '?PR?I2C_ISR?A?I2C_EEPROM':
  205: void I2C_ISR(void) __irq
 00000000  E92D5F1F  STMDB       R13!,{R0-R4,R8-R12,LR}
  207:     if (I2C0CONSET & 0x08)
 00000004  E5100000  LDR         R0,=0xE001C000
 00000008  E5D00000  LDRB        R0,[R0,#0x0]
 0000000C  E3100008  TST         R0,#0x0008
 00000010  0A000119  BEQ         L_68  ; Targ=0x47C
  211:         switch (I2C0STAT)
 00000014  E5100000  LDR         R0,=0xE001C004
 00000018  E5D00000  LDRB        R0,[R0,#0x0]
 0000001C  E3500010  CMP         R0,#0x0010
 00000020  0A000032  BEQ         L_71  ; Targ=0xF0
 00000024  E3500018  CMP         R0,#0x0018
ARM COMPILER V2.53,  I2C_EEPROM                                                            20/07/11  17:01:29  PAGE 15  

 00000028  0A00004C  BEQ         L_72  ; Targ=0x160
 0000002C  E3500020  CMP         R0,#0x0020
 00000030  0A00005B  BEQ         L_73  ; Targ=0x1A4
 00000034  E3500028  CMP         R0,#0x0028
 00000038  0A00006A  BEQ         L_74  ; Targ=0x1E8
 0000003C  E3500030  CMP         R0,#0x0030
 00000040  0A0000AE  BEQ         L_75  ; Targ=0x300
 00000044  E3500038  CMP         R0,#0x0038
 00000048  0A0000CC  BEQ         L_76  ; Targ=0x380
 0000004C  E3500040  CMP         R0,#0x0040
 00000050  0A0000CE  BEQ         L_77  ; Targ=0x390
 00000054  E3500048  CMP         R0,#0x0048
 00000058  0A0000D9  BEQ         L_78  ; Targ=0x3C4
 0000005C  E3500050  CMP         R0,#0x0050
 00000060  0A0000DB  BEQ         L_79  ; Targ=0x3D4
 00000064  E3500058  CMP         R0,#0x0058
 00000068  0A0000F6  BEQ         L_80  ; Targ=0x448
 0000006C  E3500008  CMP         R0,#0x0008
 00000070  1A000101  BNE         L_68  ; Targ=0x47C
  213:             case (0x08) :/*... A START condition has been Transmitted...*/  
 00000074          L_70:
  215:                             if (flag == 'W')
 00000074  E5100000  LDR         R0,=flag ; flag
 00000078  E5D00000  LDRB        R0,[R0,#0x0] ; flag
 0000007C  E3500057  CMP         R0,#0x0057
 00000080  1A00000C  BNE         L_81  ; Targ=0xB8
  217:                                 I2C0CONCLR  =   1 << STO;
 00000084  E3A02010  MOV         R2,#0x10
 00000088  E5101000  LDR         R1,=0xE001C018
 0000008C  E5C12000  STRB        R2,[R1,#0x0]
  218:                                 I2C0CONCLR  =   1 << STA;   //Clear START Bit
 00000090  E3A02020  MOV         R2,#0x20
 00000094  E5101000  LDR         R1,=0xE001C018
 00000098  E5C12000  STRB        R2,[R1,#0x0]
  219:                                 I2C0DAT     =   0xA0;       //Slave Addr + W  1010 p2 p1 p0 w
 0000009C  E3A020A0  MOV         R2,#0xA0
 000000A0  E5101000  LDR         R1,=0xE001C008
 000000A4  E5C12000  STRB        R2,[R1,#0x0]
  220:                                 I2C0CONCLR  =   1 << SI;
 000000A8  E3A02008  MOV         R2,#0x8
 000000AC  E5101000  LDR         R1,=0xE001C018
 000000B0  E5C12000  STRB        R2,[R1,#0x0]
  222:                             }
 000000B4  EA000009  B           L_82  ; Targ=0xE0
 000000B8          L_81:
  223:                             else if (flag == 'R')
 000000B8  E3500052  CMP         R0,#0x0052
 000000BC  1A000007  BNE         L_82  ; Targ=0xE0
  226:                                 I2C0DAT     =   0xA0;       //Slave Addr + R  1010 p2 p1 p0 r   
 000000C0  E3A010A0  MOV         R1,#0xA0
 000000C4  E5100000  LDR         R0,=0xE001C008
 000000C8  E5C01000  STRB        R1,[R0,#0x0]
  227:                                 I2C_Start (0xA1);
 000000CC  E3A000A1  MOV         R0,#0xA1
 000000D0  EBFFFFCA  BL          I2C_Start?A  ; Targ=0x0
  228:                                 I2C0CONCLR  =   1 << SI;
 000000D4  E3A01008  MOV         R1,#0x8
 000000D8  E5100000  LDR         R0,=0xE001C018
 000000DC  E5C01000  STRB        R1,[R0,#0x0]
  230:                             }
 000000E0          L_82:
  231:                             index   =   0;
 000000E0  E3A01000  MOV         R1,#0x0
 000000E4  E5100000  LDR         R0,=index ; index
 000000E8  E5C01000  STRB        R1,[R0,#0x0] ; index
  232:                             break;
ARM COMPILER V2.53,  I2C_EEPROM                                                            20/07/11  17:01:29  PAGE 16  

 000000EC  EA0000E2  B           L_68  ; Targ=0x47C
  234:             case (0x10) :   /*...A repeated START condition has been Transmitted...*/
 000000F0          L_71:
  236:                             I2C0CONCLR  =   1 << STA;   
 000000F0  E3A01020  MOV         R1,#0x20
 000000F4  E5100000  LDR         R0,=0xE001C018
 000000F8  E5C01000  STRB        R1,[R0,#0x0]
  237:                             if (flag == 'W')
 000000FC  E5100000  LDR         R0,=flag ; flag
 00000100  E5D00000  LDRB        R0,[R0,#0x0] ; flag
 00000104  E3500057  CMP         R0,#0x0057
 00000108  1A000003  BNE         L_84  ; Targ=0x11C
  238:                                 I2C0DAT =   0xA0;       //Slave Addr + W  1010 p2 p1 p0 w
 0000010C  E3A030A0  MOV         R3,#0xA0
 00000110  E5102000  LDR         R2,=0xE001C008
 00000114  E5C23000  STRB        R3,[R2,#0x0]
 00000118  EA0000D7  B           L_68  ; Targ=0x47C
 0000011C          L_84:
  239:                             else if (flag == 'R')
 0000011C  E3500052  CMP         R0,#0x0052
 00000120  1A0000D5  BNE         L_68  ; Targ=0x47C
  241:                                 I2C0CONCLR  =   1 << STA;
 00000124  E5100000  LDR         R0,=0xE001C018
 00000128  E5C01000  STRB        R1,[R0,#0x0]
  242:                                 I2C0CONCLR  =   1 << STO;   
 0000012C  E3A01010  MOV         R1,#0x10
 00000130  E5100000  LDR         R0,=0xE001C018
 00000134  E5C01000  STRB        R1,[R0,#0x0]
  243:                                 I2C0DAT     =   0xA1;       //Slave Addr + R  1010 p2 p1 p0 r   
 00000138  E3A010A1  MOV         R1,#0xA1
 0000013C  E5100000  LDR         R0,=0xE001C008
 00000140  E5C01000  STRB        R1,[R0,#0x0]
  244:                                 I2C0CONCLR  =   1 << SI;
 00000144  E3A01008  MOV         R1,#0x8
 00000148  E5100000  LDR         R0,=0xE001C018
 0000014C  E5C01000  STRB        R1,[R0,#0x0]
  245:                                 index = 0;
 00000150  E3A01000  MOV         R1,#0x0
 00000154  E5100000  LDR         R0,=index ; index
 00000158  E5C01000  STRB        R1,[R0,#0x0] ; index
  248:                             break;
 0000015C  EA0000C6  B           L_68  ; Targ=0x47C
  250:             case (0x18) :   /*....SLA+W has been transmitted; ACK has been received....*/
 00000160          L_72:
  252:                             I2C0CONCLR  =   0x20;       //Clear START Bit
 00000160  E3A01020  MOV         R1,#0x20
 00000164  E5100000  LDR         R0,=0xE001C018
 00000168  E5C01000  STRB        R1,[R0,#0x0]
  253:                             I2C0CONCLR  =   0x38;       //Clear all flags (STA, STO, SI)
 0000016C  E3A01038  MOV         R1,#0x38
 00000170  E5100000  LDR         R0,=0xE001C018
 00000174  E5C01000  STRB        R1,[R0,#0x0]
  254:                             I2C0DAT     =   Buff[index];
 00000178  E5100000  LDR         R0,=index ; index
 0000017C  E5D01000  LDRB        R1,[R0,#0x0] ; index
 00000180  E1A02001  MOV         R2,R1
 00000184  E5100000  LDR         R0,=Buff ; Buff
 00000188  E7D02002  LDRB        R2,[R0,+R2]
 0000018C  E5100000  LDR         R0,=0xE001C008
 00000190  E5C02000  STRB        R2,[R0,#0x0]
  255:                             index++;
 00000194  E5100000  LDR         R0,=index ; index
 00000198  E2811001  ADD         R1,R1,#0x0001
 0000019C  E5C01000  STRB        R1,[R0,#0x0] ; index
  257:                             break;
 000001A0  EA0000B5  B           L_68  ; Targ=0x47C
ARM COMPILER V2.53,  I2C_EEPROM                                                            20/07/11  17:01:29  PAGE 17  

  259:             case (0x20) :   /*...SLA+W has been transmitted; NOT ACK has been received....*/
 000001A4          L_73:
  261:                             I2C0CONCLR  =   0x20;       //Clear START Bit
 000001A4  E3A01020  MOV         R1,#0x20
 000001A8  E5100000  LDR         R0,=0xE001C018
 000001AC  E5C01000  STRB        R1,[R0,#0x0]
  262:                             I2C0CONCLR  =   0x38;       //Clear all flags (STA, STO, SI)
 000001B0  E3A01038  MOV         R1,#0x38
 000001B4  E5100000  LDR         R0,=0xE001C018
 000001B8  E5C01000  STRB        R1,[R0,#0x0]
  263:                             I2C0DAT     =   Buff[index];
 000001BC  E5100000  LDR         R0,=index ; index
 000001C0  E5D01000  LDRB        R1,[R0,#0x0] ; index
 000001C4  E1A02001  MOV         R2,R1
 000001C8  E5100000  LDR         R0,=Buff ; Buff
 000001CC  E7D02002  LDRB        R2,[R0,+R2]
 000001D0  E5100000  LDR         R0,=0xE001C008
 000001D4  E5C02000  STRB        R2,[R0,#0x0]
  264:                             index++;                        
 000001D8  E5100000  LDR         R0,=index ; index
 000001DC  E2811001  ADD         R1,R1,#0x0001
 000001E0  E5C01000  STRB        R1,[R0,#0x0] ; index
  265:                             break;
 000001E4  EA0000A4  B           L_68  ; Targ=0x47C
  267:             case (0x28) :   /*...Data byte in I2DAT has been transmitted; ACK has been received....*/
 000001E8          L_74:
  269:                             if (index < MAX)                // Place all the contents of Buff[] in I2C0DAT
 000001E8  E5100000  LDR         R0,=index ; index
 000001EC  E5D01000  LDRB        R1,[R0,#0x0] ; index
 000001F0  E1A02001  MOV         R2,R1
 000001F4  E352000A  CMP         R2,#0x000A
 000001F8  AA000027  BGE         L_87  ; Targ=0x29C
  271:                                 if (flag == 'W')
 000001FC  E5100000  LDR         R0,=flag ; flag
 00000200  E5D00000  LDRB        R0,[R0,#0x0] ; flag
 00000204  E3500057  CMP         R0,#0x0057
 00000208  1A00000A  BNE         L_88  ; Targ=0x238
  273:                                     I2C0DAT     =   Buff[index];
 0000020C  E5103000  LDR         R3,=Buff ; Buff
 00000210  E7D34002  LDRB        R4,[R3,+R2]
 00000214  E5103000  LDR         R3,=0xE001C008
 00000218  E5C34000  STRB        R4,[R3,#0x0]
  274:                                     I2C0CONCLR  =   0x20;       //Clear START Bit
 0000021C  E3A04020  MOV         R4,#0x20
 00000220  E5103000  LDR         R3,=0xE001C018
 00000224  E5C34000  STRB        R4,[R3,#0x0]
  275:                                     I2C0CONCLR  =   0x38;       //Clear all flags (STA, STO, SI)
 00000228  E3A04038  MOV         R4,#0x38
 0000022C  E5103000  LDR         R3,=0xE001C018
 00000230  E5C34000  STRB        R4,[R3,#0x0]
  277:                                 }
 00000234  EA000014  B           L_89  ; Targ=0x28C
 00000238          L_88:
  278:                                 else if ((index > 1) && flag == 'R')    //Generate a Repeated Start to jump to MST/REC Mode
 00000238  E3520001  CMP         R2,#0x0001
 0000023C  DA000008  BLE         L_90  ; Targ=0x264
 00000240  E3500052  CMP         R0,#0x0052
 00000244  1A000006  BNE         L_90  ; Targ=0x264
  280:                                     I2C0CONCLR  =   0x18;
 00000248  E3A03018  MOV         R3,#0x18
 0000024C  E5100000  LDR         R0,=0xE001C018
 00000250  E5C03000  STRB        R3,[R0,#0x0]
  281:                                     I2C0CONSET  =   1 << STA;
 00000254  E3A03020  MOV         R3,#0x20
 00000258  E5100000  LDR         R0,=0xE001C000
 0000025C  E5C03000  STRB        R3,[R0,#0x0]
ARM COMPILER V2.53,  I2C_EEPROM                                                            20/07/11  17:01:29  PAGE 18  

  283:                                 }
 00000260  EA000009  B           L_89  ; Targ=0x28C
 00000264          L_90:
  286:                                     I2C0DAT     =   Buff[index];
 00000264  E5100000  LDR         R0,=Buff ; Buff
 00000268  E7D02002  LDRB        R2,[R0,+R2]
 0000026C  E5100000  LDR         R0,=0xE001C008
 00000270  E5C02000  STRB        R2,[R0,#0x0]
  287:                                     I2C0CONCLR  =   0x20;       //Clear START Bit
 00000274  E3A02020  MOV         R2,#0x20
 00000278  E5100000  LDR         R0,=0xE001C018
 0000027C  E5C02000  STRB        R2,[R0,#0x0]
  288:                                     I2C0CONCLR  =   0x38;       //Clear all flags (STA, STO, SI)
 00000280  E3A02038  MOV         R2,#0x38
 00000284  E5100000  LDR         R0,=0xE001C018
 00000288  E5C02000  STRB        R2,[R0,#0x0]
  290:                                 }
 0000028C          L_89:
  292:                                 index++;
 0000028C  E5100000  LDR         R0,=index ; index
 00000290  E2811001  ADD         R1,R1,#0x0001
 00000294  E5C01000  STRB        R1,[R0,#0x0] ; index
  293:                             }
 00000298  EA000077  B           L_68  ; Targ=0x47C
 0000029C          L_87:
  296:                                 index = 0;
 0000029C  E3A01000  MOV         R1,#0x0
 000002A0  E5100000  LDR         R0,=index ; index
 000002A4  E5C01000  STRB        R1,[R0,#0x0] ; index
  297:                                 flag = 'R';
 000002A8  E3A01052  MOV         R1,#0x52
 000002AC  E5100000  LDR         R0,=flag ; flag
 000002B0  E5C01000  STRB        R1,[R0,#0x0] ; flag
  298:                                 I2C0CONSET  =   1 << STO;       //Send STOP Bit
 000002B4  E3A01010  MOV         R1,#0x10
 000002B8  E5100000  LDR         R0,=0xE001C000
 000002BC  E5C01000  STRB        R1,[R0,#0x0]
  299:                                 if (Erase == 1)
 000002C0  E5100000  LDR         R0,=Erase ; Erase
 000002C4  E5D00000  LDRB        R0,[R0,#0x0] ; Erase
 000002C8  E3500001  CMP         R0,#0x0001
 000002CC  1A000002  BNE         L_93  ; Targ=0x2DC
  301:                                     UART0_PutS ("\n\r Memory Erase Successfull.....!\n");
 000002D0  E3E00102  MVN         R0,#0x102 ; ??S_8
 000002D4  EBFFFF49  BL          UART0_PutS?A  ; Targ=0x0
  302:                                 }
 000002D8  EA000001  B           L_94  ; Targ=0x2E4
 000002DC          L_93:
  305:                                     UART0_PutS ("\n\r Data Successfully Written on Memory!\n");
 000002DC  E3E00102  MVN         R0,#0x102 ; ??S_9
 000002E0  EBFFFF46  BL          UART0_PutS?A  ; Targ=0x0
  306:                                 }
 000002E4          L_94:
  308:                                 I2C0CONCLR  =   1 << STA;
 000002E4  E3A01020  MOV         R1,#0x20
 000002E8  E5100000  LDR         R0,=0xE001C018
 000002EC  E5C01000  STRB        R1,[R0,#0x0]
  309:                                 I2C0CONCLR  =   1 << SI;
 000002F0  E3A01008  MOV         R1,#0x8
 000002F4  E5100000  LDR         R0,=0xE001C018
 000002F8  E5C01000  STRB        R1,[R0,#0x0]
  311:                             break;
 000002FC  EA00005E  B           L_68  ; Targ=0x47C
  313:             case (0x30) :   /*... Data byte in I2DAT has been transmitted; NOT ACK has been received ...*/
 00000300          L_75:
  315:                             I2C0CONCLR  =   0x20;       //Clear START Bit
ARM COMPILER V2.53,  I2C_EEPROM                                                            20/07/11  17:01:29  PAGE 19  

 00000300  E3A01020  MOV         R1,#0x20
 00000304  E5100000  LDR         R0,=0xE001C018
 00000308  E5C01000  STRB        R1,[R0,#0x0]
  316:                             if (index < MAX)
 0000030C  E5100000  LDR         R0,=index ; index
 00000310  E5D01000  LDRB        R1,[R0,#0x0] ; index
 00000314  E1A02001  MOV         R2,R1
 00000318  E352000A  CMP         R2,#0x000A
 0000031C  AA00000B  BGE         L_95  ; Targ=0x350
  318:                                 if (flag == 'W')
 00000320  E5100000  LDR         R0,=flag ; flag
 00000324  E5D00000  LDRB        R0,[R0,#0x0] ; flag
 00000328  E3500057  CMP         R0,#0x0057
 0000032C  1A000003  BNE         L_96  ; Targ=0x340
  320:                                     I2C0DAT     =   Buff[index];
 00000330  E5100000  LDR         R0,=Buff ; Buff
 00000334  E7D02002  LDRB        R2,[R0,+R2]
 00000338  E5100000  LDR         R0,=0xE001C008
 0000033C  E5C02000  STRB        R2,[R0,#0x0]
  322:                                 }
 00000340          L_96:
  324:                                 index++;
 00000340  E5100000  LDR         R0,=index ; index
 00000344  E2811001  ADD         R1,R1,#0x0001
 00000348  E5C01000  STRB        R1,[R0,#0x0] ; index
  325:                             }
 0000034C  EA00004A  B           L_68  ; Targ=0x47C
 00000350          L_95:
  328:                                 index = 0;
 00000350  E3A01000  MOV         R1,#0x0
 00000354  E5100000  LDR         R0,=index ; index
 00000358  E5C01000  STRB        R1,[R0,#0x0] ; index
  329:                                 flag = 0;
 0000035C  E5100000  LDR         R0,=flag ; flag
 00000360  E5C01000  STRB        R1,[R0,#0x0] ; flag
  330:                                 I2C0CONSET  =   0x10;       //Send STOP Bit
 00000364  E3A01010  MOV         R1,#0x10
 00000368  E5100000  LDR         R0,=0xE001C000
 0000036C  E5C01000  STRB        R1,[R0,#0x0]
  331:                                 I2C0CONCLR  =   1 << SI;
 00000370  E3A01008  MOV         R1,#0x8
 00000374  E5100000  LDR         R0,=0xE001C018
 00000378  E5C01000  STRB        R1,[R0,#0x0]
  334:                             break;
 0000037C  EA00003E  B           L_68  ; Targ=0x47C
  336:             case (0x38) :   /*... Arbitration lost in SLA+R/W or Data bytes ....*/
 00000380          L_76:
  338:                             I2C0CONSET  =   0x20;
 00000380  E3A01020  MOV         R1,#0x20
 00000384  E5100000  LDR         R0,=0xE001C000
 00000388  E5C01000  STRB        R1,[R0,#0x0]
  339:                             break;
 0000038C  EA00003A  B           L_68  ; Targ=0x47C
  341:             case (0x40) :   /*... SLA+R has been transmitted; ACK has been received.*/
 00000390          L_77:
  343:                             I2C0CONSET  =   1 << AA;
 00000390  E3A01004  MOV         R1,#0x4
 00000394  E5100000  LDR         R0,=0xE001C000
 00000398  E5C01000  STRB        R1,[R0,#0x0]
  344:                             I2C0CONCLR  =   1 << STA;
 0000039C  E3A01020  MOV         R1,#0x20
 000003A0  E5100000  LDR         R0,=0xE001C018
 000003A4  E5C01000  STRB        R1,[R0,#0x0]
  345:                             I2C0CONCLR  =   1 << STO;
 000003A8  E3A01010  MOV         R1,#0x10
 000003AC  E5100000  LDR         R0,=0xE001C018
ARM COMPILER V2.53,  I2C_EEPROM                                                            20/07/11  17:01:29  PAGE 20  

 000003B0  E5C01000  STRB        R1,[R0,#0x0]
  346:                             I2C0CONCLR  =   1 << SI;
 000003B4  E3A01008  MOV         R1,#0x8
 000003B8  E5100000  LDR         R0,=0xE001C018
 000003BC  E5C01000  STRB        R1,[R0,#0x0]
  347:                             break;
 000003C0  EA00002D  B           L_68  ; Targ=0x47C
  349:             case (0x48) :   /*...SLA+R has been transmitted; NOT ACK has been received ...*/
 000003C4          L_78:
  351:                             I2C0CONSET  =   1 << STA;       //Repeated Start
 000003C4  E3A01020  MOV         R1,#0x20
 000003C8  E5100000  LDR         R0,=0xE001C000
 000003CC  E5C01000  STRB        R1,[R0,#0x0]
  352:                             break;
 000003D0  EA000029  B           L_68  ; Targ=0x47C
  354:             case (0x50) :   /*... Data byte has been received; ACK has been returned ....*/
 000003D4          L_79:
  356:                             I2C0CONSET  =   1 << AA;    
 000003D4  E3A01004  MOV         R1,#0x4
 000003D8  E5100000  LDR         R0,=0xE001C000
 000003DC  E5C01000  STRB        R1,[R0,#0x0]
  357:                             if (index < MAX)
 000003E0  E5100000  LDR         R0,=index ; index
 000003E4  E5D01000  LDRB        R1,[R0,#0x0] ; index
 000003E8  E1A03001  MOV         R3,R1
 000003EC  E353000A  CMP         R3,#0x000A
 000003F0  AA000007  BGE         L_98  ; Targ=0x414
  359:                                 Rec [index] =   I2C0DAT;
 000003F4  E5100000  LDR         R0,=0xE001C008
 000003F8  E5D00000  LDRB        R0,[R0,#0x0]
 000003FC  E5102000  LDR         R2,=Rec ; Rec
 00000400  E7C20003  STRB        R0,[R2,+R3]
  360:                                 index++;
 00000404  E5100000  LDR         R0,=index ; index
 00000408  E2811001  ADD         R1,R1,#0x0001
 0000040C  E5C01000  STRB        R1,[R0,#0x0] ; index
  362:                             }
 00000410  EA000019  B           L_68  ; Targ=0x47C
 00000414          L_98:
  365:                                 I2C0CONSET  =   1 << STO;
 00000414  E3A01010  MOV         R1,#0x10
 00000418  E5100000  LDR         R0,=0xE001C000
 0000041C  E5C01000  STRB        R1,[R0,#0x0]
  366:                                 I2C0CONCLR  =   1 << SI;
 00000420  E3A01008  MOV         R1,#0x8
 00000424  E5100000  LDR         R0,=0xE001C018
 00000428  E5C01000  STRB        R1,[R0,#0x0]
  367:                                 index = 0;
 0000042C  E3A01000  MOV         R1,#0x0
 00000430  E5100000  LDR         R0,=index ; index
 00000434  E5C01000  STRB        R1,[R0,#0x0] ; index
  368:                                 Ready   =   'T';            //Make Ready TRUE after Reading is over!
 00000438  E3A01054  MOV         R1,#0x54
 0000043C  E5100000  LDR         R0,=Ready ; Ready
 00000440  E5C01000  STRB        R1,[R0,#0x0] ; Ready
  370:                             break;
 00000444  EA00000C  B           L_68  ; Targ=0x47C
  372:             case (0x58) :   /*... Data byte has been received; NOT ACK has been returned ....*/
 00000448          L_80:
  374:                             Rec [index] =   I2C0DAT;
 00000448  E5100000  LDR         R0,=0xE001C008
 0000044C  E5D00000  LDRB        R0,[R0,#0x0]
 00000450  E5101000  LDR         R1,=index ; index
 00000454  E5D11000  LDRB        R1,[R1,#0x0] ; index
 00000458  E1A02001  MOV         R2,R1
 0000045C  E5101000  LDR         R1,=Rec ; Rec
ARM COMPILER V2.53,  I2C_EEPROM                                                            20/07/11  17:01:29  PAGE 21  

 00000460  E7C10002  STRB        R0,[R1,+R2]
  375:                             I2C0CONCLR  =   1 << STA;
 00000464  E3A01020  MOV         R1,#0x20
 00000468  E5100000  LDR         R0,=0xE001C018
 0000046C  E5C01000  STRB        R1,[R0,#0x0]
  376:                             I2C0CONCLR  =   1 << STO;
 00000470  E3A01010  MOV         R1,#0x10
 00000474  E5100000  LDR         R0,=0xE001C018
 00000478  E5C01000  STRB        R1,[R0,#0x0]
  380:     }
 0000047C          L_68:
  381:     I2C0CONCLR  =   1 << SI;
 0000047C  E3A01008  MOV         R1,#0x8
 00000480  E5100000  LDR         R0,=0xE001C018
 00000484  E5C01000  STRB        R1,[R0,#0x0]
  382:     VICVectAddr =   0x00;
 00000488  E3A01000  MOV         R1,#0x0
 0000048C  E5100000  LDR         R0,=0xFFFFF030
 00000490  E5801000  STR         R1,[R0,#0x0]
  383: }
 00000494  E8BD5F1F  LDMIA       R13!,{R0-R4,R8-R12,LR}
 00000498  E25EF004  SUBS        R15,R14,#0x0004
 0000049C          ENDP ; 'I2C_ISR?A'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =        35
  const size           =       377
End of Module Information.


ARM COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
