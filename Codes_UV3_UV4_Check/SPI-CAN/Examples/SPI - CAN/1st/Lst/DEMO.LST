ARM COMPILER V2.53,  Demo                                                                  16/04/16  17:32:56  PAGE 1   


ARM COMPILER V2.53, COMPILATION OF MODULE Demo
OBJECT MODULE PLACED IN .\Obj\Demo.obj
COMPILER INVOKED BY: C:\KeilUV3\ARM\BIN\CA.exe Demo.c ARM BROWSE INCDIR(..\..\..\INC;..\..\..\OBJ) DEBUG SYMBOLS PRINT(.
                    -\LST\DEMO.LST) TABS(4) OBJECT(.\Obj\Demo.obj) 

stmt  level    source

    1          /*
    2           * Project name:
    3               DEMO (CAN Network demonstration  CAN onboard module)
    4               1st Board demo
    5           * Description:
    6                The Can_1st node initiates the communication with the Can_2nd node by
    7                sending some data to its address. The 1st node then does the same and sends
    8                incremented data back to 2nd node, etc.
    9           * Test configuration:
   10               MCU:             LPC2148
   11               Dev.Board:       PRimer Board
   12               Oscillator:      12.0 MHz (cclk = 60.0 MHz, Fcco = 240.0 MHz)
   13               SW:              KEIL uVision3 v3.50
   14           * BOARD NOTES:
   15               - Place 100Kohm pull-up resistor networks RN1 to R9
   16               - Turn on CAN-CS, CAN-RST & CAN-INT located on DIP switch
   17               - Turn on MOSI, MISO & SCK located on SW4 DIP switch
   18               - Connect CANs with 2-wire cable (L-L, H-H)
   19               - The indicator of good communication in this example is,
   20                 that the _1st node always displays data on PORTF P1[31..24],
   21                 whilst the _2nd node always displays ODD data on PORTF P1[31..24].
   22          */
   23          
   24          
   25          #include <LPC214X.H>
   26          
   27          #include "CAN_SPIsw.h"
   28          #include "CAN_SPIconst.h"
   29          #include "SPIsw.h"
   30          #include "Utility.h"
   31          
   32          void DelayMs(unsigned int ms);
   33          
   34          unsigned char
   35              aa, aa1, aa2,
   36              len,
   37              zr,
   38              cont,
   39              oldstate,
   40              data[8];
   41          
   42          unsigned long
   43              id;
   44          
   45          
   46          
   47          int main (void)
   48          {
   49   1          PINSEL0 = 0;
   50   1          PINSEL1 = 0;
   51   1          PINSEL2 &= 0x0000000C;
   52   1      
   53   1      
   54   1          //--- prepare port PORT1[23..16] as Initialization pgr indicator
   55   1          IOCLR1 |= ((unsigned long)0xFF << 16);          // PORT1[23..16] = 0
   56   1          IODIR1 |= ((unsigned long)0xFF << 16);          // PORT1[23..16] output
   57   1          //--- prepare port PORT1[31..24] as Data Value indicator
   58   1          IOCLR1 |= ((unsigned long)0xFF << 24);          // PORT1[31..24] = 0
ARM COMPILER V2.53,  Demo                                                                  16/04/16  17:32:56  PAGE 2   

   59   1          IODIR1 |= ((unsigned long)0xFF << 24);          // PORT1[31..24] output
   60   1      
   61   1          //--- initialize SPI (mode 0,0)
   62   1          IODIR0 |= ((unsigned long)1 << 11);                 // P0.11 output
   63   1          IODIR0 |= ((unsigned long)1 << 10);                 // P0.10 output
   64   1          IOSET0 |= ((unsigned long)1 << 11);                 // P0.11 = 1            // RESET line
   65   1          IOCLR0 |= ((unsigned long)1 << 10);                 // P0.10 = 0            // CS line
   66   1      
   67   1          SPI_init(&IOPIN0, 10/*CS*/, 5/*MISO*/, 6/*MOSI*/, 4/*SCK*/, 0/*CPOL*/, 0/*CPHA*/);
   68   1      
   69   1          //--- configure CAN_SPI module
   70   1          aa = 0;
   71   1          aa1 = 0;
   72   1          aa2 = 0;
   73   1          aa =    CAN_CONFIG_SAMPLE_THRICE &                              // form value to be used
   74   1                      CAN_CONFIG_PHSEG2_PRG_ON &                          // with CANSPIInitialize
   75   1                      CAN_CONFIG_STD_MSG &
   76   1                      CAN_CONFIG_DBL_BUFFER_ON &
   77   1                      CAN_CONFIG_VALID_XTD_MSG;
   78   1          aa1 =   CAN_TX_PRIORITY_0 &                                     // form value to be used
   79   1                      CAN_TX_XTD_FRAME &                                  // with CANSPIWrite
   80   1                      CAN_TX_NO_RTR_FRAME;
   81   1          IOSET0 |= (1 << 10);                                            // set CS line for CAN module high (inactive)
   82   1          id = -1;                                                        // id temporarily used for SetMask operation
   83   1          CANSPIInitialize(1,1,3,3,1,aa);                                 // initialize external CAN module
   84   1          IOCLR1 |= (0xFF << 16);                                         // PORT1[23..16] = 3;
   85   1          IOSET1 |= (0x03 << 16);
   86   1      
   87   1          CANSPISetOperationMode(CAN_MODE_CONFIG,0xFF);                   // set CONFIGURATION mode
   88   1          IOCLR1 |= (0xFF << 16);                                         // PORT1[23..16] = 4;
   89   1          IOSET1 |= (0x04 << 16);
   90   1      
   91   1          CANSPISetMask(CAN_MASK_B1,id,CAN_CONFIG_XTD_MSG);               // set all mask1 bits to ones
   92   1          CANSPISetMask(CAN_MASK_B2,id,CAN_CONFIG_XTD_MSG);               // set all mask2 bits to ones
   93   1          CANSPISetFilter(CAN_FILTER_B2_F4,3,CAN_CONFIG_XTD_MSG);         // set id of filter B1_F1 to 3
   94   1          CANSPISetOperationMode(CAN_MODE_NORMAL,0xFF);                               // set NORMAL mode
   95   1          IOCLR1 |= (0xFF << 16);                                         // PORT1[23..16] = 5;
   96   1          IOSET1 |= (0x05 << 16);
   97   1      
   98   1          data[0] = 7;
   99   1          id = 12111;
  100   1          IOCLR1 |= (0xFF << 16);                                         // PORT1[23..16] = 255;
  101   1          IOSET1 |= (0xFF << 16);
  102   1      
  103   1          CANSPIWrite (id,data,1,aa1);                                    // 1st node initiates communication
  104   1      
  105   1      
  106   1          while (1)
  107   1          {
  108   2              zr = CANSPIRead(&id , data , &len, &aa2);
  109   2              if ((id == 3) && zr)                                        // respond only to data from node No.3
  110   2              {
  111   3                  IOCLR1 |= (0xFF << 16);                                 // output data at PORT1[23..16]
  112   3                  IOSET1 |= ((unsigned long)data[0] << 16) & 0x00FF0000;
  113   3                  data[0]++ ;
  114   3                  id = 12111;
  115   3                  //delay_Nx10cyc(5999999);                                   // Delay 1s
  116   3                  CANSPIWrite(id, data, 1,aa1);                           // send incremented data back
  117   3                  DelayMs(1000);
  118   3              }
  119   2          }
  120   1      }
  121          
  122          void DelayMs(unsigned int ms)                     //Delay at 30Mhz frquency
  123          {
  124   1          long i,j;
ARM COMPILER V2.53,  Demo                                                                  16/04/16  17:32:56  PAGE 3   

  125   1          for (i = 0; i < ms; i++ )
  126   1          for (j = 0; j < 6659; j++ );
  127   1      }
ARM COMPILER V2.53,  Demo                                                                  16/04/16  17:32:56  PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE32 (CANSPIInitialize?A)
 EXTERN CODE32 (CANSPISetOperationMode?A)
 EXTERN CODE32 (CANSPISetMask?A)
 EXTERN CODE32 (CANSPISetFilter?A)
 EXTERN CODE32 (CANSPIRead?A)
 EXTERN CODE32 (CANSPIWrite?A)
 EXTERN CODE32 (SPI_init?A)
 EXTERN NUMBER (__startup)



*** PUBLICS:
 PUBLIC         DelayMs?A
 PUBLIC         main
 PUBLIC         aa
 PUBLIC         aa1
 PUBLIC         aa2
 PUBLIC         len
 PUBLIC         zr
 PUBLIC         cont
 PUBLIC         oldstate
 PUBLIC         data
 PUBLIC         id



*** DATA SEGMENT '?DT0?Demo':
 00000000          id:
 00000000            DS          4
 00000004          aa:
 00000004            DS          1
 00000005          aa1:
 00000005            DS          1
 00000006          aa2:
 00000006            DS          1
 00000007          len:
 00000007            DS          1
 00000008          zr:
 00000008            DS          1
 00000009          cont:
 00000009            DS          1
 0000000A          oldstate:
 0000000A            DS          1
 0000000B          data:
 0000000B            DS          8



*** CODE SEGMENT '?PR?main?Demo':
   47: int main (void)
 00000000  E92D4000  STMDB       R13!,{LR}
   49:     PINSEL0 = 0;
 00000004  E3A01000  MOV         R1,#0x0
 00000008  E5100000  LDR         R0,=0xE002C000
 0000000C  E5801000  STR         R1,[R0,#0x0]
   50:     PINSEL1 = 0;
 00000010  E5100000  LDR         R0,=0xE002C004
 00000014  E5801000  STR         R1,[R0,#0x0]
   51:     PINSEL2 &= 0x0000000C;
 00000018  E5100000  LDR         R0,=0xE002C014
 0000001C  E5901000  LDR         R1,[R0,#0x0]
 00000020  E201100C  AND         R1,R1,#0x000C
 00000024  E5801000  STR         R1,[R0,#0x0]
   55:     IOCLR1 |= ((unsigned long)0xFF << 16);          // PORT1[23..16] = 0
 00000028  E5100000  LDR         R0,=0xE002801C
 0000002C  E5901000  LDR         R1,[R0,#0x0]
 00000030  E38118FF  ORR         R1,R1,#0xFF0000
 00000034  E5801000  STR         R1,[R0,#0x0]
ARM COMPILER V2.53,  Demo                                                                  16/04/16  17:32:56  PAGE 5   

   56:     IODIR1 |= ((unsigned long)0xFF << 16);          // PORT1[23..16] output
 00000038  E5100000  LDR         R0,=0xE0028018
 0000003C  E5901000  LDR         R1,[R0,#0x0]
 00000040  E38118FF  ORR         R1,R1,#0xFF0000
 00000044  E5801000  STR         R1,[R0,#0x0]
   58:     IOCLR1 |= ((unsigned long)0xFF << 24);          // PORT1[31..24] = 0
 00000048  E5100000  LDR         R0,=0xE002801C
 0000004C  E5901000  LDR         R1,[R0,#0x0]
 00000050  E38114FF  ORR         R1,R1,#0xFF000000
 00000054  E5801000  STR         R1,[R0,#0x0]
   59:     IODIR1 |= ((unsigned long)0xFF << 24);          // PORT1[31..24] output
 00000058  E5100000  LDR         R0,=0xE0028018
 0000005C  E5901000  LDR         R1,[R0,#0x0]
 00000060  E38114FF  ORR         R1,R1,#0xFF000000
 00000064  E5801000  STR         R1,[R0,#0x0]
   62:     IODIR0 |= ((unsigned long)1 << 11);                 // P0.11 output
 00000068  E5100000  LDR         R0,=0xE0028008
 0000006C  E5901000  LDR         R1,[R0,#0x0]
 00000070  E3811B02  ORR         R1,R1,#0x0800
 00000074  E5801000  STR         R1,[R0,#0x0]
   63:     IODIR0 |= ((unsigned long)1 << 10);                 // P0.10 output
 00000078  E5100000  LDR         R0,=0xE0028008
 0000007C  E5901000  LDR         R1,[R0,#0x0]
 00000080  E3811B01  ORR         R1,R1,#0x0400
 00000084  E5801000  STR         R1,[R0,#0x0]
   64:     IOSET0 |= ((unsigned long)1 << 11);                 // P0.11 = 1            // RESET line
 00000088  E5100000  LDR         R0,=0xE0028004
 0000008C  E5901000  LDR         R1,[R0,#0x0]
 00000090  E3811B02  ORR         R1,R1,#0x0800
 00000094  E5801000  STR         R1,[R0,#0x0]
   65:     IOCLR0 |= ((unsigned long)1 << 10);                 // P0.10 = 0            // CS line
 00000098  E5100000  LDR         R0,=0xE002800C
 0000009C  E5901000  LDR         R1,[R0,#0x0]
 000000A0  E3811B01  ORR         R1,R1,#0x0400
 000000A4  E5801000  STR         R1,[R0,#0x0]
   67:     SPI_init(&IOPIN0, 10/*CS*/, 5/*MISO*/, 6/*MOSI*/, 4/*SCK*/, 0/*CPOL*/, 0/*CPHA*/);
 000000A8  E3A00000  MOV         R0,#0x0
 000000AC  E92D0001  STMDB       R13!,{R0}
 000000B0  E92D0001  STMDB       R13!,{R0}
 000000B4  E3A00004  MOV         R0,#0x4
 000000B8  E92D0001  STMDB       R13!,{R0}
 000000BC  E5100000  LDR         R0,=0xE0028000
 000000C0  E3A0100A  MOV         R1,#0xA
 000000C4  E3A02005  MOV         R2,#0x5
 000000C8  E3A03006  MOV         R3,#0x6
 000000CC  EBFFFFCB  BL          SPI_init?A  ; Targ=0x0
 000000D0  E28DD00C  ADD         R13,R13,#0x000C
   70:     aa = 0;
 000000D4  E3A01000  MOV         R1,#0x0
 000000D8  E5100000  LDR         R0,=aa ; aa
 000000DC  E5C01000  STRB        R1,[R0,#0x0] ; aa
   71:     aa1 = 0;
 000000E0  E5100000  LDR         R0,=aa1 ; aa1
 000000E4  E5C01000  STRB        R1,[R0,#0x0] ; aa1
   72:     aa2 = 0;
 000000E8  E5100000  LDR         R0,=aa2 ; aa2
 000000EC  E5C01000  STRB        R1,[R0,#0x0] ; aa2
   73:     aa =    CAN_CONFIG_SAMPLE_THRICE &                              // form value to be used
 000000F0  E3A010DB  MOV         R1,#0xDB
 000000F4  E5100000  LDR         R0,=aa ; aa
 000000F8  E5C01000  STRB        R1,[R0,#0x0] ; aa
   78:     aa1 =   CAN_TX_PRIORITY_0 &                                     // form value to be used
 000000FC  E3A010F4  MOV         R1,#0xF4
 00000100  E5100000  LDR         R0,=aa1 ; aa1
 00000104  E5C01000  STRB        R1,[R0,#0x0] ; aa1
   81:     IOSET0 |= (1 << 10);                                            // set CS line for CAN module high (inactive)
ARM COMPILER V2.53,  Demo                                                                  16/04/16  17:32:56  PAGE 6   

 00000108  E5100000  LDR         R0,=0xE0028004
 0000010C  E5901000  LDR         R1,[R0,#0x0]
 00000110  E3811B01  ORR         R1,R1,#0x0400
 00000114  E5801000  STR         R1,[R0,#0x0]
   82:     id = -1;                                                        // id temporarily used for SetMask operation
 00000118  E3E01000  MVN         R1,#0x0
 0000011C  E5100000  LDR         R0,=id ; id
 00000120  E5801000  STR         R1,[R0,#0x0] ; id
   83:     CANSPIInitialize(1,1,3,3,1,aa);                                 // initialize external CAN module
 00000124  E5100000  LDR         R0,=aa ; aa
 00000128  E5D00000  LDRB        R0,[R0,#0x0] ; aa
 0000012C  E92D0001  STMDB       R13!,{R0}
 00000130  E3A01001  MOV         R1,#0x1
 00000134  E92D0002  STMDB       R13!,{R1}
 00000138  E1A00001  MOV         R0,R1
 0000013C  E3A03003  MOV         R3,#0x3
 00000140  E1A02003  MOV         R2,R3
 00000144  EBFFFFAD  BL          CANSPIInitialize?A  ; Targ=0x0
 00000148  E28DD008  ADD         R13,R13,#0x0008
   84:     IOCLR1 |= (0xFF << 16);                                         // PORT1[23..16] = 3;
 0000014C  E5100000  LDR         R0,=0xE002801C
 00000150  E5901000  LDR         R1,[R0,#0x0]
 00000154  E38118FF  ORR         R1,R1,#0xFF0000
 00000158  E5801000  STR         R1,[R0,#0x0]
   85:     IOSET1 |= (0x03 << 16);
 0000015C  E5100000  LDR         R0,=0xE0028014
 00000160  E5901000  LDR         R1,[R0,#0x0]
 00000164  E3811803  ORR         R1,R1,#0x30000
 00000168  E5801000  STR         R1,[R0,#0x0]
   87:     CANSPISetOperationMode(CAN_MODE_CONFIG,0xFF);                   // set CONFIGURATION mode
 0000016C  E3A00080  MOV         R0,#0x80
 00000170  E3A010FF  MOV         R1,#0xFF
 00000174  EBFFFFA1  BL          CANSPISetOperationMode?A  ; Targ=0x0
   88:     IOCLR1 |= (0xFF << 16);                                         // PORT1[23..16] = 4;
 00000178  E5100000  LDR         R0,=0xE002801C
 0000017C  E5901000  LDR         R1,[R0,#0x0]
 00000180  E38118FF  ORR         R1,R1,#0xFF0000
 00000184  E5801000  STR         R1,[R0,#0x0]
   89:     IOSET1 |= (0x04 << 16);
 00000188  E5100000  LDR         R0,=0xE0028014
 0000018C  E5901000  LDR         R1,[R0,#0x0]
 00000190  E3811701  ORR         R1,R1,#0x40000
 00000194  E5801000  STR         R1,[R0,#0x0]
   91:     CANSPISetMask(CAN_MASK_B1,id,CAN_CONFIG_XTD_MSG);               // set all mask1 bits to ones
 00000198  E5100000  LDR         R0,=id ; id
 0000019C  E5901000  LDR         R1,[R0,#0x0] ; id
 000001A0  E3A00000  MOV         R0,#0x0
 000001A4  E3A020F7  MOV         R2,#0xF7
 000001A8  EBFFFF94  BL          CANSPISetMask?A  ; Targ=0x0
   92:     CANSPISetMask(CAN_MASK_B2,id,CAN_CONFIG_XTD_MSG);               // set all mask2 bits to ones
 000001AC  E5100000  LDR         R0,=id ; id
 000001B0  E5901000  LDR         R1,[R0,#0x0] ; id
 000001B4  E3A00001  MOV         R0,#0x1
 000001B8  E3A020F7  MOV         R2,#0xF7
 000001BC  EBFFFF8F  BL          CANSPISetMask?A  ; Targ=0x0
   93:     CANSPISetFilter(CAN_FILTER_B2_F4,3,CAN_CONFIG_XTD_MSG);         // set id of filter B1_F1 to 3
 000001C0  E3A00005  MOV         R0,#0x5
 000001C4  E3A01003  MOV         R1,#0x3
 000001C8  E3A020F7  MOV         R2,#0xF7
 000001CC  EBFFFF8B  BL          CANSPISetFilter?A  ; Targ=0x0
   94:     CANSPISetOperationMode(CAN_MODE_NORMAL,0xFF);                               // set NORMAL mode
 000001D0  E3A00000  MOV         R0,#0x0
 000001D4  E3A010FF  MOV         R1,#0xFF
 000001D8  EBFFFF88  BL          CANSPISetOperationMode?A  ; Targ=0x0
   95:     IOCLR1 |= (0xFF << 16);                                         // PORT1[23..16] = 5;
 000001DC  E5100000  LDR         R0,=0xE002801C
ARM COMPILER V2.53,  Demo                                                                  16/04/16  17:32:56  PAGE 7   

 000001E0  E5901000  LDR         R1,[R0,#0x0]
 000001E4  E38118FF  ORR         R1,R1,#0xFF0000
 000001E8  E5801000  STR         R1,[R0,#0x0]
   96:     IOSET1 |= (0x05 << 16);
 000001EC  E5100000  LDR         R0,=0xE0028014
 000001F0  E5901000  LDR         R1,[R0,#0x0]
 000001F4  E3811805  ORR         R1,R1,#0x50000
 000001F8  E5801000  STR         R1,[R0,#0x0]
   98:     data[0] = 7;
 000001FC  E3A01007  MOV         R1,#0x7
 00000200  E5100000  LDR         R0,=data ; data
 00000204  E5C01000  STRB        R1,[R0,#0x0] ; data
   99:     id = 12111;
 00000208  E5101000  LDR         R1,=0x2F4F
 0000020C  E5100000  LDR         R0,=id ; id
 00000210  E5801000  STR         R1,[R0,#0x0] ; id
  100:     IOCLR1 |= (0xFF << 16);                                         // PORT1[23..16] = 255;
 00000214  E5100000  LDR         R0,=0xE002801C
 00000218  E5901000  LDR         R1,[R0,#0x0]
 0000021C  E38118FF  ORR         R1,R1,#0xFF0000
 00000220  E5801000  STR         R1,[R0,#0x0]
  101:     IOSET1 |= (0xFF << 16);
 00000224  E5100000  LDR         R0,=0xE0028014
 00000228  E5901000  LDR         R1,[R0,#0x0]
 0000022C  E38118FF  ORR         R1,R1,#0xFF0000
 00000230  E5801000  STR         R1,[R0,#0x0]
  103:     CANSPIWrite (id,data,1,aa1);                                    // 1st node initiates communication
 00000234  E5100000  LDR         R0,=aa1 ; aa1
 00000238  E5D00000  LDRB        R0,[R0,#0x0] ; aa1
 0000023C  E1A03000  MOV         R3,R0
 00000240  E5100000  LDR         R0,=id ; id
 00000244  E5900000  LDR         R0,[R0,#0x0] ; id
 00000248  E5101000  LDR         R1,=data ; data
 0000024C  E3A02001  MOV         R2,#0x1
 00000250  EBFFFF6A  BL          CANSPIWrite?A  ; Targ=0x0
  106:     while (1)
 00000254          L_3:
  108:         zr = CANSPIRead(&id , data , &len, &aa2);
 00000254  E5100000  LDR         R0,=id ; id
 00000258  E5101000  LDR         R1,=data ; data
 0000025C  E5102000  LDR         R2,=len ; len
 00000260  E5103000  LDR         R3,=aa2 ; aa2
 00000264  EBFFFF65  BL          CANSPIRead?A  ; Targ=0x0
 00000268  E5101000  LDR         R1,=zr ; zr
 0000026C  E5C10000  STRB        R0,[R1,#0x0] ; zr
  109:         if ((id == 3) && zr)                                        // respond only to data from node No.3
 00000270  E5100000  LDR         R0,=id ; id
 00000274  E5900000  LDR         R0,[R0,#0x0] ; id
 00000278  E3500003  CMP         R0,#0x0003
 0000027C  1AFFFFF4  BNE         L_3  ; Targ=0x254
 00000280  E5100000  LDR         R0,=zr ; zr
 00000284  E5D00000  LDRB        R0,[R0,#0x0] ; zr
 00000288  E3500000  CMP         R0,#0x0000
 0000028C  0AFFFFF0  BEQ         L_3  ; Targ=0x254
  111:             IOCLR1 |= (0xFF << 16);                                 // output data at PORT1[23..16]
 00000290  E5100000  LDR         R0,=0xE002801C
 00000294  E5901000  LDR         R1,[R0,#0x0]
 00000298  E38118FF  ORR         R1,R1,#0xFF0000
 0000029C  E5801000  STR         R1,[R0,#0x0]
  112:             IOSET1 |= ((unsigned long)data[0] << 16) & 0x00FF0000;
 000002A0  E5100000  LDR         R0,=data ; data
 000002A4  E5D00000  LDRB        R0,[R0,#0x0] ; data
 000002A8  E1A02000  MOV         R2,R0
 000002AC  E1A02802  MOV         R2,R2,LSL #16
 000002B0  E20228FF  AND         R2,R2,#0xFF0000
 000002B4  E5100000  LDR         R0,=0xE0028014
ARM COMPILER V2.53,  Demo                                                                  16/04/16  17:32:56  PAGE 8   

 000002B8  E5901000  LDR         R1,[R0,#0x0]
 000002BC  E1811002  ORR         R1,R1,R2
 000002C0  E5801000  STR         R1,[R0,#0x0]
  113:             data[0]++ ;
 000002C4  E5100000  LDR         R0,=data ; data
 000002C8  E5D01000  LDRB        R1,[R0,#0x0] ; data
 000002CC  E2811001  ADD         R1,R1,#0x0001
 000002D0  E5C01000  STRB        R1,[R0,#0x0] ; data
  114:             id = 12111;
 000002D4  E5101000  LDR         R1,=0x2F4F
 000002D8  E5100000  LDR         R0,=id ; id
 000002DC  E5801000  STR         R1,[R0,#0x0] ; id
  116:             CANSPIWrite(id, data, 1,aa1);                           // send incremented data back
 000002E0  E5100000  LDR         R0,=aa1 ; aa1
 000002E4  E5D00000  LDRB        R0,[R0,#0x0] ; aa1
 000002E8  E1A03000  MOV         R3,R0
 000002EC  E5100000  LDR         R0,=id ; id
 000002F0  E5900000  LDR         R0,[R0,#0x0] ; id
 000002F4  E5101000  LDR         R1,=data ; data
 000002F8  E3A02001  MOV         R2,#0x1
 000002FC  EBFFFF3F  BL          CANSPIWrite?A  ; Targ=0x0
  117:             DelayMs(1000);
 00000300  E3A00FFA  MOV         R0,#0x3E8
 00000304  EBFFFF3D  BL          DelayMs?A  ; Targ=0x0
  119:     }
 00000308  EAFFFFD1  B           L_3  ; Targ=0x254
  120: }
 0000030C  E8BD0008  LDMIA       R13!,{R3}
 00000310  E12FFF13  BX          R3
 00000314          ENDP ; 'main'


*** CODE SEGMENT '?PR?DelayMs?A?Demo':
  122: void DelayMs(unsigned int ms)                     //Delay at 30Mhz frquency
 00000000  E92D0010  STMDB       R13!,{R4}
 00000004  ---- Variable 'ms' assigned to Register 'R0' ----
  123: {
 00000004            ; SCOPE-START
  125:     for (i = 0; i < ms; i++ )
 00000004  E3A01000  MOV         R1,#0x0
 00000008  ---- Variable 'i' assigned to Register 'R1' ----
 00000008  EA000006  B           L_8  ; Targ=0x28
  126:     for (j = 0; j < 6659; j++ );
 0000000C          L_15:
 0000000C  E3A02000  MOV         R2,#0x0
 00000010  ---- Variable 'j' assigned to Register 'R2' ----
 00000010          L_11:
 00000010  E2822001  ADD         R2,R2,#0x0001 ; j
 00000014  E1A03002  MOV         R3,R2 ; j
 00000018  E5104000  LDR         R4,=0x1A03
 0000001C  E1530004  CMP         R3,R4 ; j
 00000020  BAFFFFFA  BLT         L_11  ; Targ=0x10
 00000024  E2811001  ADD         R1,R1,#0x0001 ; i
 00000028          L_8:
 00000028  E1A03000  MOV         R3,R0 ; ms
 0000002C  E1A02001  MOV         R2,R1 ; i
 00000030  E1520003  CMP         R2,R3 ; i
 00000034  BAFFFFF4  BLT         L_15  ; Targ=0xC
 00000038            ; SCOPE-END
 00000038  E8BD0010  LDMIA       R13!,{R4}
 0000003C  E12FFF1E  BX          R14
 00000040          ENDP ; 'DelayMs?A'

ARM COMPILER V2.53,  Demo                                                                  16/04/16  17:32:56  PAGE 9   

Name                                    Class    Space Type   Offset   Size
---------------------------------------------------------------------------

CANSPIInitialize?A . . . . . . . . . .  extern   code  funct  000000H  
CANSPISetOperationMode?A . . . . . . .  extern   code  funct  000000H  
CANSPISetMask?A. . . . . . . . . . . .  extern   code  funct  000000H  
CANSPISetFilter?A. . . . . . . . . . .  extern   code  funct  000000H  
CANSPIRead?A . . . . . . . . . . . . .  extern   code  funct  000000H  
CANSPIWrite?A. . . . . . . . . . . . .  extern   code  funct  000000H  
SPI_init?A . . . . . . . . . . . . . .  extern   code  funct  000000H  
DelayMs?A. . . . . . . . . . . . . . .  public   code  funct  000000H  
  ms . . . . . . . . . . . . . . . . .  *reg*          uint   -----    4
  i. . . . . . . . . . . . . . . . . .  *reg*          long   -----    4
  j. . . . . . . . . . . . . . . . . .  *reg*          long   -----    4
main . . . . . . . . . . . . . . . . .  public   code  funct  000000H  
aa . . . . . . . . . . . . . . . . . .  public   data  uchar  000004H  1
aa1. . . . . . . . . . . . . . . . . .  public   data  uchar  000005H  1
aa2. . . . . . . . . . . . . . . . . .  public   data  uchar  000006H  1
len. . . . . . . . . . . . . . . . . .  public   data  uchar  000007H  1
zr . . . . . . . . . . . . . . . . . .  public   data  uchar  000008H  1
cont . . . . . . . . . . . . . . . . .  public   data  uchar  000009H  1
oldstate . . . . . . . . . . . . . . .  public   data  uchar  00000AH  1
data . . . . . . . . . . . . . . . . .  public   data  array  00000BH  8
id . . . . . . . . . . . . . . . . . .  public   data  ulong  000000H  4


Module Information          Static
----------------------------------
  code size            =    ------
  data size            =        19
  const size           =    ------
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
