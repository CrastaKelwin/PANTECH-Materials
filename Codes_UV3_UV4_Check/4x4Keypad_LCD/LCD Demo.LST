ARM COMPILER V2.53,  LCD_Demo                                                              20/08/08  18:15:02  PAGE 1   


ARM COMPILER V2.53, COMPILATION OF MODULE LCD_Demo
OBJECT MODULE PLACED IN .\Out\LCD Demo.obj
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe LCD Demo.c THUMB DEBUG TABS(4) OBJECT(.\Out\LCD Demo.obj) 

stmt  level    source

    1          /********************************************************************
    2          
    3          #######################################################################
    4          ##                                                                   ##
    5          ## Important : Not to be Disclosed to the Clients..                  ##
    6          ## This is transferred into as an object File and...                 ##
    7          ## is included only for the Company's Development Purpose...         ##
    8          ##                                                                   ##
    9          ##      © Pantech Solutions | All rights Reserved.                   ##
   10          ##                                                                   ##
   11          #######################################################################
   12          
   13              2X16 char LCD Demo Program in 8-bit Mode
   14              ----------------------------------------
   15              
   16              Description
   17              -----------
   18              Display Simple text message.
   19          
   20              Test configuration:
   21              -------------------
   22              Oscillator:      12.0 MHz (cclk = 60.0 MHz, Fcco = 240.0 MHz)
   23          
   24              Connections
   25              -----------
   26              Control Lines(P0.8--0.15)           
   27              P0.12   -   RS                  
   28              P0.13   -   RW                  
   29              P0.14   -   EN
   30              
   31                                  
   32          /********************************************************************/
   33          
   34          #include <lpc21xx.h>
   35          #include <stdio.h>
   36          #include "LCD8.H"
   37          
   38          extern void DelayMs();
   39          
   40          unsigned char msg[] = ("LPC2138 ARM ADB");  //msg
   41          unsigned char msg1[]= ("  Keypad Demo  ");  //msg1
   42          unsigned char msg2[]= {"Press any Key.."};      //msg3
   43          
   44          const unsigned char cmd[4] = {0x38,0x0c,0x06,0x01}; //lcd commands
   45          
   46          unsigned long RS,RW,E;
   47          unsigned char D0;
   48          
   49          //----------------------------------
   50          //      LCD Initialize
   51          //----------------------------------
   52          
   53          void lcd_initialize(unsigned long *LCDPort)
   54          {
   55   1          int i;
   56   1          for(i=0;i<4;i++)
   57   1          {
   58   2              *(LCDPort + 3) = 0xFF << D0;            //IOCLR 0/1
   59   2              lcd_cmd(LCDPort, D0, cmd[i]);
ARM COMPILER V2.53,  LCD_Demo                                                              20/08/08  18:15:02  PAGE 2   

   60   2              delay(15); 
   61   2          }
   62   1      
   63   1      }
   64          
   65          
   66          
   67          //----------------------------------
   68          //      LCD Command Send
   69          //----------------------------------
   70          void lcd_cmd(unsigned long *LCDPort, unsigned char D0, unsigned char data)
   71          {
   72   1          *(LCDPort)  = data << D0;
   73   1          IOCLR0  |= 0x1000;      //RS
   74   1          IOCLR0  |= 0x2000;      //RW
   75   1          IOSET0  |= 0x4000;      //EN
   76   1          delay(15); 
   77   1          IOCLR0  |= 0x4000;      //EN
   78   1      }
   79          
   80          
   81          
   82          //----------------------------------
   83          //      LCD Data Send
   84          //----------------------------------
   85          void lcd_data(unsigned long *LCDPort, unsigned char D0, unsigned char data)
   86          {
   87   1          *LCDPort = data << D0;
   88   1          IOSET0  |= 0x1000;      //RS
   89   1          IOCLR0  |= 0x2000;      //RW
   90   1          IOSET0  |= 0x4000;      //EN
   91   1          delay(15); 
   92   1          IOCLR0  |= 0x4000;      //EN
   93   1      }
   94          
   95          
   96          
   97          
   98          //----------------------------------
   99          //      LCD Display Msg
  100          //----------------------------------
  101          void lcd_display(unsigned long *LCDPort, unsigned char D0)
  102          {
  103   1          char i;
  104   1      
  105   1          //first line message
  106   1          *(LCDPort + 3) = 0xFF << D0;
  107   1          lcd_cmd(LCDPort, D0, 0x80);
  108   1          delay(15); 
  109   1          i=0;
  110   1          while(msg[i]!='\0')
  111   1          {
  112   2              *(LCDPort + 3) = 0xFF << D0;
  113   2              lcd_data(LCDPort, D0, msg[i]);
  114   2              i++;
  115   2          }
  116   1          delay(15); 
  117   1      
  118   1          //second line message
  119   1          *(LCDPort + 3) = 0xFF << D0;
  120   1          lcd_cmd(LCDPort, D0, 0xc0);
  121   1          delay(15); 
  122   1          i=0;
  123   1          while(msg1[i]!='\0')
  124   1              {
  125   2                  *(LCDPort + 3) = 0xFF << D0;
ARM COMPILER V2.53,  LCD_Demo                                                              20/08/08  18:15:02  PAGE 3   

  126   2                  lcd_data(LCDPort, D0, msg1[i]);
  127   2                  i++;
  128   2              }
  129   1          delay(15); 
  130   1      
  131   1          DelayMs();
  132   1          DelayMs();
  133   1          
  134   1          lcd_cmd(LCDPort,D0,0xC0);
  135   1      
  136   1          DelayMs();
  137   1      
  138   1          i=0;
  139   1          while (msg2[i] != '\0')
  140   1          {
  141   2              *(LCDPort + 3) = 0xFF << D0;
  142   2              lcd_data(LCDPort, D0, msg2[i]);
  143   2              i++;
  144   2          }
  145   1      }
  146          
  147          
  148          //----------------------------------
  149          //      Delay Routine
  150          //----------------------------------
  151          void delay(unsigned int n)
  152          {
  153   1          int i,j;
  154   1          for(i=0;i<n;i++)
  155   1          {
  156   2              for(j=0;j<0x2700;j++)
  157   2              {;}
  158   2          }
  159   1      }    
  160          
  161          
  162          
  163          //----------------------------------
  164          //      Main program Starts Here
  165          //----------------------------------
  166          void LCD_Config(unsigned long *LCDPort, unsigned char Dat)
  167          {
  168   1      
  169   1          D0 = Dat;
  170   1          *(LCDPort + 2) |= 0xFF << D0;   //Configuring OutPut Pins Corresponding to the D0
  171   1          *(LCDPort + 2) |= 0x7000;       //Configuring Default Control Pins
  172   1      
  173   1          delay(10);
  174   1      
  175   1          lcd_initialize(LCDPort/*Data Port*/);       //Initialize LCD
  176   1          delay(10);  
  177   1          lcd_display(LCDPort/*Data Port*/, D0 /*Data Line LSB*/);        //display message
  178   1          delay(10);
  179   1      
  180   1      
  181   1      
  182   1      
  183   1      }
ARM COMPILER V2.53,  LCD_Demo                                                              20/08/08  18:15:02  PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (DelayMs?T)



*** PUBLICS:
 PUBLIC         lcd_initialize?T
 PUBLIC         delay?T
 PUBLIC         lcd_cmd?T
 PUBLIC         lcd_data?T
 PUBLIC         LCD_Config?T
 PUBLIC         lcd_display?T
 PUBLIC         msg
 PUBLIC         msg1
 PUBLIC         msg2
 PUBLIC         RS
 PUBLIC         RW
 PUBLIC         E
 PUBLIC         D0
 PUBLIC         cmd



*** DATA SEGMENT '?DT0?LCD_Demo':
 00000000          RS:
 00000000            DS          4
 00000004          RW:
 00000004            DS          4
 00000008          E:
 00000008            DS          4
 0000000C          msg:
 0000000C           BEGIN_INIT
 0000000C            DB          'LPC2138 ARM ADB',0x00
 0000001C           END_INIT
 0000001C          msg1:
 0000001C           BEGIN_INIT
 0000001C            DB          '  Keypad Demo  ',0x00
 0000002C           END_INIT
 0000002C          msg2:
 0000002C           BEGIN_INIT
 0000002C            DB          'Press any Key..',0x00
 0000003C           END_INIT
 0000003C          D0:
 0000003C            DS          1

*** DATA SEGMENT '?CON?LCD_Demo':
 00000000          cmd:
 00000000           BEGIN_INIT
 00000000  38        DB          0x38
 00000001  0C        DB          0xC
 00000002  06        DB          0x6
 00000003  01        DB          0x1
 00000004           END_INIT



*** CODE SEGMENT '?PR?lcd_initialize?T?LCD_Demo':
   53: void lcd_initialize(unsigned long *LCDPort)
 00000000  B530      PUSH        {R4-R5,LR}
 00000002  1C05      MOV         R5,R0 ; LCDPort
 00000004  ---- Variable 'LCDPort' assigned to Register 'R5' ----
   54: {
 00000004            ; SCOPE-START
   56:     for(i=0;i<4;i++)
 00000004  2400      MOV         R4,#0x0
 00000006  ---- Variable 'i' assigned to Register 'R4' ----
 00000006          L_4:
   58:         *(LCDPort + 3) = 0xFF << D0;            //IOCLR 0/1
 00000006  4800      LDR         R0,=D0 ; D0
 00000008  7800      LDRB        R0,[R0,#0x0] ; D0
ARM COMPILER V2.53,  LCD_Demo                                                              20/08/08  18:15:02  PAGE 5   

 0000000A  21FF      MOV         R1,#0xFF
 0000000C  4081      LSL         R1,R0
 0000000E  1C28      MOV         R0,R5 ; LCDPort
 00000010  60C1      STR         R1,[R0,#0xC]
   59:         lcd_cmd(LCDPort, D0, cmd[i]);
 00000012  1C21      MOV         R1,R4 ; i
 00000014  4800      LDR         R0,=cmd ; cmd
 00000016  5C40      LDRB        R0,[R0,R1]
 00000018  1C02      MOV         R2,R0
 0000001A  4800      LDR         R0,=D0 ; D0
 0000001C  7800      LDRB        R0,[R0,#0x0] ; D0
 0000001E  1C01      MOV         R1,R0
 00000020  1C28      MOV         R0,R5 ; LCDPort
 00000022  F7FF      BL          lcd_cmd?T  ; T=0x0001  (1)
 00000024  FFED      BL          lcd_cmd?T  ; T=0x0001  (2)
   60:         delay(15); 
 00000026  200F      MOV         R0,#0xF
 00000028  F7FF      BL          delay?T  ; T=0x0001  (1)
 0000002A  FFEA      BL          delay?T  ; T=0x0001  (2)
   61:     }
 0000002C  3401      ADD         R4,#0x1
 0000002E  1C20      MOV         R0,R4 ; i
 00000030  2804      CMP         R0,#0x4 ; i
 00000032  DBE8      BLT         L_4  ; T=0x00000006
 00000034            ; SCOPE-END
   63: }
 00000034  BC30      POP         {R4-R5}
 00000036  BC08      POP         {R3}
 00000038  4718      BX          R3
 0000003A          ENDP ; 'lcd_initialize?T'


*** CODE SEGMENT '?PR?lcd_cmd?T?LCD_Demo':
   70: void lcd_cmd(unsigned long *LCDPort, unsigned char D0, unsigned char data)
 00000000  B500      PUSH        {LR}
 00000002  ---- Variable 'data' assigned to Register 'R2' ----
 00000002  ---- Variable 'D0' assigned to Register 'R1' ----
 00000002  1C03      MOV         R3,R0 ; LCDPort
 00000004  ---- Variable 'LCDPort' assigned to Register 'R3' ----
   72:     *(LCDPort)  = data << D0;
 00000004  1C08      MOV         R0,R1 ; D0
 00000006  0600      LSL         R0,R0,#0x18 ; D0
 00000008  0E00      LSR         R0,R0,#0x18
 0000000A  1C11      MOV         R1,R2 ; data
 0000000C  0609      LSL         R1,R1,#0x18 ; data
 0000000E  0E09      LSR         R1,R1,#0x18
 00000010  4081      LSL         R1,R0
 00000012  1C18      MOV         R0,R3 ; LCDPort
 00000014  6001      STR         R1,[R0,#0x0] ; LCDPort
   73:     IOCLR0  |= 0x1000;      //RS
 00000016  4800      LDR         R2,=0x1000
 00000018  4800      LDR         R0,=0xE002800C
 0000001A  6801      LDR         R1,[R0,#0x0]
 0000001C  4311      ORR         R1,R2
 0000001E  6001      STR         R1,[R0,#0x0]
   74:     IOCLR0  |= 0x2000;      //RW
 00000020  4800      LDR         R2,=0x2000
 00000022  4800      LDR         R0,=0xE002800C
 00000024  6801      LDR         R1,[R0,#0x0]
 00000026  4311      ORR         R1,R2
 00000028  6001      STR         R1,[R0,#0x0]
   75:     IOSET0  |= 0x4000;      //EN
 0000002A  4800      LDR         R2,=0x4000
 0000002C  4800      LDR         R0,=0xE0028004
 0000002E  6801      LDR         R1,[R0,#0x0]
 00000030  4311      ORR         R1,R2
 00000032  6001      STR         R1,[R0,#0x0]
   76:     delay(15); 
ARM COMPILER V2.53,  LCD_Demo                                                              20/08/08  18:15:02  PAGE 6   

 00000034  200F      MOV         R0,#0xF
 00000036  F7FF      BL          delay?T  ; T=0x0001  (1)
 00000038  FFE3      BL          delay?T  ; T=0x0001  (2)
   77:     IOCLR0  |= 0x4000;      //EN
 0000003A  4800      LDR         R2,=0x4000
 0000003C  4800      LDR         R0,=0xE002800C
 0000003E  6801      LDR         R1,[R0,#0x0]
 00000040  4311      ORR         R1,R2
 00000042  6001      STR         R1,[R0,#0x0]
   78: }
 00000044  BC08      POP         {R3}
 00000046  4718      BX          R3
 00000048          ENDP ; 'lcd_cmd?T'


*** CODE SEGMENT '?PR?lcd_data?T?LCD_Demo':
   85: void lcd_data(unsigned long *LCDPort, unsigned char D0, unsigned char data)
 00000000  B500      PUSH        {LR}
 00000002  ---- Variable 'data' assigned to Register 'R2' ----
 00000002  ---- Variable 'D0' assigned to Register 'R1' ----
 00000002  1C03      MOV         R3,R0 ; LCDPort
 00000004  ---- Variable 'LCDPort' assigned to Register 'R3' ----
   87:     *LCDPort = data << D0;
 00000004  1C08      MOV         R0,R1 ; D0
 00000006  0600      LSL         R0,R0,#0x18 ; D0
 00000008  0E00      LSR         R0,R0,#0x18
 0000000A  1C11      MOV         R1,R2 ; data
 0000000C  0609      LSL         R1,R1,#0x18 ; data
 0000000E  0E09      LSR         R1,R1,#0x18
 00000010  4081      LSL         R1,R0
 00000012  1C18      MOV         R0,R3 ; LCDPort
 00000014  6001      STR         R1,[R0,#0x0] ; LCDPort
   88:     IOSET0  |= 0x1000;      //RS
 00000016  4800      LDR         R2,=0x1000
 00000018  4800      LDR         R0,=0xE0028004
 0000001A  6801      LDR         R1,[R0,#0x0]
 0000001C  4311      ORR         R1,R2
 0000001E  6001      STR         R1,[R0,#0x0]
   89:     IOCLR0  |= 0x2000;      //RW
 00000020  4800      LDR         R2,=0x2000
 00000022  4800      LDR         R0,=0xE002800C
 00000024  6801      LDR         R1,[R0,#0x0]
 00000026  4311      ORR         R1,R2
 00000028  6001      STR         R1,[R0,#0x0]
   90:     IOSET0  |= 0x4000;      //EN
 0000002A  4800      LDR         R2,=0x4000
 0000002C  4800      LDR         R0,=0xE0028004
 0000002E  6801      LDR         R1,[R0,#0x0]
 00000030  4311      ORR         R1,R2
 00000032  6001      STR         R1,[R0,#0x0]
   91:     delay(15); 
 00000034  200F      MOV         R0,#0xF
 00000036  F7FF      BL          delay?T  ; T=0x0001  (1)
 00000038  FFE3      BL          delay?T  ; T=0x0001  (2)
   92:     IOCLR0  |= 0x4000;      //EN
 0000003A  4800      LDR         R2,=0x4000
 0000003C  4800      LDR         R0,=0xE002800C
 0000003E  6801      LDR         R1,[R0,#0x0]
 00000040  4311      ORR         R1,R2
 00000042  6001      STR         R1,[R0,#0x0]
   93: }
 00000044  BC08      POP         {R3}
 00000046  4718      BX          R3
 00000048          ENDP ; 'lcd_data?T'


*** CODE SEGMENT '?PR?lcd_display?T?LCD_Demo':
  101: void lcd_display(unsigned long *LCDPort, unsigned char D0)
 00000000  B570      PUSH        {R4-R6,LR}
 00000002  1C0E      MOV         R6,R1 ; D0
ARM COMPILER V2.53,  LCD_Demo                                                              20/08/08  18:15:02  PAGE 7   

 00000004  ---- Variable 'D0' assigned to Register 'R6' ----
 00000004  1C05      MOV         R5,R0 ; LCDPort
 00000006  ---- Variable 'LCDPort' assigned to Register 'R5' ----
  102: {
 00000006            ; SCOPE-START
  106:     *(LCDPort + 3) = 0xFF << D0;
 00000006  1C30      MOV         R0,R6 ; D0
 00000008  0600      LSL         R0,R0,#0x18 ; D0
 0000000A  0E00      LSR         R0,R0,#0x18
 0000000C  21FF      MOV         R1,#0xFF
 0000000E  4081      LSL         R1,R0
 00000010  1C28      MOV         R0,R5 ; LCDPort
 00000012  60C1      STR         R1,[R0,#0xC]
  107:     lcd_cmd(LCDPort, D0, 0x80);
 00000014  1C30      MOV         R0,R6 ; D0
 00000016  0601      LSL         R1,R0,#0x18 ; D0
 00000018  0E09      LSR         R1,R1,#0x18
 0000001A  1C28      MOV         R0,R5 ; LCDPort
 0000001C  2280      MOV         R2,#0x80
 0000001E  F7FF      BL          lcd_cmd?T  ; T=0x0001  (1)
 00000020  FFEF      BL          lcd_cmd?T  ; T=0x0001  (2)
  108:     delay(15); 
 00000022  200F      MOV         R0,#0xF
 00000024  F7FF      BL          delay?T  ; T=0x0001  (1)
 00000026  FFEC      BL          delay?T  ; T=0x0001  (2)
  109:     i=0;
 00000028  2400      MOV         R4,#0x0
 0000002A  ---- Variable 'i' assigned to Register 'R4' ----
  110:     while(msg[i]!='\0')
 0000002A  E015      B           L_6  ; T=0x00000058
 0000002C          L_8:
  112:         *(LCDPort + 3) = 0xFF << D0;
 0000002C  1C30      MOV         R0,R6 ; D0
 0000002E  0600      LSL         R0,R0,#0x18 ; D0
 00000030  0E00      LSR         R0,R0,#0x18
 00000032  21FF      MOV         R1,#0xFF
 00000034  4081      LSL         R1,R0
 00000036  1C28      MOV         R0,R5 ; LCDPort
 00000038  60C1      STR         R1,[R0,#0xC]
  113:         lcd_data(LCDPort, D0, msg[i]);
 0000003A  1C20      MOV         R0,R4 ; i
 0000003C  0601      LSL         R1,R0,#0x18 ; i
 0000003E  0E09      LSR         R1,R1,#0x18
 00000040  4800      LDR         R0,=msg ; msg
 00000042  5C40      LDRB        R0,[R0,R1]
 00000044  1C02      MOV         R2,R0
 00000046  1C30      MOV         R0,R6 ; D0
 00000048  0601      LSL         R1,R0,#0x18 ; D0
 0000004A  0E09      LSR         R1,R1,#0x18
 0000004C  1C28      MOV         R0,R5 ; LCDPort
 0000004E  F7FF      BL          lcd_data?T  ; T=0x0001  (1)
 00000050  FFD7      BL          lcd_data?T  ; T=0x0001  (2)
  114:         i++;
 00000052  3401      ADD         R4,#0x1
 00000054  0624      LSL         R4,R4,#0x18
 00000056  0E24      LSR         R4,R4,#0x18
  115:     }
 00000058          L_6:
 00000058  1C20      MOV         R0,R4 ; i
 0000005A  0601      LSL         R1,R0,#0x18 ; i
 0000005C  0E09      LSR         R1,R1,#0x18
 0000005E  4800      LDR         R0,=msg ; msg
 00000060  5C40      LDRB        R0,[R0,R1]
 00000062  2800      CMP         R0,#0x0
 00000064  D1E2      BNE         L_8  ; T=0x0000002C
  116:     delay(15); 
ARM COMPILER V2.53,  LCD_Demo                                                              20/08/08  18:15:02  PAGE 8   

 00000066  200F      MOV         R0,#0xF
 00000068  F7FF      BL          delay?T  ; T=0x0001  (1)
 0000006A  FFCA      BL          delay?T  ; T=0x0001  (2)
  119:     *(LCDPort + 3) = 0xFF << D0;
 0000006C  1C30      MOV         R0,R6 ; D0
 0000006E  0600      LSL         R0,R0,#0x18 ; D0
 00000070  0E00      LSR         R0,R0,#0x18
 00000072  21FF      MOV         R1,#0xFF
 00000074  4081      LSL         R1,R0
 00000076  1C28      MOV         R0,R5 ; LCDPort
 00000078  60C1      STR         R1,[R0,#0xC]
  120:     lcd_cmd(LCDPort, D0, 0xc0);
 0000007A  1C30      MOV         R0,R6 ; D0
 0000007C  0601      LSL         R1,R0,#0x18 ; D0
 0000007E  0E09      LSR         R1,R1,#0x18
 00000080  1C28      MOV         R0,R5 ; LCDPort
 00000082  22C0      MOV         R2,#0xC0
 00000084  F7FF      BL          lcd_cmd?T  ; T=0x0001  (1)
 00000086  FFBC      BL          lcd_cmd?T  ; T=0x0001  (2)
  121:     delay(15); 
 00000088  200F      MOV         R0,#0xF
 0000008A  F7FF      BL          delay?T  ; T=0x0001  (1)
 0000008C  FFB9      BL          delay?T  ; T=0x0001  (2)
  122:     i=0;
 0000008E  2400      MOV         R4,#0x0
  123:     while(msg1[i]!='\0')
 00000090  E015      B           L_10  ; T=0x000000BE
 00000092          L_12:
  125:             *(LCDPort + 3) = 0xFF << D0;
 00000092  1C30      MOV         R0,R6 ; D0
 00000094  0600      LSL         R0,R0,#0x18 ; D0
 00000096  0E00      LSR         R0,R0,#0x18
 00000098  21FF      MOV         R1,#0xFF
 0000009A  4081      LSL         R1,R0
 0000009C  1C28      MOV         R0,R5 ; LCDPort
 0000009E  60C1      STR         R1,[R0,#0xC]
  126:             lcd_data(LCDPort, D0, msg1[i]);
 000000A0  1C20      MOV         R0,R4 ; i
 000000A2  0601      LSL         R1,R0,#0x18 ; i
 000000A4  0E09      LSR         R1,R1,#0x18
 000000A6  4800      LDR         R0,=msg1 ; msg1
 000000A8  5C40      LDRB        R0,[R0,R1]
 000000AA  1C02      MOV         R2,R0
 000000AC  1C30      MOV         R0,R6 ; D0
 000000AE  0601      LSL         R1,R0,#0x18 ; D0
 000000B0  0E09      LSR         R1,R1,#0x18
 000000B2  1C28      MOV         R0,R5 ; LCDPort
 000000B4  F7FF      BL          lcd_data?T  ; T=0x0001  (1)
 000000B6  FFA4      BL          lcd_data?T  ; T=0x0001  (2)
  127:             i++;
 000000B8  3401      ADD         R4,#0x1
 000000BA  0624      LSL         R4,R4,#0x18
 000000BC  0E24      LSR         R4,R4,#0x18
  128:         }
 000000BE          L_10:
 000000BE  1C20      MOV         R0,R4 ; i
 000000C0  0601      LSL         R1,R0,#0x18 ; i
 000000C2  0E09      LSR         R1,R1,#0x18
 000000C4  4800      LDR         R0,=msg1 ; msg1
 000000C6  5C40      LDRB        R0,[R0,R1]
 000000C8  2800      CMP         R0,#0x0
 000000CA  D1E2      BNE         L_12  ; T=0x00000092
  129:     delay(15); 
 000000CC  200F      MOV         R0,#0xF
 000000CE  F7FF      BL          delay?T  ; T=0x0001  (1)
 000000D0  FF97      BL          delay?T  ; T=0x0001  (2)
ARM COMPILER V2.53,  LCD_Demo                                                              20/08/08  18:15:02  PAGE 9   

  131:     DelayMs();
 000000D2  F7FF      BL          DelayMs?T  ; T=0x0001  (1)
 000000D4  FF95      BL          DelayMs?T  ; T=0x0001  (2)
  132:     DelayMs();
 000000D6  F7FF      BL          DelayMs?T  ; T=0x0001  (1)
 000000D8  FF93      BL          DelayMs?T  ; T=0x0001  (2)
  134:     lcd_cmd(LCDPort,D0,0xC0);
 000000DA  1C30      MOV         R0,R6 ; D0
 000000DC  0601      LSL         R1,R0,#0x18 ; D0
 000000DE  0E09      LSR         R1,R1,#0x18
 000000E0  1C28      MOV         R0,R5 ; LCDPort
 000000E2  22C0      MOV         R2,#0xC0
 000000E4  F7FF      BL          lcd_cmd?T  ; T=0x0001  (1)
 000000E6  FF8C      BL          lcd_cmd?T  ; T=0x0001  (2)
  136:     DelayMs();
 000000E8  F7FF      BL          DelayMs?T  ; T=0x0001  (1)
 000000EA  FF8A      BL          DelayMs?T  ; T=0x0001  (2)
  138:     i=0;
 000000EC  2400      MOV         R4,#0x0
  139:     while (msg2[i] != '\0')
 000000EE  E015      B           L_14  ; T=0x0000011C
 000000F0          L_16:
  141:         *(LCDPort + 3) = 0xFF << D0;
 000000F0  1C30      MOV         R0,R6 ; D0
 000000F2  0600      LSL         R0,R0,#0x18 ; D0
 000000F4  0E00      LSR         R0,R0,#0x18
 000000F6  21FF      MOV         R1,#0xFF
 000000F8  4081      LSL         R1,R0
 000000FA  1C28      MOV         R0,R5 ; LCDPort
 000000FC  60C1      STR         R1,[R0,#0xC]
  142:         lcd_data(LCDPort, D0, msg2[i]);
 000000FE  1C20      MOV         R0,R4 ; i
 00000100  0601      LSL         R1,R0,#0x18 ; i
 00000102  0E09      LSR         R1,R1,#0x18
 00000104  4800      LDR         R0,=msg2 ; msg2
 00000106  5C40      LDRB        R0,[R0,R1]
 00000108  1C02      MOV         R2,R0
 0000010A  1C30      MOV         R0,R6 ; D0
 0000010C  0601      LSL         R1,R0,#0x18 ; D0
 0000010E  0E09      LSR         R1,R1,#0x18
 00000110  1C28      MOV         R0,R5 ; LCDPort
 00000112  F7FF      BL          lcd_data?T  ; T=0x0001  (1)
 00000114  FF75      BL          lcd_data?T  ; T=0x0001  (2)
  143:         i++;
 00000116  3401      ADD         R4,#0x1
 00000118  0624      LSL         R4,R4,#0x18
 0000011A  0E24      LSR         R4,R4,#0x18
  144:     }
 0000011C          L_14:
 0000011C  1C20      MOV         R0,R4 ; i
 0000011E  0601      LSL         R1,R0,#0x18 ; i
 00000120  0E09      LSR         R1,R1,#0x18
 00000122  4800      LDR         R0,=msg2 ; msg2
 00000124  5C40      LDRB        R0,[R0,R1]
 00000126  2800      CMP         R0,#0x0
 00000128  D1E2      BNE         L_16  ; T=0x000000F0
 0000012A            ; SCOPE-END
  145: }
 0000012A  BC70      POP         {R4-R6}
 0000012C  BC08      POP         {R3}
 0000012E  4718      BX          R3
 00000130          ENDP ; 'lcd_display?T'


*** CODE SEGMENT '?PR?delay?T?LCD_Demo':
  151: void delay(unsigned int n)
 00000000  B410      PUSH        {R4}
 00000002  ---- Variable 'n' assigned to Register 'R0' ----
ARM COMPILER V2.53,  LCD_Demo                                                              20/08/08  18:15:02  PAGE 10  

  152: {
 00000002            ; SCOPE-START
  154:     for(i=0;i<n;i++)
 00000002  2100      MOV         R1,#0x0
 00000004  ---- Variable 'i' assigned to Register 'R1' ----
 00000004  E006      B           L_20  ; T=0x00000014
  156:         for(j=0;j<0x2700;j++)
 00000006          L_27:
 00000006  2200      MOV         R2,#0x0
 00000008  ---- Variable 'j' assigned to Register 'R2' ----
  157:         {;}
 00000008          L_23:
 00000008  3201      ADD         R2,#0x1
 0000000A  1C13      MOV         R3,R2 ; j
 0000000C  4800      LDR         R4,=0x2700
 0000000E  42A3      CMP         R3,R4 ; j
 00000010  DBFA      BLT         L_23  ; T=0x00000008
  158:     }
 00000012  3101      ADD         R1,#0x1
 00000014          L_20:
 00000014  1C0A      MOV         R2,R1 ; i
 00000016  1C03      MOV         R3,R0 ; n
 00000018  429A      CMP         R2,R3 ; i
 0000001A  D3F4      BCC         L_27  ; T=0x00000006
 0000001C            ; SCOPE-END
  159: }     
 0000001C  BC10      POP         {R4}
 0000001E  4770      BX          R14
 00000020          ENDP ; 'delay?T'


*** CODE SEGMENT '?PR?LCD_Config?T?LCD_Demo':
  166: void LCD_Config(unsigned long *LCDPort, unsigned char Dat)
 00000000  B510      PUSH        {R4,LR}
 00000002  1C0A      MOV         R2,R1 ; Dat
 00000004  ---- Variable 'Dat' assigned to Register 'R2' ----
 00000004  1C04      MOV         R4,R0 ; LCDPort
 00000006  ---- Variable 'LCDPort' assigned to Register 'R4' ----
  169:     D0 = Dat;
 00000006  1C11      MOV         R1,R2 ; Dat
 00000008  4800      LDR         R0,=D0 ; D0
 0000000A  7001      STRB        R1,[R0,#0x0] ; D0
  170:     *(LCDPort + 2) |= 0xFF << D0;   //Configuring OutPut Pins Corresponding to the D0
 0000000C  4800      LDR         R0,=D0 ; D0
 0000000E  7800      LDRB        R0,[R0,#0x0] ; D0
 00000010  22FF      MOV         R2,#0xFF
 00000012  4082      LSL         R2,R0
 00000014  1C20      MOV         R0,R4 ; LCDPort
 00000016  6881      LDR         R1,[R0,#0x8]
 00000018  4311      ORR         R1,R2
 0000001A  1C20      MOV         R0,R4 ; LCDPort
 0000001C  6081      STR         R1,[R0,#0x8]
  171:     *(LCDPort + 2) |= 0x7000;       //Configuring Default Control Pins
 0000001E  1C20      MOV         R0,R4 ; LCDPort
 00000020  6881      LDR         R1,[R0,#0x8]
 00000022  4800      LDR         R0,=0x7000
 00000024  4301      ORR         R1,R0
 00000026  1C20      MOV         R0,R4 ; LCDPort
 00000028  6081      STR         R1,[R0,#0x8]
  173:     delay(10);
 0000002A  200A      MOV         R0,#0xA
 0000002C  F7FF      BL          delay?T  ; T=0x0001  (1)
 0000002E  FFE8      BL          delay?T  ; T=0x0001  (2)
  175:     lcd_initialize(LCDPort/*Data Port*/);       //Initialize LCD
 00000030  1C20      MOV         R0,R4 ; LCDPort
 00000032  F7FF      BL          lcd_initialize?T  ; T=0x0001  (1)
 00000034  FFE5      BL          lcd_initialize?T  ; T=0x0001  (2)
  176:     delay(10);  
ARM COMPILER V2.53,  LCD_Demo                                                              20/08/08  18:15:02  PAGE 11  

 00000036  200A      MOV         R0,#0xA
 00000038  F7FF      BL          delay?T  ; T=0x0001  (1)
 0000003A  FFE2      BL          delay?T  ; T=0x0001  (2)
  177:     lcd_display(LCDPort/*Data Port*/, D0 /*Data Line LSB*/);        //display message
 0000003C  4800      LDR         R0,=D0 ; D0
 0000003E  7800      LDRB        R0,[R0,#0x0] ; D0
 00000040  1C01      MOV         R1,R0
 00000042  1C20      MOV         R0,R4 ; LCDPort
 00000044  F7FF      BL          lcd_display?T  ; T=0x0001  (1)
 00000046  FFDC      BL          lcd_display?T  ; T=0x0001  (2)
  178:     delay(10);
 00000048  200A      MOV         R0,#0xA
 0000004A  F7FF      BL          delay?T  ; T=0x0001  (1)
 0000004C  FFD9      BL          delay?T  ; T=0x0001  (2)
  183: }
 0000004E  BC10      POP         {R4}
 00000050  BC08      POP         {R3}
 00000052  4718      BX          R3
 00000054          ENDP ; 'LCD_Config?T'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =        61
  const size           =         4
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
