ARM COMPILER V2.53,  RTC_Alarm_altered                                                     24/06/15  15:32:44  PAGE 1   


ARM COMPILER V2.53, COMPILATION OF MODULE RTC_Alarm_altered
OBJECT MODULE PLACED IN .\Out\RTC_Alarm_altered.obj
COMPILER INVOKED BY: C:\Keil_3\ARM\BIN\CA.exe RTC_Alarm_altered.c THUMB BROWSE DEBUG TABS(4) OBJECT(.\Out\RTC_Alarm_alte
                    -red.obj) 

stmt  level    source

    1           /***********************************************************************************************
    2          ;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||;
    3          ;||~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Important Note ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~||;
    4          ;||~                                                                                        ~||;
    5          ;||~        This part of the software coding is the sole property of the company!           ~||;
    6          ;||~        Any unauthorized re-usage or transformation of this code is prohibited.         ~||;
    7          ;||~                                                                                        ~||;
    8          ;||~                © Pantech Solutions Pvt Ltd. | All rights Reserved                      ~||;
    9          ;||~                                                                                        ~||;
   10          ;||~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~||;
   11          ;||~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~||;
   12          ;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||;
   13          ;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||;
   14          ;|| Title       : Serial.c                                                                   ||;
   15          ;|| Status      : Completed                                                                  ||;
   16          ;|| Features    : Design of Alarm Clock using RTC and Buzzer                                 ||;
   17          ;|| Description : On Chip RTC is used & I2C is used for Internal Communications              ||;
   18          ;||               To make jp1 to enable position                                             ||;
   19          ;|| OutPut      : Visualize Output on UART1 of LPC2148 @ 9600 Baud Rate                      ||;
   20          ;||                                                                                          ||;
   21          ;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||;
   22          /***********************************************************************************************/
   23          //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      DIRECTIVES       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   24          
   25          #include <LPC213x.h>
   26          #include <stdio.h>
   27          
   28          
   29          #include "UART.h"
   30          #include "RTC.h"
   31          extern char Key = 0;
   32          #define BUZZ    7                                   //Buzzer Connected to P0.30
   33          
   34          unsigned char Flag=0;
   35          /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<   Code Begins Here    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
   36          
   37          //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<   Delay SubRoutine    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   38          
   39          void DelayMs(long ms)  // delay 1 ms per count @ CCLK 60 MHz
   40          {
   41   1          long i,j;
   42   1          for (i = 0; i < ms; i++ )
   43   1          for (j = 0; j < 6659; j++ );
   44   1      }
   45          
   46          
   47          void Delay()
   48          {
   49   1          unsigned int i,j;
   50   1          for(i=0;i<50;i++)
   51   1              for(j=0;j<700;j++);
   52   1      }
   53          
   54          void Wait()
   55          {
   56   1          Delay();Delay();Delay();
   57   1          Delay();Delay();Delay();
   58   1          Delay();Delay(); Delay();
ARM COMPILER V2.53,  RTC_Alarm_altered                                                     24/06/15  15:32:44  PAGE 2   

   59   1      }
   60          
   61          void Alarm(void)
   62          {
   63   1          IOSET0 = 1 << BUZZ;
   64   1          Wait();Wait();
   65   1          IOCLR0 = 1 << BUZZ;
   66   1          Wait();
   67   1      }
   68          
   69          
   70          //void Clean(void)
   71          //{
   72          //  unsigned char i;
   73          //  //for(i=0;i<250;i++)
   74          //      printf("[2M");
   75          //}
   76          void main(void)
   77          {
   78   1          
   79   1      
   80   1          PINSEL0 |=  0x50000;
   81   1          U1LCR   =   0x83;
   82   1          U1DLL   =   97; 
   83   1          U1DLM   =   0x00;
   84   1          U1LCR   =   0x03;
   85   1              
   86   1          U1IER   =   3;                              //Enable UART1 Recieve Interrupt
   87   1      
   88   1          IO0DIR  |=  (1<<BUZZ);                          //Configure P0.30 as O/p (Buzzer)
   89   1      
   90   1          PREINT = 0x00000392;     // Set RTC Prescaler for PCLK 30 MHz
   91   1          PREFRAC = 0x00004380;
   92   1      
   93   1          U1THR   =   0x1B;
   94   1          printf("[2J\0");                        // Clear Screen
   95   1      
   96   1          CCR     =   0x11;
   97   1          AMR =   0xF8;
   98   1      
   99   1      
  100   1          VICVectAddr13 = (unsigned)RTC_ISR;
  101   1          VICVectCntl13 = 0x20 | 13;
  102   1          VICIntEnable |= (1<<13);
  103   1      
  104   1          VICVectAddr7    =   (unsigned long)UART1_ISR;
  105   1          VICVectCntl7    =   0x20 | 7;
  106   1          VICIntEnable    =   (1 << 7);
  107   1      
  108   1          printf("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
  109   1          printf("  ARM LPC2138 RTC Demo\n\r--------------------\n\n\n");
  110   1          printf("> Press * to Set Time\n");
  111   1          printf("> Press ! to Set Alarm\n");
  112   1          printf("> Press $ to Snooze Alarm 5 Minutes\n");
  113   1          printf("> Press . to Stop Alarm\n");
  114   1          printf("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n");
  115   1          
  116   1          while(1)
  117   1          {
  118   2          //  printf("CTC : %d\t",CTC);
  119   2              printf(">>  TIME: %02d:%02d:%02d            \r",HOUR,MIN,SEC); // Display time format hh:mm:ss 
  120   2          
  121   2              DelayMs(100);                                   // Delay for display
  122   2      
  123   2              if (Key == '*')
  124   2              {
ARM COMPILER V2.53,  RTC_Alarm_altered                                                     24/06/15  15:32:44  PAGE 3   

  125   3                  Key =   0;
  126   3                  printf(">>    Set Time:   ");
  127   3                  RTC_Setup(&HOUR);
  128   3                  printf(":");
  129   3                  RTC_Setup (&MIN);
  130   3                  printf (":");
  131   3                  RTC_Setup (&SEC);
  132   3                  
  133   3                  U1THR   =   0x1B;                       //Escape
  134   3                  printf("[2J\0");                        // Clear Screen
  135   3                                          
  136   3              }
  137   2      
  138   2              if (Key == '!')
  139   2              {
  140   3                  Key = 0;
  141   3                  printf(">>\tSet Alarm: ");
  142   3                  RTC_Setup(&ALHOUR);
  143   3                  printf(":");
  144   3                  RTC_Setup(&ALMIN);
  145   3                  printf(":");
  146   3                  RTC_Setup(&ALSEC);
  147   3                          
  148   3              }
  149   2      
  150   2              if (Key == '$' && Flag == 1)
  151   2              {
  152   3                  if (MIN >= 55)
  153   3                  {
  154   4                      ALHOUR  =   HOUR + 1;
  155   4                      ALMIN   =   5   -   (60 - MIN);
  156   4                  }
  157   3                  else
  158   3                  {
  159   4                      ALMIN   =   MIN + 5;
  160   4                  }
  161   3                  Key     =   0;
  162   3                  Flag    =   0;  
  163   3                  printf("\nALARM SNOOZED!\n");   
  164   3              }
  165   2      
  166   2              if (Key == '.' && Flag == 1)
  167   2              {
  168   3                  Key     =   0;
  169   3                  Flag    =   0;
  170   3                  printf("\nALARM STOPPED...!\n");    
  171   3              }
  172   2      
  173   2              if (Flag == 1)
  174   2              {
  175   3                  Alarm();
  176   3                  Wait();
  177   3                  Alarm();
  178   3              }
  179   2      
  180   2               DelayMs(100);  // Delay for display
  181   2              
  182   2          }
  183   1      }
  184          
  185          
  186           void UART1_ISR(void) __irq
  187          {
  188   1          char Msg;
  189   1      
  190   1          if(((Msg = U1IIR) & 0x01) == 0)                 //Check Flag Status of Recieve Interrupt
ARM COMPILER V2.53,  RTC_Alarm_altered                                                     24/06/15  15:32:44  PAGE 4   

  191   1          {
  192   2              switch  (Msg & 0x0E)                        //Filter Msg
  193   2              {
  194   3                  case 0x04:  while (!(U1LSR & 0x20));    //Recieve Data 
  195   3                              Key = U1RBR;
  196   3      
  197   3                  case 0x02:  break;                      //THRE Interrupt
  198   3      
  199   3                  default  :  break;
  200   3              }
  201   2          }
  202   1      
  203   1          VICVectAddr =   7;                              //Acknowledge Interrupt
  204   1      }
  205          
  206          
  207          
  208          void RTC_ISR (void) __irq
  209          {
  210   1          if (ILR & 0x01)
  211   1          {
  212   2              ILR =   0x01;   
  213   2          }
  214   1          if (ILR & 0x02)
  215   1          {
  216   2              Flag = 1;
  217   2              printf("\nALARM\n");
  218   2              ILR = 0x02; 
  219   2              
  220   2          }
  221   1          
  222   1          VICVectAddr =   0;                              //Ack Interrupt
  223   1      }
  224          
ARM COMPILER V2.53,  RTC_Alarm_altered                                                     24/06/15  15:32:44  PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (printf?T)
 EXTERN CODE16 (RTC_Setup?T)
 EXTERN CODE32 (printf?A)
 EXTERN NUMBER (__startup)



*** PUBLICS:
 PUBLIC         UART1_ISR?A
 PUBLIC         RTC_ISR?A
 PUBLIC         DelayMs?T
 PUBLIC         Delay?T
 PUBLIC         Wait?T
 PUBLIC         Alarm?T
 PUBLIC         main
 PUBLIC         Key
 PUBLIC         Flag



*** DATA SEGMENT '?CON?RTC_Alarm_altered':
 00000000          ??S_15:
 00000000            DB          0x0A,'ALARM',0x0A,0x00
 00000008          ??S_14:
 00000008            DB          0x0A,'ALARM STOPPED...!',0x0A,0x00
 0000001C          ??S_13:
 0000001C            DB          0x0A,'ALARM SNOOZED!',0x0A,0x00
 0000002D          ??S_12:
 0000002D            DB          '>>',0x09,'Set Alarm: ',0x00
 0000003C          ??S_11:
 0000003C            DB          ':',0x00
 0000003E          ??S_10:
 0000003E            DB          '>>    Set Time:   ',0x00
 00000051          ??S_9:
 00000051            DB          '>>  TIME: %02d:%02d:%02d            ',0x0D
 00000076            DB          0x00
 00000077          ??S_8:
 00000077            DB          '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
 0000009D            DB          0x0A,0x0A,0x00
 000000A0          ??S_7:
 000000A0            DB          '> Press . to Stop Alarm',0x0A,0x00
 000000B9          ??S_6:
 000000B9            DB          '> Press $ to Snooze Alarm 5 Minutes',0x0A
 000000DD            DB          0x00
 000000DE          ??S_5:
 000000DE            DB          '> Press ! to Set Alarm',0x0A,0x00
 000000F6          ??S_4:
 000000F6            DB          '> Press * to Set Time',0x0A,0x00
 0000010D          ??S_3:
 0000010D            DB          '  ARM LPC2138 RTC Demo',0x0A,0x0D,'---'
 00000128            DB          '-----------------',0x0A,0x0A,0x0A,0x00
 0000013D          ??S_2:
 0000013D            DB          '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
 00000163            DB          0x0A,0x00
 00000165          ??S_1:
 00000165            DB          '[2J',0x00,0x00

*** DATA SEGMENT '?DT0?RTC_Alarm_altered':
 00000000          Key:
 00000000           BEGIN_INIT
 00000000  00        DB          0x0
 00000001           END_INIT
 00000001          Flag:
 00000001           BEGIN_INIT
 00000001  00        DB          0x0
 00000002           END_INIT


ARM COMPILER V2.53,  RTC_Alarm_altered                                                     24/06/15  15:32:44  PAGE 6   


*** CODE SEGMENT '?PR?DelayMs?T?RTC_Alarm_altered':
   39: void DelayMs(long ms)  // delay 1 ms per count @ CCLK 60 MHz
 00000000  B410      PUSH        {R4}
 00000002  ---- Variable 'ms' assigned to Register 'R0' ----
   40: {
 00000002            ; SCOPE-START
   42:     for (i = 0; i < ms; i++ )
 00000002  2100      MOV         R1,#0x0
 00000004  ---- Variable 'i' assigned to Register 'R1' ----
 00000004  E006      B           L_3  ; T=0x00000014
   43:     for (j = 0; j < 6659; j++ );
 00000006          L_10:
 00000006  2200      MOV         R2,#0x0
 00000008  ---- Variable 'j' assigned to Register 'R2' ----
 00000008          L_6:
 00000008  3201      ADD         R2,#0x1
 0000000A  1C13      MOV         R3,R2 ; j
 0000000C  4800      LDR         R4,=0x1A03
 0000000E  42A3      CMP         R3,R4 ; j
 00000010  DBFA      BLT         L_6  ; T=0x00000008
 00000012  3101      ADD         R1,#0x1
 00000014          L_3:
 00000014  1C03      MOV         R3,R0 ; ms
 00000016  1C0A      MOV         R2,R1 ; i
 00000018  429A      CMP         R2,R3 ; i
 0000001A  DBF4      BLT         L_10  ; T=0x00000006
 0000001C            ; SCOPE-END
   44: }
 0000001C  BC10      POP         {R4}
 0000001E  4770      BX          R14
 00000020          ENDP ; 'DelayMs?T'


*** CODE SEGMENT '?PR?Delay?T?RTC_Alarm_altered':
   48: {
 00000000            ; SCOPE-START
   50:     for(i=0;i<50;i++)
 00000000  2000      MOV         R0,#0x0
 00000002  ---- Variable 'i' assigned to Register 'R0' ----
   51:         for(j=0;j<700;j++);
 00000002          L_20:
 00000002  2100      MOV         R1,#0x0
 00000004  ---- Variable 'j' assigned to Register 'R1' ----
 00000004          L_16:
 00000004  3101      ADD         R1,#0x1
 00000006  1C0A      MOV         R2,R1 ; j
 00000008  4BAF      LDR         R3,=0x2BC
 0000000A  429A      CMP         R2,R3 ; j
 0000000C  D3FA      BCC         L_16  ; T=0x00000004
 0000000E  3001      ADD         R0,#0x1
 00000010  1C01      MOV         R1,R0 ; i
 00000012  2932      CMP         R1,#0x32 ; i
 00000014  D3F5      BCC         L_20  ; T=0x00000002
 00000016            ; SCOPE-END
   52: }
 00000016  4770      BX          R14
 00000018          ENDP ; 'Delay?T'


*** CODE SEGMENT '?PR?Wait?T?RTC_Alarm_altered':
   54: void Wait()
 00000000  B500      PUSH        {LR}
   56:     Delay();Delay();Delay();
 00000002  F7FF      BL          Delay?T  ; T=0x0001  (1)
 00000004  FFFD      BL          Delay?T  ; T=0x0001  (2)
 00000006  F7FF      BL          Delay?T  ; T=0x0001  (1)
 00000008  FFFB      BL          Delay?T  ; T=0x0001  (2)
 0000000A  F7FF      BL          Delay?T  ; T=0x0001  (1)
 0000000C  FFF9      BL          Delay?T  ; T=0x0001  (2)
   57:     Delay();Delay();Delay();
ARM COMPILER V2.53,  RTC_Alarm_altered                                                     24/06/15  15:32:44  PAGE 7   

 0000000E  F7FF      BL          Delay?T  ; T=0x0001  (1)
 00000010  FFF7      BL          Delay?T  ; T=0x0001  (2)
 00000012  F7FF      BL          Delay?T  ; T=0x0001  (1)
 00000014  FFF5      BL          Delay?T  ; T=0x0001  (2)
 00000016  F7FF      BL          Delay?T  ; T=0x0001  (1)
 00000018  FFF3      BL          Delay?T  ; T=0x0001  (2)
   58:     Delay();Delay(); Delay();
 0000001A  F7FF      BL          Delay?T  ; T=0x0001  (1)
 0000001C  FFF1      BL          Delay?T  ; T=0x0001  (2)
 0000001E  F7FF      BL          Delay?T  ; T=0x0001  (1)
 00000020  FFEF      BL          Delay?T  ; T=0x0001  (2)
 00000022  F7FF      BL          Delay?T  ; T=0x0001  (1)
 00000024  FFED      BL          Delay?T  ; T=0x0001  (2)
   59: }
 00000026  BC08      POP         {R3}
 00000028  4718      BX          R3
 0000002A          ENDP ; 'Wait?T'


*** CODE SEGMENT '?PR?Alarm?T?RTC_Alarm_altered':
   61: void Alarm(void)
 00000000  B510      PUSH        {R4,LR}
   63:     IOSET0 = 1 << BUZZ;
 00000002  2480      MOV         R4,#0x80
 00000004  4800      LDR         R0,=0xE0028004
 00000006  6004      STR         R4,[R0,#0x0]
   64:     Wait();Wait();
 00000008  F7FF      BL          Wait?T  ; T=0x0001  (1)
 0000000A  FFFA      BL          Wait?T  ; T=0x0001  (2)
 0000000C  F7FF      BL          Wait?T  ; T=0x0001  (1)
 0000000E  FFF8      BL          Wait?T  ; T=0x0001  (2)
   65:     IOCLR0 = 1 << BUZZ;
 00000010  4800      LDR         R0,=0xE002800C
 00000012  6004      STR         R4,[R0,#0x0]
   66:     Wait();
 00000014  F7FF      BL          Wait?T  ; T=0x0001  (1)
 00000016  FFF4      BL          Wait?T  ; T=0x0001  (2)
   67: }
 00000018  BC10      POP         {R4}
 0000001A  BC08      POP         {R3}
 0000001C  4718      BX          R3
 0000001E          ENDP ; 'Alarm?T'


*** CODE SEGMENT '?PR?main?RTC_Alarm_altered':
   76: void main(void)
 00000000  B500      PUSH        {LR}
   80:     PINSEL0 |=  0x50000;
 00000002  4800      LDR         R2,=0x50000
 00000004  4800      LDR         R0,=0xE002C000
 00000006  6801      LDR         R1,[R0,#0x0]
 00000008  4311      ORR         R1,R2
 0000000A  6001      STR         R1,[R0,#0x0]
   81:     U1LCR   =   0x83;
 0000000C  2183      MOV         R1,#0x83
 0000000E  4800      LDR         R0,=0xE001000C
 00000010  7001      STRB        R1,[R0,#0x0]
   82:     U1DLL   =   97; 
 00000012  2161      MOV         R1,#0x61
 00000014  4800      LDR         R0,=0xE0010000
 00000016  7001      STRB        R1,[R0,#0x0]
   83:     U1DLM   =   0x00;
 00000018  2100      MOV         R1,#0x0
 0000001A  4800      LDR         R0,=0xE0010004
 0000001C  7001      STRB        R1,[R0,#0x0]
   84:     U1LCR   =   0x03;
 0000001E  2103      MOV         R1,#0x3
 00000020  4800      LDR         R0,=0xE001000C
 00000022  7001      STRB        R1,[R0,#0x0]
   86:     U1IER   =   3;                              //Enable UART1 Recieve Interrupt
ARM COMPILER V2.53,  RTC_Alarm_altered                                                     24/06/15  15:32:44  PAGE 8   

 00000024  4800      LDR         R0,=0xE0010004
 00000026  7001      STRB        R1,[R0,#0x0]
   88:     IO0DIR  |=  (1<<BUZZ);                          //Configure P0.30 as O/p (Buzzer)
 00000028  2280      MOV         R2,#0x80
 0000002A  4800      LDR         R0,=0xE0028008
 0000002C  6801      LDR         R1,[R0,#0x0]
 0000002E  4311      ORR         R1,R2
 00000030  6001      STR         R1,[R0,#0x0]
   90:     PREINT = 0x00000392;     // Set RTC Prescaler for PCLK 30 MHz
 00000032  4800      LDRH        R1,=0x392
 00000034  4800      LDR         R0,=0xE0024080
 00000036  8001      STRH        R1,[R0,#0x0]
   91:     PREFRAC = 0x00004380;
 00000038  4800      LDRH        R1,=0x4380
 0000003A  4800      LDR         R0,=0xE0024084
 0000003C  8001      STRH        R1,[R0,#0x0]
   93:     U1THR   =   0x1B;
 0000003E  211B      MOV         R1,#0x1B
 00000040  4800      LDR         R0,=0xE0010000
 00000042  7001      STRB        R1,[R0,#0x0]
   94:     printf("[2J\0");                        // Clear Screen
 00000044  4800      LDR         R0,=??S_1 ; ??S_1
 00000046  F7FF      BL          printf?T  ; T=0x0001  (1)
 00000048  FFDB      BL          printf?T  ; T=0x0001  (2)
   96:     CCR        =   0x11;
 0000004A  2111      MOV         R1,#0x11
 0000004C  4800      LDR         R0,=0xE0024008
 0000004E  7001      STRB        R1,[R0,#0x0]
   97:     AMR    =   0xF8;
 00000050  21F8      MOV         R1,#0xF8
 00000052  4800      LDR         R0,=0xE0024010
 00000054  7001      STRB        R1,[R0,#0x0]
  100:     VICVectAddr13 = (unsigned)RTC_ISR;
 00000056  4900      LDR         R1,=RTC_ISR?A ; RTC_ISR?A
 00000058  4800      LDR         R0,=0xFFFFF134
 0000005A  6001      STR         R1,[R0,#0x0]
  101:     VICVectCntl13 = 0x20 | 13;
 0000005C  212D      MOV         R1,#0x2D
 0000005E  4800      LDR         R0,=0xFFFFF234
 00000060  6001      STR         R1,[R0,#0x0]
  102:     VICIntEnable |= (1<<13);
 00000062  4800      LDR         R2,=0x2000
 00000064  4800      LDR         R0,=0xFFFFF010
 00000066  6801      LDR         R1,[R0,#0x0]
 00000068  4311      ORR         R1,R2
 0000006A  6001      STR         R1,[R0,#0x0]
  104:     VICVectAddr7    =   (unsigned long)UART1_ISR;
 0000006C  4900      LDR         R1,=UART1_ISR?A ; UART1_ISR?A
 0000006E  4800      LDR         R0,=0xFFFFF11C
 00000070  6001      STR         R1,[R0,#0x0]
  105:     VICVectCntl7    =   0x20 | 7;
 00000072  2127      MOV         R1,#0x27
 00000074  4800      LDR         R0,=0xFFFFF21C
 00000076  6001      STR         R1,[R0,#0x0]
  106:     VICIntEnable    =   (1 << 7);
 00000078  2180      MOV         R1,#0x80
 0000007A  4800      LDR         R0,=0xFFFFF010
 0000007C  6001      STR         R1,[R0,#0x0]
  108:     printf("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
 0000007E  4800      LDR         R0,=??S_2 ; ??S_2
 00000080  F7FF      BL          printf?T  ; T=0x0001  (1)
 00000082  FFBE      BL          printf?T  ; T=0x0001  (2)
  109:     printf("  ARM LPC2138 RTC Demo\n\r--------------------\n\n\n");
 00000084  4800      LDR         R0,=??S_3 ; ??S_3
 00000086  F7FF      BL          printf?T  ; T=0x0001  (1)
 00000088  FFBB      BL          printf?T  ; T=0x0001  (2)
ARM COMPILER V2.53,  RTC_Alarm_altered                                                     24/06/15  15:32:44  PAGE 9   

  110:     printf("> Press * to Set Time\n");
 0000008A  4800      LDR         R0,=??S_4 ; ??S_4
 0000008C  F7FF      BL          printf?T  ; T=0x0001  (1)
 0000008E  FFB8      BL          printf?T  ; T=0x0001  (2)
  111:     printf("> Press ! to Set Alarm\n");
 00000090  4800      LDR         R0,=??S_5 ; ??S_5
 00000092  F7FF      BL          printf?T  ; T=0x0001  (1)
 00000094  FFB5      BL          printf?T  ; T=0x0001  (2)
  112:     printf("> Press $ to Snooze Alarm 5 Minutes\n");
 00000096  4800      LDR         R0,=??S_6 ; ??S_6
 00000098  F7FF      BL          printf?T  ; T=0x0001  (1)
 0000009A  FFB2      BL          printf?T  ; T=0x0001  (2)
  113:     printf("> Press . to Stop Alarm\n");
 0000009C  4800      LDR         R0,=??S_7 ; ??S_7
 0000009E  F7FF      BL          printf?T  ; T=0x0001  (1)
 000000A0  FFAF      BL          printf?T  ; T=0x0001  (2)
  114:     printf("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n");
 000000A2  4800      LDR         R0,=??S_8 ; ??S_8
 000000A4  F7FF      BL          printf?T  ; T=0x0001  (1)
 000000A6  FFAC      BL          printf?T  ; T=0x0001  (2)
  116:     while(1)
 000000A8          L_23:
  119:         printf(">>  TIME: %02d:%02d:%02d            \r",HOUR,MIN,SEC); // Display time format hh:mm:ss 
 000000A8  4800      LDR         R0,=0xE0024028
 000000AA  7800      LDRB        R0,[R0,#0x0]
 000000AC  1C01      MOV         R1,R0
 000000AE  4800      LDR         R0,=0xE0024024
 000000B0  7800      LDRB        R0,[R0,#0x0]
 000000B2  1C02      MOV         R2,R0
 000000B4  4800      LDR         R0,=0xE0024020
 000000B6  7800      LDRB        R0,[R0,#0x0]
 000000B8  1C03      MOV         R3,R0
 000000BA  4800      LDR         R0,=??S_9 ; ??S_9
 000000BC  F7FF      BL          printf?T  ; T=0x0001  (1)
 000000BE  FFA0      BL          printf?T  ; T=0x0001  (2)
  121:         DelayMs(100);                                   // Delay for display
 000000C0  2064      MOV         R0,#0x64
 000000C2  F7FF      BL          DelayMs?T  ; T=0x0001  (1)
 000000C4  FF9D      BL          DelayMs?T  ; T=0x0001  (2)
  123:         if (Key == '*')
 000000C6  4800      LDR         R0,=Key ; Key
 000000C8  7800      LDRB        R0,[R0,#0x0] ; Key
 000000CA  282A      CMP         R0,#0x2A
 000000CC  D11A      BNE         L_25  ; T=0x00000104
  125:             Key =   0;
 000000CE  2100      MOV         R1,#0x0
 000000D0  4800      LDR         R0,=Key ; Key
 000000D2  7001      STRB        R1,[R0,#0x0] ; Key
  126:             printf(">>    Set Time:   ");
 000000D4  4800      LDR         R0,=??S_10 ; ??S_10
 000000D6  F7FF      BL          printf?T  ; T=0x0001  (1)
 000000D8  FF93      BL          printf?T  ; T=0x0001  (2)
  127:             RTC_Setup(&HOUR);
 000000DA  4800      LDR         R0,=0xE0024028
 000000DC  F7FF      BL          RTC_Setup?T  ; T=0x0001  (1)
 000000DE  FF90      BL          RTC_Setup?T  ; T=0x0001  (2)
  128:             printf(":");
 000000E0  4800      LDR         R0,=??S_11 ; ??S_11
 000000E2  F7FF      BL          printf?T  ; T=0x0001  (1)
 000000E4  FF8D      BL          printf?T  ; T=0x0001  (2)
  129:             RTC_Setup (&MIN);
 000000E6  4800      LDR         R0,=0xE0024024
 000000E8  F7FF      BL          RTC_Setup?T  ; T=0x0001  (1)
 000000EA  FF8A      BL          RTC_Setup?T  ; T=0x0001  (2)
  130:             printf (":");
 000000EC  4800      LDR         R0,=??S_11 ; ??S_11
ARM COMPILER V2.53,  RTC_Alarm_altered                                                     24/06/15  15:32:44  PAGE 10  

 000000EE  F7FF      BL          printf?T  ; T=0x0001  (1)
 000000F0  FF87      BL          printf?T  ; T=0x0001  (2)
  131:             RTC_Setup (&SEC);
 000000F2  4800      LDR         R0,=0xE0024020
 000000F4  F7FF      BL          RTC_Setup?T  ; T=0x0001  (1)
 000000F6  FF84      BL          RTC_Setup?T  ; T=0x0001  (2)
  133:             U1THR   =   0x1B;                       //Escape
 000000F8  211B      MOV         R1,#0x1B
 000000FA  4800      LDR         R0,=0xE0010000
 000000FC  7001      STRB        R1,[R0,#0x0]
  134:             printf("[2J\0");                        // Clear Screen
 000000FE  4800      LDR         R0,=??S_1 ; ??S_1
 00000100  F7FF      BL          printf?T  ; T=0x0001  (1)
 00000102  FF7E      BL          printf?T  ; T=0x0001  (2)
  136:         }
 00000104          L_25:
  138:         if (Key == '!')
 00000104  4800      LDR         R0,=Key ; Key
 00000106  7800      LDRB        R0,[R0,#0x0] ; Key
 00000108  2821      CMP         R0,#0x21
 0000010A  D114      BNE         L_26  ; T=0x00000136
  140:             Key = 0;
 0000010C  2100      MOV         R1,#0x0
 0000010E  4800      LDR         R0,=Key ; Key
 00000110  7001      STRB        R1,[R0,#0x0] ; Key
  141:                printf(">>\tSet Alarm: ");
 00000112  4800      LDR         R0,=??S_12 ; ??S_12
 00000114  F7FF      BL          printf?T  ; T=0x0001  (1)
 00000116  FF74      BL          printf?T  ; T=0x0001  (2)
  142:             RTC_Setup(&ALHOUR);
 00000118  4800      LDR         R0,=0xE0024068
 0000011A  F7FF      BL          RTC_Setup?T  ; T=0x0001  (1)
 0000011C  FF71      BL          RTC_Setup?T  ; T=0x0001  (2)
  143:             printf(":");
 0000011E  4800      LDR         R0,=??S_11 ; ??S_11
 00000120  F7FF      BL          printf?T  ; T=0x0001  (1)
 00000122  FF6E      BL          printf?T  ; T=0x0001  (2)
  144:             RTC_Setup(&ALMIN);
 00000124  4800      LDR         R0,=0xE0024064
 00000126  F7FF      BL          RTC_Setup?T  ; T=0x0001  (1)
 00000128  FF6B      BL          RTC_Setup?T  ; T=0x0001  (2)
  145:             printf(":");
 0000012A  4800      LDR         R0,=??S_11 ; ??S_11
 0000012C  F7FF      BL          printf?T  ; T=0x0001  (1)
 0000012E  FF68      BL          printf?T  ; T=0x0001  (2)
  146:             RTC_Setup(&ALSEC);
 00000130  4800      LDR         R0,=0xE0024060
 00000132  F7FF      BL          RTC_Setup?T  ; T=0x0001  (1)
 00000134  FF65      BL          RTC_Setup?T  ; T=0x0001  (2)
  148:         }
 00000136          L_26:
  150:         if (Key == '$' && Flag == 1)
 00000136  4800      LDR         R0,=Key ; Key
 00000138  7800      LDRB        R0,[R0,#0x0] ; Key
 0000013A  2824      CMP         R0,#0x24
 0000013C  D129      BNE         L_27  ; T=0x00000192
 0000013E  4800      LDR         R0,=Flag ; Flag
 00000140  7800      LDRB        R0,[R0,#0x0] ; Flag
 00000142  2801      CMP         R0,#0x1
 00000144  D125      BNE         L_27  ; T=0x00000192
  152:             if (MIN >= 55)
 00000146  4800      LDR         R0,=0xE0024024
 00000148  7800      LDRB        R0,[R0,#0x0]
 0000014A  2837      CMP         R0,#0x37
 0000014C  DB11      BLT         L_28  ; T=0x00000172
  154:                 ALHOUR  =   HOUR + 1;
ARM COMPILER V2.53,  RTC_Alarm_altered                                                     24/06/15  15:32:44  PAGE 11  

 0000014E  4800      LDR         R0,=0xE0024028
 00000150  7800      LDRB        R0,[R0,#0x0]
 00000152  1C01      MOV         R1,R0
 00000154  3101      ADD         R1,#0x1
 00000156  0609      LSL         R1,R1,#0x18
 00000158  0E09      LSR         R1,R1,#0x18
 0000015A  4800      LDR         R0,=0xE0024068
 0000015C  7001      STRB        R1,[R0,#0x0]
  155:                 ALMIN   =   5   -   (60 - MIN);
 0000015E  4800      LDR         R0,=0xE0024024
 00000160  7800      LDRB        R0,[R0,#0x0]
 00000162  1C01      MOV         R1,R0
 00000164  4800      LDR         R0,=0xFFFFFFC9
 00000166  1809      ADD         R1,R0
 00000168  0609      LSL         R1,R1,#0x18
 0000016A  0E09      LSR         R1,R1,#0x18
 0000016C  4800      LDR         R0,=0xE0024064
 0000016E  7001      STRB        R1,[R0,#0x0]
  156:             }
 00000170  E007      B           L_29  ; T=0x00000182
 00000172          L_28:
  159:                 ALMIN   =   MIN + 5;
 00000172  4800      LDR         R0,=0xE0024024
 00000174  7800      LDRB        R0,[R0,#0x0]
 00000176  1C01      MOV         R1,R0
 00000178  3105      ADD         R1,#0x5
 0000017A  0609      LSL         R1,R1,#0x18
 0000017C  0E09      LSR         R1,R1,#0x18
 0000017E  4800      LDR         R0,=0xE0024064
 00000180  7001      STRB        R1,[R0,#0x0]
  160:             }
 00000182          L_29:
  161:             Key     =   0;
 00000182  2100      MOV         R1,#0x0
 00000184  4800      LDR         R0,=Key ; Key
 00000186  7001      STRB        R1,[R0,#0x0] ; Key
  162:             Flag    =   0;  
 00000188  4800      LDR         R0,=Flag ; Flag
 0000018A  7001      STRB        R1,[R0,#0x0] ; Flag
  163:             printf("\nALARM SNOOZED!\n");   
 0000018C  4800      LDR         R0,=??S_13 ; ??S_13
 0000018E  F7FF      BL          printf?T  ; T=0x0001  (1)
 00000190  FF37      BL          printf?T  ; T=0x0001  (2)
  164:         }
 00000192          L_27:
  166:         if (Key == '.' && Flag == 1)
 00000192  4800      LDR         R0,=Key ; Key
 00000194  7800      LDRB        R0,[R0,#0x0] ; Key
 00000196  282E      CMP         R0,#0x2E
 00000198  D10B      BNE         L_30  ; T=0x000001B2
 0000019A  4800      LDR         R0,=Flag ; Flag
 0000019C  7800      LDRB        R0,[R0,#0x0] ; Flag
 0000019E  2801      CMP         R0,#0x1
 000001A0  D107      BNE         L_30  ; T=0x000001B2
  168:             Key     =   0;
 000001A2  2100      MOV         R1,#0x0
 000001A4  4800      LDR         R0,=Key ; Key
 000001A6  7001      STRB        R1,[R0,#0x0] ; Key
  169:             Flag    =   0;
 000001A8  4800      LDR         R0,=Flag ; Flag
 000001AA  7001      STRB        R1,[R0,#0x0] ; Flag
  170:             printf("\nALARM STOPPED...!\n");    
 000001AC  4800      LDR         R0,=??S_14 ; ??S_14
 000001AE  F7FF      BL          printf?T  ; T=0x0001  (1)
 000001B0  FF27      BL          printf?T  ; T=0x0001  (2)
  171:         }
ARM COMPILER V2.53,  RTC_Alarm_altered                                                     24/06/15  15:32:44  PAGE 12  

 000001B2          L_30:
  173:         if (Flag == 1)
 000001B2  4800      LDR         R0,=Flag ; Flag
 000001B4  7800      LDRB        R0,[R0,#0x0] ; Flag
 000001B6  2801      CMP         R0,#0x1
 000001B8  D105      BNE         L_31  ; T=0x000001C6
  175:             Alarm();
 000001BA  F7FF      BL          Alarm?T  ; T=0x0001  (1)
 000001BC  FF21      BL          Alarm?T  ; T=0x0001  (2)
  176:             Wait();
 000001BE  F7FF      BL          Wait?T  ; T=0x0001  (1)
 000001C0  FF1F      BL          Wait?T  ; T=0x0001  (2)
  177:             Alarm();
 000001C2  F7FF      BL          Alarm?T  ; T=0x0001  (1)
 000001C4  FF1D      BL          Alarm?T  ; T=0x0001  (2)
  178:         }
 000001C6          L_31:
  180:          DelayMs(100);  // Delay for display
 000001C6  2064      MOV         R0,#0x64
 000001C8  F7FF      BL          DelayMs?T  ; T=0x0001  (1)
 000001CA  FF1A      BL          DelayMs?T  ; T=0x0001  (2)
  182:     }
 000001CC  E76C      B           L_23  ; T=0x000000A8
  183: }
 000001CE  BC08      POP         {R3}
 000001D0  4718      BX          R3
 000001D2          ENDP ; 'main'


*** CODE SEGMENT '?PR?UART1_ISR?A?RTC_Alarm_altered':
  186:  void UART1_ISR(void) __irq
 00000000  E92D0003  STMDB       R13!,{R0-R1}
  187: {
 00000004            ; SCOPE-START
  190:     if(((Msg = U1IIR) & 0x01) == 0)                 //Check Flag Status of Recieve Interrupt
 00000004  E5100000  LDR         R0,=0xE0010008
 00000008  E5D00000  LDRB        R0,[R0,#0x0]
 0000000C  E1A01000  MOV         R1,R0 ; Msg
 00000010  ---- Variable 'Msg' assigned to Register 'R1' ----
 00000010  E3100001  TST         R0,#0x0001
 00000014  1A00000F  BNE         L_32  ; Targ=0x58
  192:         switch  (Msg & 0x0E)                        //Filter Msg
 00000018  E1A00001  MOV         R0,R1 ; Msg
 0000001C  E1A00C00  MOV         R0,R0,LSL #24 ; Msg
 00000020  E1A00C20  MOV         R0,R0,LSR #24
 00000024  E200000E  AND         R0,R0,#0x000E
 00000028  E3500002  CMP         R0,#0x0002
 0000002C  0A000009  BEQ         L_32  ; Targ=0x58
 00000030  E3500004  CMP         R0,#0x0004
 00000034  1A000007  BNE         L_32  ; Targ=0x58
  194:             case 0x04:  while (!(U1LSR & 0x20));    //Recieve Data 
 00000038          L_40:
 00000038          L_37:
 00000038  E5100000  LDR         R0,=0xE0010014
 0000003C  E5D00000  LDRB        R0,[R0,#0x0]
 00000040  E3100020  TST         R0,#0x0020
 00000044  0AFFFFFB  BEQ         L_37  ; Targ=0x38
  195:                         Key = U1RBR;
 00000048  E5100000  LDR         R0,=0xE0010000
 0000004C  E5D01000  LDRB        R1,[R0,#0x0]
 00000050  E5100000  LDR         R0,=Key ; Key
 00000054  E5C01000  STRB        R1,[R0,#0x0] ; Key
  201:     }
 00000058          L_32:
  203:     VICVectAddr =   7;                              //Acknowledge Interrupt
 00000058  E3A01007  MOV         R1,#0x7
 0000005C  E5100000  LDR         R0,=0xFFFFF030
 00000060  E5801000  STR         R1,[R0,#0x0]
ARM COMPILER V2.53,  RTC_Alarm_altered                                                     24/06/15  15:32:44  PAGE 13  

 00000064            ; SCOPE-END
  204: }
 00000064  E8BD0003  LDMIA       R13!,{R0-R1}
 00000068  E25EF004  SUBS        R15,R14,#0x0004
 0000006C          ENDP ; 'UART1_ISR?A'


*** CODE SEGMENT '?PR?RTC_ISR?A?RTC_Alarm_altered':
  208: void RTC_ISR (void) __irq
 00000000  E92D5F0F  STMDB       R13!,{R0-R3,R8-R12,LR}
  210:     if (ILR & 0x01)
 00000004  E5100000  LDR         R0,=0xE0024000
 00000008  E5D00000  LDRB        R0,[R0,#0x0]
 0000000C  E3100001  TST         R0,#0x0001
 00000010  0A000002  BEQ         L_41  ; Targ=0x20
  212:         ILR =   0x01;   
 00000014  E3A01001  MOV         R1,#0x1
 00000018  E5100000  LDR         R0,=0xE0024000
 0000001C  E5C01000  STRB        R1,[R0,#0x0]
  213:     }
 00000020          L_41:
  214:     if (ILR & 0x02)
 00000020  E5100000  LDR         R0,=0xE0024000
 00000024  E5D00000  LDRB        R0,[R0,#0x0]
 00000028  E3100002  TST         R0,#0x0002
 0000002C  0A000007  BEQ         L_42  ; Targ=0x50
  216:         Flag = 1;
 00000030  E3A01001  MOV         R1,#0x1
 00000034  E5100000  LDR         R0,=Flag ; Flag
 00000038  E5C01000  STRB        R1,[R0,#0x0] ; Flag
  217:         printf("\nALARM\n");
 0000003C  E3E00102  MVN         R0,#0x102 ; ??S_15
 00000040  EBFFFFEE  BL          printf?A  ; Targ=0x0
  218:         ILR = 0x02; 
 00000044  E3A01002  MOV         R1,#0x2
 00000048  E5100000  LDR         R0,=0xE0024000
 0000004C  E5C01000  STRB        R1,[R0,#0x0]
  220:     }
 00000050          L_42:
  222:     VICVectAddr =   0;                              //Ack Interrupt
 00000050  E3A01000  MOV         R1,#0x0
 00000054  E5100000  LDR         R0,=0xFFFFF030
 00000058  E5801000  STR         R1,[R0,#0x0]
  223: }
 0000005C  E8BD5F0F  LDMIA       R13!,{R0-R3,R8-R12,LR}
 00000060  E25EF004  SUBS        R15,R14,#0x0004
 00000064          ENDP ; 'RTC_ISR?A'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =         2
  const size           =       362
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
