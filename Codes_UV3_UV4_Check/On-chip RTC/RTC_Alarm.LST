ARM COMPILER V2.53,  RTC_Alarm                                                             05/01/09  18:26:06  PAGE 1   


ARM COMPILER V2.53, COMPILATION OF MODULE RTC_Alarm
OBJECT MODULE PLACED IN .\Out\RTC_Alarm.obj
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe RTC_Alarm.c THUMB BROWSE DEBUG TABS(4) OBJECT(.\Out\RTC_Alarm.obj) 

stmt  level    source

    1           /***********************************************************************************************
    2          ;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||;
    3          ;||~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Important Note ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~||;
    4          ;||~                                                                                        ~||;
    5          ;||~        This part of the software coding is the sole property of the company!           ~||;
    6          ;||~        Any unauthorized re-usage or transformation of this code is prohibited.         ~||;
    7          ;||~                                                                                        ~||;
    8          ;||~                © Pantech Solutions Pvt Ltd. | All rights Reserved                      ~||;
    9          ;||~                                                                                        ~||;
   10          ;||~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~||;
   11          ;||~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~||;
   12          ;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||;
   13          ;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||;
   14          ;|| Title       : RTC.c                                                                      ||;
   15          ;|| Status      : On progress...                                                             ||;
   16          ;|| Features    : Design of Alarm Clock using RTC and Buzzer                                 ||;
   17          ;|| Description :                                                                            ||;
   18          ;||                                                                                          ||;
   19          ;||                                                                                          ||;
   20          ;||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||;
   21          /***********************************************************************************************/
   22          //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      DIRECTIVES       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   23          
   24          #include <LPC213x.h>
   25          #include <stdio.h>
   26          #include <ctype.h>
   27          #include <stdlib.h>
   28          
   29          #include "UART.h"
   30          
   31          #define BUZZ    7                                   //Buzzer Connected to P0.7
   32          
   33          void UART1_ISR(void)__irq;
   34          void RTC_ISR (void)__irq;
   35          
   36          unsigned char Flag=0;
   37          char Key;
   38          /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<   Code Begins Here    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
   39          
   40          //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<   Delay SubRoutine    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   41          
   42          void DelayMs(long ms)  // delay 1 ms per count @ CCLK 60 MHz
   43          {
   44   1          long i,j;
   45   1          for (i = 0; i < ms; i++ )
   46   1          for (j = 0; j < 6659; j++ );
   47   1      }
   48          
   49          void Initialize(void)
   50          {
   51   1          PLLCFG  =   0x24;           // M : 4  | P = 2  -> Fosc = 12MHz & CCLK = 60MHz
   52   1          PLLFEED =   0xAA;           // Feed Process
   53   1          PLLFEED =   0x55;
   54   1      
   55   1          PLLCON  =   0x01;
   56   1          PLLFEED =   0xAA;           // Feed Process
   57   1          PLLFEED =   0x55;
   58   1      
   59   1          while (!(PLLSTAT & 0x400)); //Wait untill PLL is Locked!
ARM COMPILER V2.53,  RTC_Alarm                                                             05/01/09  18:26:06  PAGE 2   

   60   1      
   61   1          PLLCON  =   0x03;           //Connect PLL as the Clock Source for Microcontroller
   62   1          PLLFEED =   0xAA;           // Feed Process
   63   1          PLLFEED =   0x55;
   64   1      
   65   1          MAMCR   =   0x02;           //Memory Accerleration Module Fully Enabled
   66   1          MAMTIM  =   0x04;           //MAM fetch cycles are 4 CCLKs in duration
   67   1      
   68   1          VPBDIV  =   0x02;           //Divide Clock for PCLK = 30MHz
   69   1      
   70   1      }
   71          
   72          
   73          void RTC_Setup(char *Buff)
   74          {
   75   1      
   76   1          unsigned char TimE;
   77   1          char i=0;
   78   1      
   79   1          for(i=0;i<2;i++)
   80   1          {
   81   2              while(!isdigit(Key));                   //Wait till Key = 0 to 9
   82   2              if (i==0)
   83   2              {
   84   3                  TimE    =   10 * atoi( &Key );
   85   3              }
   86   2              if (i==1)
   87   2              {
   88   3                  TimE    +=  atoi( &Key );
   89   3              }
   90   2              putchar(Key);
   91   2              Key     =   0;
   92   2      
   93   2          }
   94   1      
   95   1          *Buff   =   TimE;                           //Load Setup New Value
   96   1      }
   97          
   98          void Delay()
   99          {
  100   1          unsigned int i,j;
  101   1          for(i=0;i<50;i++)
  102   1              for(j=0;j<700;j++);
  103   1      }
  104          
  105          void Wait()
  106          {
  107   1          Delay();Delay();Delay();
  108   1          Delay();Delay();Delay();
  109   1          Delay();Delay(); Delay();
  110   1      }
  111          
  112          void Alarm(void)
  113          {
  114   1          IOSET0 = 1 << BUZZ;
  115   1          Wait();Wait();
  116   1          IOCLR0 = 1 << BUZZ;
  117   1          Wait();
  118   1      }
  119          
  120          //void Clean(void)
  121          //{
  122          //  unsigned char i;
  123          //  //for(i=0;i<250;i++)
  124          //      printf("[2M");
  125          //}
ARM COMPILER V2.53,  RTC_Alarm                                                             05/01/09  18:26:06  PAGE 3   

  126          void main(void)
  127          {
  128   1          
  129   1          Initialize();
  130   1          
  131   1          UART1_Init(9600/*Baud Rate*/);
  132   1              
  133   1          U1IER   =   3;                              //Enable UART1 Recieve Interrupt
  134   1          //PINSEL0   |=  (1 << 18);                      //Select Pin as UART1
  135   1      
  136   1          IO0DIR  |=  (1<<7);                         //Configure P0.7 as O/p (Buzzer)
  137   1      
  138   1          VICVectAddr0    =   (unsigned)UART1_ISR;
  139   1          VICVectCntl0    =   0x20 | 7;
  140   1          VICIntEnable    |=  (1 << 7);
  141   1      
  142   1          VICVectAddr2    =   (unsigned)RTC_ISR;
  143   1          VICVectCntl2    =   0x20 | 13;
  144   1          VICIntEnable    |=  (1 << 13);
  145   1      
  146   1          AMR     =   0xFF;                           //Mask all valued except hh:mm:ss for alarm comparision 
  147   1          PREINT = 0x00000392;     // Set RTC Prescaler for PCLK 30 MHz
  148   1          PREFRAC = 0x00004380;
  149   1      //  printf("[2J\0");                        // Clear Screen
  150   1      
  151   1          CCR     =   0x01;
  152   1          //CIIR  =   0x01;
  153   1      
  154   1          UART1_PutS("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
  155   1          UART1_PutS("  ARM LPC2138 RTC Demo\n\r--------------------\n\n\n");
  156   1          UART1_PutS("> Press * to Set Time\n");
  157   1          UART1_PutS("> Press ! to Set Alarm\n");
  158   1          UART1_PutS("> Press $ to Snooze Alarm 5 Minutes\n");
  159   1          UART1_PutS("> Press . to Stop Alarm\n");
  160   1          UART1_PutS("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n");
  161   1          
  162   1          while(1)
  163   1          {
  164   2              printf("CTC : %d\t",CTC);
  165   2              printf(">>  TIME: %02d:%02d:%02d            \r",HOUR,MIN,SEC); // Display time format hh:mm:ss 
  166   2          
  167   2              DelayMs(100);                                   // Delay for display
  168   2      
  169   2              if (Key == '*')
  170   2              {
  171   3                  Key =   0;
  172   3                  UART1_PutS(">>    Set Time:   ");
  173   3                  RTC_Setup(&HOUR);
  174   3                  UART1_PutC(':');
  175   3                  RTC_Setup (&MIN);
  176   3                  UART1_PutC (':');
  177   3                  RTC_Setup (&SEC);
  178   3                  //printf("\r\tTIME: %02d:%02d:%02d       \r",HOUR,MIN,SEC);     // Display time format hh:mm:ss 
  179   3                  //printf("^[2J");
  180   3                  
  181   3      
  182   3                  U1THR   =   0x1B;                       //Escape
  183   3                  UART1_PutS("[2J\0");                        // Clear Screen
  184   3                                          
  185   3              }
  186   2      
  187   2              if (Key == '!')
  188   2              {
  189   3                  AMR =   0xF8;
  190   3                  Key = 0;
  191   3                  UART1_PutS(">>\tSet Alarm: ");
ARM COMPILER V2.53,  RTC_Alarm                                                             05/01/09  18:26:06  PAGE 4   

  192   3                  RTC_Setup(&ALHOUR);
  193   3                  UART1_PutC(':');
  194   3                  RTC_Setup(&ALMIN);
  195   3                  UART1_PutC(':');
  196   3                  RTC_Setup(&ALSEC);
  197   3      
  198   3              }
  199   2      
  200   2              if (Key == '$' && Flag == 1)
  201   2              {
  202   3                  if (MIN >= 55)
  203   3                  {
  204   4                      ALHOUR  =   HOUR + 1;
  205   4                      ALMIN   =   5   -   (60 - MIN);
  206   4                  }
  207   3                  else
  208   3                  {
  209   4                      ALMIN   =   MIN + 5;
  210   4                  }
  211   3                  Key     =   0;
  212   3                  Flag    =   0;      
  213   3              }
  214   2      
  215   2              if (Key == '.')
  216   2              {
  217   3                  Key     =   0;
  218   3                  Flag    =   0;
  219   3              }
  220   2      
  221   2              if (Flag == 1)
  222   2              {
  223   3                  Alarm();
  224   3                  Wait();
  225   3                  Alarm();
  226   3              }
  227   2      
  228   2          }
  229   1      }
  230          
  231          
  232          
  233          void UART1_ISR(void)__irq
  234          {
  235   1          char Msg;
  236   1      
  237   1          if(((Msg = U1IIR) & 0x01) == 0)                 //Check Flag Status of Recieve Interrupt
  238   1          {
  239   2              switch  (Msg & 0x0E)                        //Filter Msg
  240   2              {
  241   3                  case 0x04:  while (!(U1LSR & 0x20));    //Recieve Data 
  242   3                              Key = U1RBR;
  243   3      
  244   3                  case 0x02:  break;                      //THRE Interrupt
  245   3      
  246   3                  default  :  break;
  247   3              }
  248   2          }
  249   1      
  250   1          VICVectAddr =   0;                              //Acknowledge Interrupt
  251   1      }
  252          
  253          
  254          
  255          void RTC_ISR (void)__irq
  256          {
  257   1          if ((ILR & 0x02) == 0x02)
ARM COMPILER V2.53,  RTC_Alarm                                                             05/01/09  18:26:06  PAGE 5   

  258   1          {
  259   2              Flag = 1;
  260   2              UART1_PutS("\nALARM\n");
  261   2              ILR = 0x02;                                 //Clear Current Interrupt
  262   2          }
  263   1          
  264   1          VICVectAddr =   0;                              //Ack Interrupt
  265   1      }
ARM COMPILER V2.53,  RTC_Alarm                                                             05/01/09  18:26:06  PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (putchar?T)
 EXTERN CODE16 (printf?T)
 EXTERN CODE16 (isdigit?T)
 EXTERN CODE16 (atoi?T)
 EXTERN CODE16 (UART1_Init?T)
 EXTERN CODE16 (UART1_PutC?T)
 EXTERN CODE16 (UART1_PutS?T)
 EXTERN CODE32 (UART1_PutS?A)
 EXTERN NUMBER (__startup)



*** PUBLICS:
 PUBLIC         UART1_ISR?A
 PUBLIC         RTC_ISR?A
 PUBLIC         DelayMs?T
 PUBLIC         Initialize?T
 PUBLIC         RTC_Setup?T
 PUBLIC         Delay?T
 PUBLIC         Wait?T
 PUBLIC         Alarm?T
 PUBLIC         main
 PUBLIC         Flag
 PUBLIC         Key



*** DATA SEGMENT '?CON?RTC_Alarm':
 00000000          ??S_13:
 00000000            DB          0x0A,'ALARM',0x0A,0x00
 00000008          ??S_12:
 00000008            DB          '>>',0x09,'Set Alarm: ',0x00
 00000017          ??S_11:
 00000017            DB          '[2J',0x00,0x00
 0000001C          ??S_10:
 0000001C            DB          '>>    Set Time:   ',0x00
 0000002F          ??S_9:
 0000002F            DB          '>>  TIME: %02d:%02d:%02d            ',0x0D
 00000054            DB          0x00
 00000055          ??S_8:
 00000055            DB          'CTC : %d',0x09,0x00
 0000005F          ??S_7:
 0000005F            DB          '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
 00000085            DB          0x0A,0x0A,0x00
 00000088          ??S_6:
 00000088            DB          '> Press . to Stop Alarm',0x0A,0x00
 000000A1          ??S_5:
 000000A1            DB          '> Press $ to Snooze Alarm 5 Minutes',0x0A
 000000C5            DB          0x00
 000000C6          ??S_4:
 000000C6            DB          '> Press ! to Set Alarm',0x0A,0x00
 000000DE          ??S_3:
 000000DE            DB          '> Press * to Set Time',0x0A,0x00
 000000F5          ??S_2:
 000000F5            DB          '  ARM LPC2138 RTC Demo',0x0A,0x0D,'---'
 00000110            DB          '-----------------',0x0A,0x0A,0x0A,0x00
 00000125          ??S_1:
 00000125            DB          '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
 0000014B            DB          0x0A,0x00

*** DATA SEGMENT '?DT0?RTC_Alarm':
 00000000          Flag:
 00000000           BEGIN_INIT
 00000000  00        DB          0x0
 00000001           END_INIT
 00000001          Key:
 00000001            DS          1
ARM COMPILER V2.53,  RTC_Alarm                                                             05/01/09  18:26:06  PAGE 7   




*** CODE SEGMENT '?PR?DelayMs?T?RTC_Alarm':
   42: void DelayMs(long ms)  // delay 1 ms per count @ CCLK 60 MHz
 00000000  B410      PUSH        {R4}
 00000002  ---- Variable 'ms' assigned to Register 'R0' ----
   43: {
 00000002            ; SCOPE-START
   45:     for (i = 0; i < ms; i++ )
 00000002  2100      MOV         R1,#0x0
 00000004  ---- Variable 'i' assigned to Register 'R1' ----
 00000004  E006      B           L_3  ; T=0x00000014
   46:     for (j = 0; j < 6659; j++ );
 00000006          L_10:
 00000006  2200      MOV         R2,#0x0
 00000008  ---- Variable 'j' assigned to Register 'R2' ----
 00000008          L_6:
 00000008  3201      ADD         R2,#0x1
 0000000A  1C13      MOV         R3,R2 ; j
 0000000C  4800      LDR         R4,=0x1A03
 0000000E  42A3      CMP         R3,R4 ; j
 00000010  DBFA      BLT         L_6  ; T=0x00000008
 00000012  3101      ADD         R1,#0x1
 00000014          L_3:
 00000014  1C03      MOV         R3,R0 ; ms
 00000016  1C0A      MOV         R2,R1 ; i
 00000018  429A      CMP         R2,R3 ; i
 0000001A  DBF4      BLT         L_10  ; T=0x00000006
 0000001C            ; SCOPE-END
   47: }
 0000001C  BC10      POP         {R4}
 0000001E  4770      BX          R14
 00000020          ENDP ; 'DelayMs?T'


*** CODE SEGMENT '?PR?Initialize?T?RTC_Alarm':
   51:     PLLCFG  =   0x24;           // M : 4  | P = 2  -> Fosc = 12MHz & CCLK = 60MHz
 00000000  2124      MOV         R1,#0x24
 00000002  4800      LDR         R0,=0xE01FC084
 00000004  7001      STRB        R1,[R0,#0x0]
   52:     PLLFEED =   0xAA;           // Feed Process
 00000006  22AA      MOV         R2,#0xAA
 00000008  4800      LDR         R0,=0xE01FC08C
 0000000A  7002      STRB        R2,[R0,#0x0]
   53:     PLLFEED =   0x55;
 0000000C  2155      MOV         R1,#0x55
 0000000E  4800      LDR         R0,=0xE01FC08C
 00000010  7001      STRB        R1,[R0,#0x0]
   55:     PLLCON  =   0x01;
 00000012  2301      MOV         R3,#0x1
 00000014  4800      LDR         R0,=0xE01FC080
 00000016  7003      STRB        R3,[R0,#0x0]
   56:     PLLFEED =   0xAA;           // Feed Process
 00000018  4800      LDR         R0,=0xE01FC08C
 0000001A  7002      STRB        R2,[R0,#0x0]
   57:     PLLFEED =   0x55;
 0000001C  4800      LDR         R0,=0xE01FC08C
 0000001E  7001      STRB        R1,[R0,#0x0]
   59:     while (!(PLLSTAT & 0x400)); //Wait untill PLL is Locked!
 00000020          L_11:
 00000020  4800      LDR         R0,=0xE01FC088
 00000022  8800      LDRH        R0,[R0,#0x0]
 00000024  4800      LDR         R1,=0x400
 00000026  4208      TST         R0,R1
 00000028  D0FA      BEQ         L_11  ; T=0x00000020
   61:     PLLCON  =   0x03;           //Connect PLL as the Clock Source for Microcontroller
 0000002A  2103      MOV         R1,#0x3
 0000002C  4800      LDR         R0,=0xE01FC080
 0000002E  7001      STRB        R1,[R0,#0x0]
ARM COMPILER V2.53,  RTC_Alarm                                                             05/01/09  18:26:06  PAGE 8   

   62:     PLLFEED =   0xAA;           // Feed Process
 00000030  21AA      MOV         R1,#0xAA
 00000032  4800      LDR         R0,=0xE01FC08C
 00000034  7001      STRB        R1,[R0,#0x0]
   63:     PLLFEED =   0x55;
 00000036  2155      MOV         R1,#0x55
 00000038  4800      LDR         R0,=0xE01FC08C
 0000003A  7001      STRB        R1,[R0,#0x0]
   65:     MAMCR   =   0x02;           //Memory Accerleration Module Fully Enabled
 0000003C  2102      MOV         R1,#0x2
 0000003E  4800      LDR         R0,=0xE01FC000
 00000040  7001      STRB        R1,[R0,#0x0]
   66:     MAMTIM  =   0x04;           //MAM fetch cycles are 4 CCLKs in duration
 00000042  2204      MOV         R2,#0x4
 00000044  4800      LDR         R0,=0xE01FC004
 00000046  7002      STRB        R2,[R0,#0x0]
   68:     VPBDIV  =   0x02;           //Divide Clock for PCLK = 30MHz
 00000048  4800      LDR         R0,=0xE01FC100
 0000004A  7001      STRB        R1,[R0,#0x0]
   70: }
 0000004C  4770      BX          R14
 0000004E          ENDP ; 'Initialize?T'


*** CODE SEGMENT '?PR?RTC_Setup?T?RTC_Alarm':
   73: void RTC_Setup(char *Buff)
 00000000  B570      PUSH        {R4-R6,LR}
 00000002  1C05      MOV         R5,R0 ; Buff
 00000004  ---- Variable 'Buff' assigned to Register 'R5' ----
 00000004  ---- Variable 'TimE' assigned to Register 'R4' ----
   74: {
 00000004            ; SCOPE-START
   77:     char i=0;
 00000004  2000      MOV         R0,#0x0
 00000006  1C06      MOV         R6,R0 ; i
 00000008  ---- Variable 'i' assigned to Register 'R6' ----
   79:     for(i=0;i<2;i++)
 00000008  1C06      MOV         R6,R0 ; i
 0000000A  E028      B           L_17  ; T=0x0000005E
   81:         while(!isdigit(Key));                   //Wait till Key = 0 to 9
 0000000C          L_23:
 0000000C          L_20:
 0000000C  4800      LDR         R0,=Key ; Key
 0000000E  7800      LDRB        R0,[R0,#0x0] ; Key
 00000010  F7FF      BL          isdigit?T  ; T=0x0001  (1)
 00000012  FFF6      BL          isdigit?T  ; T=0x0001  (2)
 00000014  2800      CMP         R0,#0x0 ; isdigit?T
 00000016  D0F9      BEQ         L_20  ; T=0x0000000C
   82:         if (i==0)
 00000018  1C30      MOV         R0,R6 ; i
 0000001A  0600      LSL         R0,R0,#0x18 ; i
 0000001C  0E00      LSR         R0,R0,#0x18
 0000001E  2800      CMP         R0,#0x0
 00000020  D106      BNE         L_24  ; T=0x00000030
   84:             TimE    =   10 * atoi( &Key );
 00000022  4800      LDR         R0,=Key ; Key
 00000024  F7FF      BL          atoi?T  ; T=0x0001  (1)
 00000026  FFEC      BL          atoi?T  ; T=0x0001  (2)
 00000028  240A      MOV         R4,#0xA
 0000002A  4344      MUL         R4,R0 ; atoi?T
 0000002C  0624      LSL         R4,R4,#0x18
 0000002E  0E24      LSR         R4,R4,#0x18
   85:         }
 00000030          L_24:
   86:         if (i==1)
 00000030  1C30      MOV         R0,R6 ; i
 00000032  0600      LSL         R0,R0,#0x18 ; i
 00000034  0E00      LSR         R0,R0,#0x18
ARM COMPILER V2.53,  RTC_Alarm                                                             05/01/09  18:26:06  PAGE 9   

 00000036  2801      CMP         R0,#0x1
 00000038  D107      BNE         L_25  ; T=0x0000004A
   88:             TimE    +=  atoi( &Key );
 0000003A  4800      LDR         R0,=Key ; Key
 0000003C  F7FF      BL          atoi?T  ; T=0x0001  (1)
 0000003E  FFE0      BL          atoi?T  ; T=0x0001  (2)
 00000040  0600      LSL         R0,R0,#0x18 ; atoi?T
 00000042  0E00      LSR         R0,R0,#0x18
 00000044  1824      ADD         R4,R0 ; TimE
 00000046  0624      LSL         R4,R4,#0x18
 00000048  0E24      LSR         R4,R4,#0x18
   89:         }
 0000004A          L_25:
   90:         putchar(Key);
 0000004A  4800      LDR         R0,=Key ; Key
 0000004C  7800      LDRB        R0,[R0,#0x0] ; Key
 0000004E  F7FF      BL          putchar?T  ; T=0x0001  (1)
 00000050  FFD7      BL          putchar?T  ; T=0x0001  (2)
   91:         Key     =   0;
 00000052  2100      MOV         R1,#0x0
 00000054  4800      LDR         R0,=Key ; Key
 00000056  7001      STRB        R1,[R0,#0x0] ; Key
   93:     }
 00000058  3601      ADD         R6,#0x1
 0000005A  0636      LSL         R6,R6,#0x18
 0000005C  0E36      LSR         R6,R6,#0x18
 0000005E          L_17:
 0000005E  1C30      MOV         R0,R6 ; i
 00000060  0600      LSL         R0,R0,#0x18 ; i
 00000062  0E00      LSR         R0,R0,#0x18
 00000064  2802      CMP         R0,#0x2
 00000066  DBD1      BLT         L_23  ; T=0x0000000C
   95:     *Buff   =   TimE;                           //Load Setup New Value
 00000068  1C21      MOV         R1,R4 ; TimE
 0000006A  1C28      MOV         R0,R5 ; Buff
 0000006C  7001      STRB        R1,[R0,#0x0] ; Buff
 0000006E            ; SCOPE-END
   96: }
 0000006E  BC70      POP         {R4-R6}
 00000070  BC08      POP         {R3}
 00000072  4718      BX          R3
 00000074          ENDP ; 'RTC_Setup?T'


*** CODE SEGMENT '?PR?Delay?T?RTC_Alarm':
   99: {
 00000000            ; SCOPE-START
  101:     for(i=0;i<50;i++)
 00000000  2000      MOV         R0,#0x0
 00000002  ---- Variable 'i' assigned to Register 'R0' ----
  102:         for(j=0;j<700;j++);
 00000002          L_35:
 00000002  2100      MOV         R1,#0x0
 00000004  ---- Variable 'j' assigned to Register 'R1' ----
 00000004          L_31:
 00000004  3101      ADD         R1,#0x1
 00000006  1C0A      MOV         R2,R1 ; j
 00000008  4BAF      LDR         R3,=0x2BC
 0000000A  429A      CMP         R2,R3 ; j
 0000000C  D3FA      BCC         L_31  ; T=0x00000004
 0000000E  3001      ADD         R0,#0x1
 00000010  1C01      MOV         R1,R0 ; i
 00000012  2932      CMP         R1,#0x32 ; i
 00000014  D3F5      BCC         L_35  ; T=0x00000002
 00000016            ; SCOPE-END
  103: }
 00000016  4770      BX          R14
 00000018          ENDP ; 'Delay?T'

ARM COMPILER V2.53,  RTC_Alarm                                                             05/01/09  18:26:06  PAGE 10  


*** CODE SEGMENT '?PR?Wait?T?RTC_Alarm':
  105: void Wait()
 00000000  B500      PUSH        {LR}
  107:     Delay();Delay();Delay();
 00000002  F7FF      BL          Delay?T  ; T=0x0001  (1)
 00000004  FFFD      BL          Delay?T  ; T=0x0001  (2)
 00000006  F7FF      BL          Delay?T  ; T=0x0001  (1)
 00000008  FFFB      BL          Delay?T  ; T=0x0001  (2)
 0000000A  F7FF      BL          Delay?T  ; T=0x0001  (1)
 0000000C  FFF9      BL          Delay?T  ; T=0x0001  (2)
  108:     Delay();Delay();Delay();
 0000000E  F7FF      BL          Delay?T  ; T=0x0001  (1)
 00000010  FFF7      BL          Delay?T  ; T=0x0001  (2)
 00000012  F7FF      BL          Delay?T  ; T=0x0001  (1)
 00000014  FFF5      BL          Delay?T  ; T=0x0001  (2)
 00000016  F7FF      BL          Delay?T  ; T=0x0001  (1)
 00000018  FFF3      BL          Delay?T  ; T=0x0001  (2)
  109:     Delay();Delay(); Delay();
 0000001A  F7FF      BL          Delay?T  ; T=0x0001  (1)
 0000001C  FFF1      BL          Delay?T  ; T=0x0001  (2)
 0000001E  F7FF      BL          Delay?T  ; T=0x0001  (1)
 00000020  FFEF      BL          Delay?T  ; T=0x0001  (2)
 00000022  F7FF      BL          Delay?T  ; T=0x0001  (1)
 00000024  FFED      BL          Delay?T  ; T=0x0001  (2)
  110: }
 00000026  BC08      POP         {R3}
 00000028  4718      BX          R3
 0000002A          ENDP ; 'Wait?T'


*** CODE SEGMENT '?PR?Alarm?T?RTC_Alarm':
  112: void Alarm(void)
 00000000  B510      PUSH        {R4,LR}
  114:     IOSET0 = 1 << BUZZ;
 00000002  2480      MOV         R4,#0x80
 00000004  4800      LDR         R0,=0xE0028004
 00000006  6004      STR         R4,[R0,#0x0]
  115:     Wait();Wait();
 00000008  F7FF      BL          Wait?T  ; T=0x0001  (1)
 0000000A  FFFA      BL          Wait?T  ; T=0x0001  (2)
 0000000C  F7FF      BL          Wait?T  ; T=0x0001  (1)
 0000000E  FFF8      BL          Wait?T  ; T=0x0001  (2)
  116:     IOCLR0 = 1 << BUZZ;
 00000010  4800      LDR         R0,=0xE002800C
 00000012  6004      STR         R4,[R0,#0x0]
  117:     Wait();
 00000014  F7FF      BL          Wait?T  ; T=0x0001  (1)
 00000016  FFF4      BL          Wait?T  ; T=0x0001  (2)
  118: }
 00000018  BC10      POP         {R4}
 0000001A  BC08      POP         {R3}
 0000001C  4718      BX          R3
 0000001E          ENDP ; 'Alarm?T'


*** CODE SEGMENT '?PR?main?RTC_Alarm':
  126: void main(void)
 00000000  B500      PUSH        {LR}
  129:     Initialize();
 00000002  F7FF      BL          Initialize?T  ; T=0x0001  (1)
 00000004  FFFD      BL          Initialize?T  ; T=0x0001  (2)
  131:     UART1_Init(9600/*Baud Rate*/);
 00000006  4800      LDR         R0,=0x2580
 00000008  F7FF      BL          UART1_Init?T  ; T=0x0001  (1)
 0000000A  FFFA      BL          UART1_Init?T  ; T=0x0001  (2)
  133:     U1IER   =   3;                              //Enable UART1 Recieve Interrupt
 0000000C  2103      MOV         R1,#0x3
 0000000E  4800      LDR         R0,=0xE0010004
 00000010  7001      STRB        R1,[R0,#0x0]
  136:     IO0DIR  |=  (1<<7);                         //Configure P0.7 as O/p (Buzzer)
ARM COMPILER V2.53,  RTC_Alarm                                                             05/01/09  18:26:06  PAGE 11  

 00000012  2280      MOV         R2,#0x80
 00000014  4800      LDR         R0,=0xE0028008
 00000016  6801      LDR         R1,[R0,#0x0]
 00000018  4311      ORR         R1,R2
 0000001A  6001      STR         R1,[R0,#0x0]
  138:     VICVectAddr0    =   (unsigned)UART1_ISR;
 0000001C  4900      LDR         R1,=UART1_ISR?A ; UART1_ISR?A
 0000001E  4800      LDR         R0,=0xFFFFF100
 00000020  6001      STR         R1,[R0,#0x0]
  139:     VICVectCntl0    =   0x20 | 7;
 00000022  2127      MOV         R1,#0x27
 00000024  4800      LDR         R0,=0xFFFFF200
 00000026  6001      STR         R1,[R0,#0x0]
  140:     VICIntEnable    |=  (1 << 7);
 00000028  4800      LDR         R0,=0xFFFFF010
 0000002A  6801      LDR         R1,[R0,#0x0]
 0000002C  4311      ORR         R1,R2
 0000002E  6001      STR         R1,[R0,#0x0]
  142:     VICVectAddr2    =   (unsigned)RTC_ISR;
 00000030  4900      LDR         R1,=RTC_ISR?A ; RTC_ISR?A
 00000032  4800      LDR         R0,=0xFFFFF108
 00000034  6001      STR         R1,[R0,#0x0]
  143:     VICVectCntl2    =   0x20 | 13;
 00000036  212D      MOV         R1,#0x2D
 00000038  4800      LDR         R0,=0xFFFFF208
 0000003A  6001      STR         R1,[R0,#0x0]
  144:     VICIntEnable    |=  (1 << 13);
 0000003C  4800      LDR         R2,=0x2000
 0000003E  4800      LDR         R0,=0xFFFFF010
 00000040  6801      LDR         R1,[R0,#0x0]
 00000042  4311      ORR         R1,R2
 00000044  6001      STR         R1,[R0,#0x0]
  146:     AMR        =   0xFF;                           //Mask all valued except hh:mm:ss for alarm comparision 
 00000046  21FF      MOV         R1,#0xFF
 00000048  4800      LDR         R0,=0xE0024010
 0000004A  7001      STRB        R1,[R0,#0x0]
  147:     PREINT = 0x00000392;     // Set RTC Prescaler for PCLK 30 MHz
 0000004C  4800      LDRH        R1,=0x392
 0000004E  4800      LDR         R0,=0xE0024080
 00000050  8001      STRH        R1,[R0,#0x0]
  148:     PREFRAC = 0x00004380;
 00000052  4800      LDRH        R1,=0x4380
 00000054  4800      LDR         R0,=0xE0024084
 00000056  8001      STRH        R1,[R0,#0x0]
  151:     CCR        =   0x01;
 00000058  2101      MOV         R1,#0x1
 0000005A  4800      LDR         R0,=0xE0024008
 0000005C  7001      STRB        R1,[R0,#0x0]
  154:     UART1_PutS("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
 0000005E  4800      LDR         R0,=??S_1 ; ??S_1
 00000060  F7FF      BL          UART1_PutS?T  ; T=0x0001  (1)
 00000062  FFCE      BL          UART1_PutS?T  ; T=0x0001  (2)
  155:     UART1_PutS("  ARM LPC2138 RTC Demo\n\r--------------------\n\n\n");
 00000064  4800      LDR         R0,=??S_2 ; ??S_2
 00000066  F7FF      BL          UART1_PutS?T  ; T=0x0001  (1)
 00000068  FFCB      BL          UART1_PutS?T  ; T=0x0001  (2)
  156:     UART1_PutS("> Press * to Set Time\n");
 0000006A  4800      LDR         R0,=??S_3 ; ??S_3
 0000006C  F7FF      BL          UART1_PutS?T  ; T=0x0001  (1)
 0000006E  FFC8      BL          UART1_PutS?T  ; T=0x0001  (2)
  157:     UART1_PutS("> Press ! to Set Alarm\n");
 00000070  4800      LDR         R0,=??S_4 ; ??S_4
 00000072  F7FF      BL          UART1_PutS?T  ; T=0x0001  (1)
 00000074  FFC5      BL          UART1_PutS?T  ; T=0x0001  (2)
  158:     UART1_PutS("> Press $ to Snooze Alarm 5 Minutes\n");
 00000076  4800      LDR         R0,=??S_5 ; ??S_5
ARM COMPILER V2.53,  RTC_Alarm                                                             05/01/09  18:26:06  PAGE 12  

 00000078  F7FF      BL          UART1_PutS?T  ; T=0x0001  (1)
 0000007A  FFC2      BL          UART1_PutS?T  ; T=0x0001  (2)
  159:     UART1_PutS("> Press . to Stop Alarm\n");
 0000007C  4800      LDR         R0,=??S_6 ; ??S_6
 0000007E  F7FF      BL          UART1_PutS?T  ; T=0x0001  (1)
 00000080  FFBF      BL          UART1_PutS?T  ; T=0x0001  (2)
  160:     UART1_PutS("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n");
 00000082  4800      LDR         R0,=??S_7 ; ??S_7
 00000084  F7FF      BL          UART1_PutS?T  ; T=0x0001  (1)
 00000086  FFBC      BL          UART1_PutS?T  ; T=0x0001  (2)
  162:     while(1)
 00000088          L_38:
  164:         printf("CTC : %d\t",CTC);
 00000088  4800      LDR         R0,=0xE0024004
 0000008A  8800      LDRH        R0,[R0,#0x0]
 0000008C  1C01      MOV         R1,R0
 0000008E  4800      LDR         R0,=??S_8 ; ??S_8
 00000090  F7FF      BL          printf?T  ; T=0x0001  (1)
 00000092  FFB6      BL          printf?T  ; T=0x0001  (2)
  165:         printf(">>  TIME: %02d:%02d:%02d            \r",HOUR,MIN,SEC); // Display time format hh:mm:ss 
 00000094  4800      LDR         R0,=0xE0024028
 00000096  7800      LDRB        R0,[R0,#0x0]
 00000098  1C01      MOV         R1,R0
 0000009A  4800      LDR         R0,=0xE0024024
 0000009C  7800      LDRB        R0,[R0,#0x0]
 0000009E  1C02      MOV         R2,R0
 000000A0  4800      LDR         R0,=0xE0024020
 000000A2  7800      LDRB        R0,[R0,#0x0]
 000000A4  1C03      MOV         R3,R0
 000000A6  4800      LDR         R0,=??S_9 ; ??S_9
 000000A8  F7FF      BL          printf?T  ; T=0x0001  (1)
 000000AA  FFAA      BL          printf?T  ; T=0x0001  (2)
  167:         DelayMs(100);                                   // Delay for display
 000000AC  2064      MOV         R0,#0x64
 000000AE  F7FF      BL          DelayMs?T  ; T=0x0001  (1)
 000000B0  FFA7      BL          DelayMs?T  ; T=0x0001  (2)
  169:         if (Key == '*')
 000000B2  4800      LDR         R0,=Key ; Key
 000000B4  7800      LDRB        R0,[R0,#0x0] ; Key
 000000B6  282A      CMP         R0,#0x2A
 000000B8  D11A      BNE         L_40  ; T=0x000000F0
  171:             Key =   0;
 000000BA  2100      MOV         R1,#0x0
 000000BC  4800      LDR         R0,=Key ; Key
 000000BE  7001      STRB        R1,[R0,#0x0] ; Key
  172:             UART1_PutS(">>    Set Time:   ");
 000000C0  4800      LDR         R0,=??S_10 ; ??S_10
 000000C2  F7FF      BL          UART1_PutS?T  ; T=0x0001  (1)
 000000C4  FF9D      BL          UART1_PutS?T  ; T=0x0001  (2)
  173:             RTC_Setup(&HOUR);
 000000C6  4800      LDR         R0,=0xE0024028
 000000C8  F7FF      BL          RTC_Setup?T  ; T=0x0001  (1)
 000000CA  FF9A      BL          RTC_Setup?T  ; T=0x0001  (2)
  174:             UART1_PutC(':');
 000000CC  203A      MOV         R0,#0x3A
 000000CE  F7FF      BL          UART1_PutC?T  ; T=0x0001  (1)
 000000D0  FF97      BL          UART1_PutC?T  ; T=0x0001  (2)
  175:             RTC_Setup (&MIN);
 000000D2  4800      LDR         R0,=0xE0024024
 000000D4  F7FF      BL          RTC_Setup?T  ; T=0x0001  (1)
 000000D6  FF94      BL          RTC_Setup?T  ; T=0x0001  (2)
  176:             UART1_PutC (':');
 000000D8  203A      MOV         R0,#0x3A
 000000DA  F7FF      BL          UART1_PutC?T  ; T=0x0001  (1)
 000000DC  FF91      BL          UART1_PutC?T  ; T=0x0001  (2)
  177:             RTC_Setup (&SEC);
ARM COMPILER V2.53,  RTC_Alarm                                                             05/01/09  18:26:06  PAGE 13  

 000000DE  4800      LDR         R0,=0xE0024020
 000000E0  F7FF      BL          RTC_Setup?T  ; T=0x0001  (1)
 000000E2  FF8E      BL          RTC_Setup?T  ; T=0x0001  (2)
  182:             U1THR   =   0x1B;                       //Escape
 000000E4  211B      MOV         R1,#0x1B
 000000E6  4800      LDR         R0,=0xE0010000
 000000E8  7001      STRB        R1,[R0,#0x0]
  183:             UART1_PutS("[2J\0");                        // Clear Screen
 000000EA  4800      LDR         R0,=??S_11 ; ??S_11
 000000EC  F7FF      BL          UART1_PutS?T  ; T=0x0001  (1)
 000000EE  FF88      BL          UART1_PutS?T  ; T=0x0001  (2)
  185:         }
 000000F0          L_40:
  187:         if (Key == '!')
 000000F0  4800      LDR         R0,=Key ; Key
 000000F2  7800      LDRB        R0,[R0,#0x0] ; Key
 000000F4  2821      CMP         R0,#0x21
 000000F6  D117      BNE         L_41  ; T=0x00000128
  189:             AMR =   0xF8;
 000000F8  21F8      MOV         R1,#0xF8
 000000FA  4800      LDR         R0,=0xE0024010
 000000FC  7001      STRB        R1,[R0,#0x0]
  190:             Key = 0;
 000000FE  2100      MOV         R1,#0x0
 00000100  4800      LDR         R0,=Key ; Key
 00000102  7001      STRB        R1,[R0,#0x0] ; Key
  191:                UART1_PutS(">>\tSet Alarm: ");
 00000104  4800      LDR         R0,=??S_12 ; ??S_12
 00000106  F7FF      BL          UART1_PutS?T  ; T=0x0001  (1)
 00000108  FF7B      BL          UART1_PutS?T  ; T=0x0001  (2)
  192:             RTC_Setup(&ALHOUR);
 0000010A  4800      LDR         R0,=0xE0024068
 0000010C  F7FF      BL          RTC_Setup?T  ; T=0x0001  (1)
 0000010E  FF78      BL          RTC_Setup?T  ; T=0x0001  (2)
  193:             UART1_PutC(':');
 00000110  203A      MOV         R0,#0x3A
 00000112  F7FF      BL          UART1_PutC?T  ; T=0x0001  (1)
 00000114  FF75      BL          UART1_PutC?T  ; T=0x0001  (2)
  194:             RTC_Setup(&ALMIN);
 00000116  4800      LDR         R0,=0xE0024064
 00000118  F7FF      BL          RTC_Setup?T  ; T=0x0001  (1)
 0000011A  FF72      BL          RTC_Setup?T  ; T=0x0001  (2)
  195:             UART1_PutC(':');
 0000011C  203A      MOV         R0,#0x3A
 0000011E  F7FF      BL          UART1_PutC?T  ; T=0x0001  (1)
 00000120  FF6F      BL          UART1_PutC?T  ; T=0x0001  (2)
  196:             RTC_Setup(&ALSEC);
 00000122  4800      LDR         R0,=0xE0024060
 00000124  F7FF      BL          RTC_Setup?T  ; T=0x0001  (1)
 00000126  FF6C      BL          RTC_Setup?T  ; T=0x0001  (2)
  198:         }
 00000128          L_41:
  200:         if (Key == '$' && Flag == 1)
 00000128  4800      LDR         R0,=Key ; Key
 0000012A  7800      LDRB        R0,[R0,#0x0] ; Key
 0000012C  2824      CMP         R0,#0x24
 0000012E  D127      BNE         L_42  ; T=0x00000180
 00000130  4800      LDR         R0,=Flag ; Flag
 00000132  7800      LDRB        R0,[R0,#0x0] ; Flag
 00000134  2801      CMP         R0,#0x1
 00000136  D123      BNE         L_42  ; T=0x00000180
  202:             if (MIN >= 55)
 00000138  4800      LDR         R0,=0xE0024024
 0000013A  7800      LDRB        R0,[R0,#0x0]
 0000013C  2837      CMP         R0,#0x37
 0000013E  DB11      BLT         L_43  ; T=0x00000164
ARM COMPILER V2.53,  RTC_Alarm                                                             05/01/09  18:26:06  PAGE 14  

  204:                 ALHOUR  =   HOUR + 1;
 00000140  4800      LDR         R0,=0xE0024028
 00000142  7800      LDRB        R0,[R0,#0x0]
 00000144  1C01      MOV         R1,R0
 00000146  3101      ADD         R1,#0x1
 00000148  0609      LSL         R1,R1,#0x18
 0000014A  0E09      LSR         R1,R1,#0x18
 0000014C  4800      LDR         R0,=0xE0024068
 0000014E  7001      STRB        R1,[R0,#0x0]
  205:                 ALMIN   =   5   -   (60 - MIN);
 00000150  4800      LDR         R0,=0xE0024024
 00000152  7800      LDRB        R0,[R0,#0x0]
 00000154  1C01      MOV         R1,R0
 00000156  4800      LDR         R0,=0xFFFFFFC9
 00000158  1809      ADD         R1,R0
 0000015A  0609      LSL         R1,R1,#0x18
 0000015C  0E09      LSR         R1,R1,#0x18
 0000015E  4800      LDR         R0,=0xE0024064
 00000160  7001      STRB        R1,[R0,#0x0]
  206:             }
 00000162  E007      B           L_44  ; T=0x00000174
 00000164          L_43:
  209:                 ALMIN   =   MIN + 5;
 00000164  4800      LDR         R0,=0xE0024024
 00000166  7800      LDRB        R0,[R0,#0x0]
 00000168  1C01      MOV         R1,R0
 0000016A  3105      ADD         R1,#0x5
 0000016C  0609      LSL         R1,R1,#0x18
 0000016E  0E09      LSR         R1,R1,#0x18
 00000170  4800      LDR         R0,=0xE0024064
 00000172  7001      STRB        R1,[R0,#0x0]
  210:             }
 00000174          L_44:
  211:             Key     =   0;
 00000174  2100      MOV         R1,#0x0
 00000176  4800      LDR         R0,=Key ; Key
 00000178  7001      STRB        R1,[R0,#0x0] ; Key
  212:             Flag    =   0;      
 0000017A  2100      MOV         R1,#0x0
 0000017C  4800      LDR         R0,=Flag ; Flag
 0000017E  7001      STRB        R1,[R0,#0x0] ; Flag
  213:         }
 00000180          L_42:
  215:         if (Key == '.')
 00000180  4800      LDR         R0,=Key ; Key
 00000182  7800      LDRB        R0,[R0,#0x0] ; Key
 00000184  282E      CMP         R0,#0x2E
 00000186  D105      BNE         L_45  ; T=0x00000194
  217:             Key     =   0;
 00000188  2100      MOV         R1,#0x0
 0000018A  4800      LDR         R0,=Key ; Key
 0000018C  7001      STRB        R1,[R0,#0x0] ; Key
  218:             Flag    =   0;
 0000018E  2100      MOV         R1,#0x0
 00000190  4800      LDR         R0,=Flag ; Flag
 00000192  7001      STRB        R1,[R0,#0x0] ; Flag
  219:         }
 00000194          L_45:
  221:         if (Flag == 1)
 00000194  4800      LDR         R0,=Flag ; Flag
 00000196  7800      LDRB        R0,[R0,#0x0] ; Flag
 00000198  2801      CMP         R0,#0x1
 0000019A  D000      BNE         $+4
 0000019C  E774      B           L_38  ; T=0x00000088
  223:             Alarm();
 000001A0  F7FF      BL          Alarm?T  ; T=0x0001  (1)
ARM COMPILER V2.53,  RTC_Alarm                                                             05/01/09  18:26:06  PAGE 15  

 000001A2  FF2E      BL          Alarm?T  ; T=0x0001  (2)
  224:             Wait();
 000001A4  F7FF      BL          Wait?T  ; T=0x0001  (1)
 000001A6  FF2C      BL          Wait?T  ; T=0x0001  (2)
  225:             Alarm();
 000001A8  F7FF      BL          Alarm?T  ; T=0x0001  (1)
 000001AA  FF2A      BL          Alarm?T  ; T=0x0001  (2)
  228:     }
 000001AC  E76C      B           L_38  ; T=0x00000088
  229: }
 000001AE  BC08      POP         {R3}
 000001B0  4718      BX          R3
 000001B2          ENDP ; 'main'


*** CODE SEGMENT '?PR?UART1_ISR?A?RTC_Alarm':
  233: void UART1_ISR(void)__irq
 00000000  E92D0003  STMDB       R13!,{R0-R1}
  234: {
 00000004            ; SCOPE-START
  237:     if(((Msg = U1IIR) & 0x01) == 0)                 //Check Flag Status of Recieve Interrupt
 00000004  E5100000  LDR         R0,=0xE0010008
 00000008  E5D00000  LDRB        R0,[R0,#0x0]
 0000000C  E1A01000  MOV         R1,R0 ; Msg
 00000010  ---- Variable 'Msg' assigned to Register 'R1' ----
 00000010  E3100001  TST         R0,#0x0001
 00000014  1A00000F  BNE         L_47  ; Targ=0x58
  239:         switch  (Msg & 0x0E)                        //Filter Msg
 00000018  E1A00001  MOV         R0,R1 ; Msg
 0000001C  E1A00C00  MOV         R0,R0,LSL #24 ; Msg
 00000020  E1A00C20  MOV         R0,R0,LSR #24
 00000024  E200000E  AND         R0,R0,#0x000E
 00000028  E3500002  CMP         R0,#0x0002
 0000002C  0A000009  BEQ         L_47  ; Targ=0x58
 00000030  E3500004  CMP         R0,#0x0004
 00000034  1A000007  BNE         L_47  ; Targ=0x58
  241:             case 0x04:  while (!(U1LSR & 0x20));    //Recieve Data 
 00000038          L_55:
 00000038          L_52:
 00000038  E5100000  LDR         R0,=0xE0010014
 0000003C  E5D00000  LDRB        R0,[R0,#0x0]
 00000040  E3100020  TST         R0,#0x0020
 00000044  0AFFFFFB  BEQ         L_52  ; Targ=0x38
  242:                         Key = U1RBR;
 00000048  E5100000  LDR         R0,=0xE0010000
 0000004C  E5D01000  LDRB        R1,[R0,#0x0]
 00000050  E5100000  LDR         R0,=Key ; Key
 00000054  E5C01000  STRB        R1,[R0,#0x0] ; Key
  248:     }
 00000058          L_47:
  250:     VICVectAddr =   0;                              //Acknowledge Interrupt
 00000058  E3A01000  MOV         R1,#0x0
 0000005C  E5100000  LDR         R0,=0xFFFFF030
 00000060  E5801000  STR         R1,[R0,#0x0]
 00000064            ; SCOPE-END
  251: }
 00000064  E8BD0003  LDMIA       R13!,{R0-R1}
 00000068  E25EF004  SUBS        R15,R14,#0x0004
 0000006C          ENDP ; 'UART1_ISR?A'


*** CODE SEGMENT '?PR?RTC_ISR?A?RTC_Alarm':
  255: void RTC_ISR (void)__irq
 00000000  E92D5F0F  STMDB       R13!,{R0-R3,R8-R12,LR}
  257:     if ((ILR & 0x02) == 0x02)
 00000004  E5100000  LDR         R0,=0xE0024000
 00000008  E5D00000  LDRB        R0,[R0,#0x0]
 0000000C  E3100002  TST         R0,#0x0002
 00000010  0A000007  BEQ         L_56  ; Targ=0x34
  259:         Flag = 1;
ARM COMPILER V2.53,  RTC_Alarm                                                             05/01/09  18:26:06  PAGE 16  

 00000014  E3A01001  MOV         R1,#0x1
 00000018  E5100000  LDR         R0,=Flag ; Flag
 0000001C  E5C01000  STRB        R1,[R0,#0x0] ; Flag
  260:         UART1_PutS("\nALARM\n");
 00000020  E3E00102  MVN         R0,#0x102 ; ??S_13
 00000024  EBFFFFF5  BL          UART1_PutS?A  ; Targ=0x0
  261:         ILR = 0x02;                                 //Clear Current Interrupt
 00000028  E3A01002  MOV         R1,#0x2
 0000002C  E5100000  LDR         R0,=0xE0024000
 00000030  E5C01000  STRB        R1,[R0,#0x0]
  262:     }
 00000034          L_56:
  264:     VICVectAddr =   0;                              //Ack Interrupt
 00000034  E3A01000  MOV         R1,#0x0
 00000038  E5100000  LDR         R0,=0xFFFFF030
 0000003C  E5801000  STR         R1,[R0,#0x0]
 00000040  E8BD5F0F  LDMIA       R13!,{R0-R3,R8-R12,LR}
 00000044  E25EF004  SUBS        R15,R14,#0x0004
 00000048          ENDP ; 'RTC_ISR?A'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =         2
  const size           =       333
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
